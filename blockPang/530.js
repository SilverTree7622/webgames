(self.webpackChunkplayable_ad_test=self.webpackChunkplayable_ad_test||[]).push([[530],{530:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Assets\": () => (/* binding */ Assets),\n  \"default\": () => (/* binding */ MainScene)\n});\n\n// EXTERNAL MODULE: ./src/userSetting.ts\nvar userSetting = __webpack_require__(453);\n// EXTERNAL MODULE: ./src/utils/math.ts\nvar math = __webpack_require__(774);\n;// CONCATENATED MODULE: ./src/scenes/passiveLoading.ts\n\r\nconst PassiveLoading = {\r\n    scene: null,\r\n    isLoading: false,\r\n    option: {},\r\n};\r\nconst StartPassiveLoading = (scene, option) => {\r\n    PassiveLoading.isLoading = true;\r\n    // option\r\n    if (option)\r\n        PassiveLoading.option = Object.assign({}, option);\r\n    // chck is exist if not then add to scene\r\n    const passiveLoadingInstance = scene.scene.get('passiveLoading');\r\n    if (!passiveLoadingInstance)\r\n        scene.game.scene.add('passiveLoading', PassiveLoadingScene, false);\r\n    // launch loading scene\r\n    scene.scene.launch('passiveLoading');\r\n    PassiveLoading.scene = scene.scene.get('passiveLoading');\r\n};\r\nconst StopPassiveLoading = async () => {\r\n    if (!PassiveLoading.scene || !PassiveLoading.isLoading) {\r\n        console.warn('passive loading is not exist:', PassiveLoading.scene);\r\n        PassiveLoading.scene = null;\r\n        return;\r\n    }\r\n    if (PassiveLoading.option) {\r\n        PassiveLoading.option.finishEvt && PassiveLoading.option.finishEvt(PassiveLoading.scene);\r\n    }\r\n    PassiveLoading.isLoading = false;\r\n    await new Promise(res => res(PassiveLoading.scene.scene.stop('passiveLoading')));\r\n    PassiveLoading.scene.loadingEndSec = await new Promise(res => res(performance.now()));\r\n    await new Promise((res) => {\r\n        res(console.log(`%c Passive Loading Time: ${((PassiveLoading.scene.loadingEndSec - PassiveLoading.scene.loadingStartSec) / 1000).toFixed(4)} sec `, 'color: black; background: white; fonWeight: bold;'));\r\n    });\r\n};\r\nclass PassiveLoadingScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: 'passiveLoading',\r\n            active: false\r\n        });\r\n        this.loadingStartSec = 0;\r\n        this.loadingEndSec = 0;\r\n        this.pointFirst = 0;\r\n        this.pointSecond = 0;\r\n        this.gapFirst = 0.2;\r\n        this.gapSecond = 0.4;\r\n    }\r\n    init() {\r\n        this.loadingStartSec = performance.now();\r\n    }\r\n    create() {\r\n        this.loadingGraphics = this.add.graphics();\r\n    }\r\n    update(time, delta) {\r\n        this.updateRotateLogo(delta);\r\n    }\r\n    updateRotateLogo(delta) {\r\n        this.pointFirst = (this.pointFirst + (delta * this.gapFirst)) % 360;\r\n        this.pointSecond = (this.pointSecond + (delta * this.gapSecond)) % 360;\r\n        // console.log('this.pointFirst, this.pointSecond: ', this.pointFirst, this.pointSecond);\r\n        // this.pointFirst = (this.pointFirst + (delta * this.gapFirst)) % 360;\r\n        // this.pointSecond = (this.pointSecond + (delta * this.gapSecond));\r\n        // let showClockwise = this.pointFirst > this.pointSecond ? true : false;\r\n        // let startAngle = this.pointFirst > this.pointSecond ? this.pointFirst : this.pointSecond;\r\n        // let endAngle = this.pointFirst > this.pointSecond ? this.pointSecond : this.pointFirst;\r\n        this.loadingGraphics.clear();\r\n        //  Without this the arc will appear closed when stroked\r\n        this.loadingGraphics.lineStyle(10, 0xff00ff, 2);\r\n        this.loadingGraphics.beginPath();\r\n        this.loadingGraphics.arc(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 60, Phaser.Math.DegToRad(this.pointFirst), Phaser.Math.DegToRad(this.pointSecond), true);\r\n        this.loadingGraphics.strokePath();\r\n    }\r\n}\r\n/* harmony default export */ const passiveLoading = ((/* unused pure expression or super */ null && (PassiveLoading)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/font/index.ts\n\r\nconst font_TxtTitleHeadSize = 50;\r\nconst TxtTitleSize = 30;\r\nconst font_TxtTitleHeightGap = 60;\r\nconst TxtOverHeadSize = userSetting/* View.w */.G7.w / 4;\r\nconst TxtMargin = 26;\r\nconst TxtPadding = 8;\r\nconst TxtAlpha = 0.9;\r\nconst TxtSize = 20;\r\nconst TxtFamily = 'Arial Black';\r\nconst TxtBackgroundColor = '#242424';\r\nconst font_ContextMarginW = userSetting/* View.w */.G7.w / 12;\r\nconst font_ContextMarginH = userSetting/* View.h */.G7.h / 12;\r\nconst font_SetFont2CommonContextStyle = (text) => {\r\n    text.setOrigin(0.5, 0.5);\r\n    text.setFontSize(TxtSize);\r\n    text.setFontFamily(TxtFamily);\r\n    return text;\r\n};\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/depth/index.ts\nconst Depth = {\r\n    tree: 90,\r\n    block: 100,\r\n    cloud: 120,\r\n    mist: 120,\r\n    wall: 140,\r\n    txt: 150,\r\n    popUp: 400,\r\n    setting: 500,\r\n    warning: 600,\r\n    gameOver: 1000,\r\n    particle: 1100,\r\n    newBest: 1200,\r\n    highest: 1500,\r\n    fullScreen: 1600,\r\n};\r\nconst depth_SetDepth = (targetObj, type) => {\r\n    if (!Depth[type]) {\r\n        console.warn('SetDepth: type is not found in the depth list:', targetObj, type);\r\n        console.log('targetObj, type: ', targetObj, type);\r\n        return;\r\n    }\r\n    if (targetObj.setDepth)\r\n        targetObj.setDepth(Depth[type]);\r\n    else\r\n        console.warn('SetDepth: targetObj is not Phaser.GameObjects');\r\n};\r\n/* harmony default export */ const depth = ((/* unused pure expression or super */ null && (Depth)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/basic.ts\n// import Phaser from 'phaser';\r\n\r\n\r\n\r\nclass BasicBlock extends Phaser.GameObjects.Container {\r\n    // public testObj;\r\n    constructor(scene) {\r\n        super(scene, 0, 0);\r\n        this.isEvtCreated = false;\r\n        this.typeName = '';\r\n        this.spawnChance = 0;\r\n        this.score = 0;\r\n        this.bData = {};\r\n        this.isOnScreen = false;\r\n        this.initPrpoerties();\r\n        this.initChildren(scene);\r\n        this.initPhysics(scene);\r\n        depth_SetDepth(this, 'block');\r\n        scene.add.existing(this);\r\n    }\r\n    initPrpoerties() {\r\n        this.id = `${new Date().getTime()}-${Phaser.Math.RND.uuid()}`;\r\n    }\r\n    initChildren(scene) {\r\n        this.shapeImg = scene.add.image(0, 0, 'ball');\r\n        this.typeTxt = scene.add.text(0, 0, '');\r\n        this.typeImg = scene.add.image(0, 0, '');\r\n        font_SetFont2CommonContextStyle(this.typeTxt);\r\n        this.initTypeTxt();\r\n        this.add([this.shapeImg, this.typeTxt, this.typeImg]);\r\n        // this.testObj = scene.matter.add.image(View.centerX, 0, 'ball');\r\n        // this.testObj.setCircle(40, 40);\r\n        // this.testObj.setBounce(1);\r\n        // console.log('this.testObj: ', this.testObj);\r\n    }\r\n    initPhysics(scene) {\r\n        // number is meaningless just default value\r\n        // for add container to matter game object\r\n        this.setSize(100, 100);\r\n        // add to matter game object\r\n        this.physicsCon = scene.matter.add.gameObject(this);\r\n        this.physicsCon.setFriction(0.005);\r\n        this.physicsCon.setBounce(1);\r\n        this.physicsCon.setSensor(true);\r\n    }\r\n    getBody() { return this.body; }\r\n    getShape() { return this.shape; }\r\n    addShape(shape) { this.shape = Object.assign(Object.assign({}, this.shape), shape); return this; }\r\n    setShape(shape) { this.shape = shape; return this; }\r\n    getShapeName() { return this.shapeName; }\r\n    setShapeName(name) { this.shapeName = name; return this; }\r\n    getShapeImg() { return this.shapeImg; }\r\n    getScore() { return this.score; }\r\n    setScore(score) { this.score = score; return this; }\r\n    addScore(score) { this.score += score; return this; }\r\n    getTimeIncrease() { return this.timeIncrease; }\r\n    setTimeIncrease(data) {\r\n        this.timeIncrease = {\r\n            chance: data.chance,\r\n            value: data.value\r\n        };\r\n        return this;\r\n    }\r\n    getSpawnRndChance() { return this.spawnChance; }\r\n    setSpawnRndChance(chanceNum) { return this.spawnChance = chanceNum; }\r\n    getTypeImg() { return this.typeImg; }\r\n    setTypeImg(typeTexture) {\r\n        if (!typeTexture)\r\n            this.typeImg.setVisible(false);\r\n        this.typeImg.setTexture(typeTexture);\r\n        return this;\r\n    }\r\n    setTypeImgDisplaySize(width, height) { this.typeImg.setDisplaySize(width, height); return this; }\r\n    initTypeTxt() {\r\n        this.setTypeTxtVisible(false);\r\n        this.setTypeTxt('');\r\n        this.typeTxt.setFontSize(50);\r\n        return this;\r\n    }\r\n    getTypeTxt() { return this.typeTxt; }\r\n    setTypeTxt(text) {\r\n        if (!this.typeTxt.visible)\r\n            this.typeTxt.setVisible(true);\r\n        if (!text)\r\n            this.typeTxt.setVisible(false);\r\n        this.typeTxt.setText(text);\r\n        return this;\r\n    }\r\n    setTypeTxtVisible(visible) { this.typeTxt.setVisible(visible); return this; }\r\n    getTypeName() { return this.typeName; }\r\n    setTypeName(typeName) { return this.typeName = typeName; }\r\n    getBlockData() { return this.bData; }\r\n    setBlockData(data) {\r\n        this.bData = {};\r\n        this.bData = data;\r\n        return this;\r\n    }\r\n    addBlockData(data) { this.bData = Object.assign(Object.assign({}, this.bData), data); }\r\n    getPhysicsCon() { return this.physicsCon; }\r\n    getWidth() { return this.typeImg.width; }\r\n    getHeight() { return this.typeImg.height; }\r\n}\r\nconst SpawnBlock = (block) => {\r\n    SetBlockInputSetting(block);\r\n    block.setPosition(system.getRndSpawnX(), system.spawnY);\r\n    block.setAngle(system.getRndAngle());\r\n    block.setVisible(true);\r\n    block.isOnScreen = true;\r\n    block.getPhysicsCon().setIgnoreGravity(false);\r\n    block.getPhysicsCon().setSensor(false);\r\n    block.getBlockData().spawn && block.getBlockData().spawn();\r\n    return block;\r\n};\r\nconst SetBlockInputSetting = (block) => {\r\n    block.removeAllListeners();\r\n    block.setInteractive();\r\n    block.scene.input.setDraggable(block, true);\r\n    block.on('pointerdown', (ptr) => {\r\n        if (block.getBlockData().ptrDown)\r\n            block.getBlockData().ptrDown(block, ptr);\r\n        block.getPhysicsCon().setIgnoreGravity(true);\r\n        block.getPhysicsCon().setStatic(true);\r\n    });\r\n    block.on('drag', (ptr) => {\r\n        if (block.getBlockData().drag)\r\n            block.getBlockData().drag(block, ptr);\r\n    });\r\n    block.on('pointerup', (ptr) => {\r\n        if (block.getBlockData().ptrUp)\r\n            block.getBlockData().ptrUp(block, ptr);\r\n        block.getPhysicsCon().setIgnoreGravity(false);\r\n        block.getPhysicsCon().setStatic(false);\r\n    });\r\n    block.on('pointerout', () => {\r\n        if (block.getBlockData().ptrOut)\r\n            block.getBlockData().ptrOut(block);\r\n        block.getPhysicsCon().setIgnoreGravity(false);\r\n        block.getPhysicsCon().setStatic(false);\r\n    });\r\n    return block;\r\n};\r\nconst SetBlockType2InitBasic = (block) => {\r\n    block.setScore(0);\r\n    block.setTimeIncrease({ chance: 0, value: 0 });\r\n    block.getTypeImg().setVisible(true);\r\n    block.initTypeTxt();\r\n    block.setBlockData({});\r\n    block.setAlpha(1);\r\n    try {\r\n        block.disableInteractive();\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n    try {\r\n        block.scene.input.setDraggable(block, false);\r\n    }\r\n    catch (e) { }\r\n    return block;\r\n};\r\nconst DeathBlock = (block) => {\r\n    if (block.getBlockData().death)\r\n        block.getBlockData().death(() => { DisableBlock(block); });\r\n    else\r\n        DisableBlock(block);\r\n    return block;\r\n};\r\nconst DisableBlock = (block) => {\r\n    if (block.getBody()) {\r\n        block.getPhysicsCon().setIgnoreGravity(true);\r\n        block.getPhysicsCon().setSensor(true);\r\n    }\r\n    block.isOnScreen = false;\r\n    block.setVisible(false);\r\n    SetBlockType2InitBasic(block);\r\n    return block;\r\n};\r\nconst UpdateBlock = (block, time, delta) => {\r\n    if (!block || !block.getBlockData())\r\n        return;\r\n    if (block.getBlockData().update)\r\n        block.getBlockData().update(time, delta);\r\n    return block;\r\n};\r\n/* harmony default export */ const basic = (BasicBlock);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/ad.ts\nconst SetBlock2Ad = (block) => {\r\n    let bData = {\r\n        ptrDown: (block) => {\r\n        },\r\n        ptrUp: (block) => {\r\n        },\r\n        drag: (block) => {\r\n        },\r\n        dragEnd: (block) => {\r\n        },\r\n    };\r\n    block.setBlockData(bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const ad = (SetBlock2Ad);\r\n\n;// CONCATENATED MODULE: ./src/utils/storage.ts\n// compare item is in the data then \r\nconst CompareCallback = (data, item) => {\r\n    const isItemExistInData = data[item];\r\n    if (isItemExistInData !== undefined || null)\r\n        return true;\r\n    else {\r\n        console.warn('item is not matched to actual data type:', item, data);\r\n        return false;\r\n    }\r\n};\r\nconst GameName = document.title; // get game title name\r\nconst GetLocalStorageData = (defaultData) => {\r\n    const data = window.localStorage.getItem(GameName);\r\n    if (data)\r\n        return JSON.parse(data);\r\n    else {\r\n        window.localStorage.setItem(GameName, JSON.stringify(defaultData));\r\n        return defaultData;\r\n    }\r\n};\r\nconst GetLocalStorageItem = (defaultData, item, exceptionKeys) => {\r\n    const gameData = GetLocalStorageData(defaultData);\r\n    let list = (typeof item === 'string' ? [item] : [...item]).map((ele) => {\r\n        let returnItem = gameData[ele];\r\n        if (CompareCallback(gameData, ele))\r\n            return returnItem;\r\n    });\r\n    // chck is there undefined data from list then set to default data\r\n    if (list.filter(child => child === undefined).length > 0) {\r\n        ClearGameLocalStorageData();\r\n        if (exceptionKeys) {\r\n            (typeof exceptionKeys === 'string' ? [exceptionKeys] : [...exceptionKeys]).map((exceptionItem) => {\r\n                if (gameData[exceptionItem] === undefined || gameData[exceptionItem] === null)\r\n                    return;\r\n                SetLocalStorageItem(defaultData, exceptionItem, gameData[exceptionItem]);\r\n            });\r\n        }\r\n    }\r\n    // return single item\r\n    if (list.length === 1)\r\n        return list[0];\r\n    // return item array\r\n    else if (item.length === list.length)\r\n        return list;\r\n};\r\nconst SetLocalStorageItem = (defaultData, item, value) => {\r\n    let gameData = GetLocalStorageData(defaultData);\r\n    if (gameData)\r\n        gameData[item] = value;\r\n    window.localStorage.setItem(GameName, JSON.stringify(gameData));\r\n    // console.log('gameData, best: ', gameData, gameData.best);\r\n    return gameData;\r\n};\r\nconst RemoveLocalStorageItem = (defaultData, item) => {\r\n    SetLocalStorageItem(defaultData, item, null);\r\n};\r\nconst ClearGameLocalStorageData = () => {\r\n    window.localStorage.removeItem(GameName);\r\n};\r\nconst ClearAllLocalStorageItem = () => {\r\n    window.localStorage.clear();\r\n};\r\nconst DebugLocalStorage = (scene, defaultData, items) => {\r\n    scene.input.mouse.disableContextMenu();\r\n    scene.input.on('pointerdown', function (pointer) {\r\n        if (pointer.rightButtonDown()) {\r\n            console.log(GetLocalStorageData(defaultData));\r\n            return;\r\n        }\r\n        if (pointer.middleButtonDown()) {\r\n            if (items instanceof Array)\r\n                items.map(ele => SetLocalStorageItem(defaultData, ele.item, ele.value));\r\n            else\r\n                SetLocalStorageItem(defaultData, items.item, items.value);\r\n            SetLocalStorageItem(defaultData, 'best', 0);\r\n            return;\r\n        }\r\n    });\r\n};\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/assetUtils.ts\nconst CommonRootUrl = 'https://silvertree7622.github.io/webgames/';\r\nconst CommonAssets = CommonRootUrl + 'assets/';\r\nconst CommonSfx = CommonAssets + 'audio/sfx/';\r\nconst CommonUI = CommonAssets + 'ui/';\r\nconst CommonAudio = CommonUI + 'audio/';\r\nconst CommonFullScreen = CommonUI + 'fullScreen/';\r\nconst CommonScroll = CommonUI + 'scroll/';\r\nconst CommonGage = CommonUI + 'gage/';\r\nconst CommonEfx = CommonUI + 'efx/';\r\nconst CommonSns = CommonRootUrl + 'sns/';\r\n/** get common asset file with exception key (when if u worry about nested things)\r\n * @param assetList common custom assest list compose of the key, url, etc\r\n * @param exceptionKeys exception key which u worry about the nested things\r\n * @returns filtered asset list\r\n */\r\nconst GetAssetFiles = (assetList, exceptionKeys) => {\r\n    if (!exceptionKeys)\r\n        return assetList;\r\n    let filteredList;\r\n    // one key to except from asset list\r\n    if (typeof exceptionKeys === 'string') {\r\n        filteredList = assetList.filter(asset => asset.key !== exceptionKeys);\r\n    }\r\n    // several key list to except from asset list\r\n    else {\r\n        filteredList = assetList.filter((asset) => {\r\n            return exceptionKeys.indexOf(asset.key) < 0;\r\n        });\r\n    }\r\n    return filteredList;\r\n};\r\n/* harmony default export */ const assetUtils = ((/* unused pure expression or super */ null && (CommonRootUrl)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/audio/index.ts\n\r\n\r\nconst audio_GameAudio = {\r\n    wholeGameData: {},\r\n    bgmList: [],\r\n    sfxList: [],\r\n    bgmKeyList: [],\r\n    sfxKeyList: [],\r\n    isAllMute: false,\r\n    isBgmMute: false,\r\n    isSfxMute: false,\r\n    allVolume: 0.5,\r\n    bgmVolume: 0.5,\r\n    sfxVolume: 0.5,\r\n    setAllMute: function (isMute) {\r\n        this.isAllMute = isMute;\r\n        this.setBgmMute(isMute);\r\n        this.setSfxMute(isMute);\r\n        SetLocalStorageItem(audio_GameAudio.wholeGameData, 'isAllMute', isMute);\r\n        return this;\r\n    },\r\n    setBgmMute: function (isMute) {\r\n        this.isBgmMute = isMute;\r\n        this.bgmList.forEach(bgm => bgm.setMute(isMute));\r\n        if (isMute)\r\n            this.bgmKeyList.map(key => this.pauseBgm(key));\r\n        else\r\n            this.bgmKeyList.map(key => this.resumeBgm(key));\r\n        SetLocalStorageItem(audio_GameAudio.wholeGameData, 'isBgmMute', isMute);\r\n        // if (this.isBgmMute === this.isSfxMute) this.setSfxMute(this.isBgmMute);\r\n        return this;\r\n    },\r\n    setSfxMute: function (isMute) {\r\n        this.isSfxMute = isMute;\r\n        this.sfxList.forEach(sfx => sfx.setMute(isMute));\r\n        SetLocalStorageItem(audio_GameAudio.wholeGameData, 'isSfxMute', isMute);\r\n        // if (this.isBgmMute === this.isSfxMute) this.setAllMute(this.isBgmMute);\r\n        return this;\r\n    },\r\n    setAllVolume: function (volume) {\r\n        this.allVolume = volume;\r\n        this.setBgmVolume(volume);\r\n        this.setSfxVolume(volume);\r\n        SetLocalStorageItem(audio_GameAudio.wholeGameData, 'allVolume', volume);\r\n        return this;\r\n    },\r\n    setBgmVolume: function (volume) {\r\n        this.bgmVolume = volume;\r\n        this.bgmList.forEach(bgm => bgm.setVolume(volume));\r\n        SetLocalStorageItem(audio_GameAudio.wholeGameData, 'bgmVolume', volume);\r\n        return this;\r\n    },\r\n    setSfxVolume: function (volume) {\r\n        this.sfxVolume = volume;\r\n        this.sfxList.forEach(sfx => sfx.setVolume(volume));\r\n        SetLocalStorageItem(audio_GameAudio.wholeGameData, 'sfxVolume', volume);\r\n        return this;\r\n    },\r\n    playBgm: function (key) {\r\n        const playBgm = this.bgmList.find(bgm => bgm.key === key);\r\n        if (playBgm)\r\n            playBgm.play();\r\n        else\r\n            console.warn(`[Audio] playBgm: ${key} not found`);\r\n        return this;\r\n    },\r\n    pauseBgm: function (key) {\r\n        const bgm = this.bgmList.find(bgm => bgm.key === key);\r\n        if (bgm)\r\n            bgm.pause();\r\n        return this;\r\n    },\r\n    resumeBgm: function (key) {\r\n        const bgm = this.bgmList.find(bgm => bgm.key === key);\r\n        if (bgm)\r\n            bgm.resume();\r\n        return this;\r\n    },\r\n    stopBgm: function (key) {\r\n        const bgm = this.bgmList.find(bgm => bgm.key === key);\r\n        if (bgm)\r\n            bgm.stop();\r\n        return this;\r\n    },\r\n    playSfx: function (key) {\r\n        const playSfx = this.sfxList.find(sfx => sfx.key === key);\r\n        if (playSfx)\r\n            playSfx.play();\r\n        else\r\n            console.warn(`[Audio] playSfx: ${key} not found`);\r\n        return this;\r\n    },\r\n    stopSfx: function (key) {\r\n        const sfx = this.sfxList.find(sfx => sfx.key === key);\r\n        if (sfx)\r\n            sfx.stop();\r\n        return this;\r\n    },\r\n    // play & stop control for instance any sfx\r\n    playSfxInstanceLoop: function (instance) {\r\n        if (!this.sfxKeyList.find(key => key === instance.key))\r\n            return;\r\n        instance.play({\r\n            mute: GetLocalStorageItem(audio_GameAudio.wholeGameData, 'isSfxMute'),\r\n            volume: GetLocalStorageItem(audio_GameAudio.wholeGameData, 'sfxVolume'),\r\n            loop: true,\r\n        });\r\n        return this;\r\n    },\r\n    stopSfxInstanceLoop: function (instance) {\r\n        if (!this.sfxKeyList.find(key => key === instance.key))\r\n            return;\r\n        instance.stop();\r\n        instance.removeAllListeners();\r\n        instance.destroy();\r\n        return this;\r\n    },\r\n};\r\nconst GameAudioData = {\r\n    allVolume: 0.5,\r\n    isAllMute: false,\r\n    bgmVolume: 0.5,\r\n    isBgmMute: false,\r\n    sfxVolume: 0.5,\r\n    isSfxMute: false,\r\n};\r\nconst GetGameAudioAssets = (sfxKeyList, bgmKeyList, exceptionKeys) => {\r\n    audio_GameAudio.sfxKeyList = GetAssetFiles(sfxKeyList, exceptionKeys).map(asset => asset.key);\r\n    if (bgmKeyList)\r\n        audio_GameAudio.bgmKeyList = GetAssetFiles(bgmKeyList, exceptionKeys).map(asset => asset.key);\r\n    else\r\n        audio_GameAudio.bgmKeyList = [];\r\n    return [\r\n        ...sfxKeyList,\r\n        ...bgmKeyList,\r\n    ];\r\n};\r\nconst InitGameAudio = () => {\r\n    // ClearGameLocalStorageData();\r\n    const [allVolume, isAllMute, bgmVolume, isBgmMute, sfxVolume, isSfxMute] = GetLocalStorageItem(audio_GameAudio.wholeGameData, [\r\n        'allVolume',\r\n        'isAllMute',\r\n        'bgmVolume',\r\n        'isBgmMute',\r\n        'sfxVolume',\r\n        'isSfxMute',\r\n    ], 'best');\r\n    audio_GameAudio.setAllVolume(allVolume);\r\n    audio_GameAudio.setAllMute(isAllMute);\r\n    audio_GameAudio.setBgmVolume(bgmVolume);\r\n    audio_GameAudio.setBgmMute(isBgmMute);\r\n    audio_GameAudio.setSfxVolume(sfxVolume);\r\n    audio_GameAudio.setSfxMute(isSfxMute);\r\n    console.log('GameAudio: ', audio_GameAudio);\r\n};\r\nconst CreateGameAudio = (scene, gameData) => {\r\n    audio_GameAudio.wholeGameData = gameData;\r\n    audio_GameAudio.bgmList = audio_GameAudio.bgmKeyList && audio_GameAudio.bgmKeyList.map(key => scene.sound.add(key, { loop: true }));\r\n    audio_GameAudio.sfxList = audio_GameAudio.sfxKeyList && audio_GameAudio.sfxKeyList.map(key => scene.sound.add(key));\r\n    InitGameAudio();\r\n};\r\n/* harmony default export */ const audio = (audio_GameAudio);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/input/index.ts\nconst Input = {\r\n    type: '',\r\n    typeHistory: [],\r\n    initPos: { x: 0, y: 0 },\r\n    isHoldingDown: false,\r\n    holdDuration: 0,\r\n    holdMaxDuration: 1000,\r\n    startHold: function () { this.isHoldingDown = true; return this; },\r\n    resetHold: function () {\r\n        this.isHoldingDown = false;\r\n        this.initPos = { x: 0, y: 0 };\r\n        this.holdDuration = 0;\r\n        this.setType('');\r\n        return this;\r\n    },\r\n    getIsHoldingDown: function () { return this.isHoldingDown; },\r\n    getHoldDuration: function () { return this.holdDuration; },\r\n    setHoldDuration: function (duration) { this.holdDuration = duration; return this; },\r\n    setInitPos: function (x, y) { this.initPos = { x: x, y: y }; return this; },\r\n    chckIsHold: function () {\r\n        if (this.holdDuration >= this.holdMaxDuration)\r\n            return true;\r\n        else\r\n            return false;\r\n    },\r\n    getType: function () { return this.type; },\r\n    setType: function (type) { this.type = type; return this; },\r\n    initTypeHistory: function () { this.typeHistory = []; },\r\n    getTypeHistory: function () { return this.typeHistory; },\r\n    getLastestInputType: function () { return this.typeHistory[this.typeHistory.length - 1]; },\r\n    push2TypeHistory: function (type) {\r\n        this.typeHistory.push(type);\r\n        return this.typeHistory;\r\n    }\r\n};\r\nconst InitInput = () => {\r\n    Input.resetHold();\r\n    Input.initTypeHistory();\r\n};\r\nconst CreateInput = (scene) => {\r\n    scene.input.on('pointerdown', () => {\r\n        Input.startHold();\r\n    });\r\n    InitInput();\r\n};\r\nconst UpdateInput = (delta) => {\r\n    if (Input.getIsHoldingDown())\r\n        Input.setHoldDuration(Input.getHoldDuration() + delta);\r\n};\r\nconst InputPtrDown = (ptr) => {\r\n    Input.setInitPos(ptr.x, ptr.y);\r\n};\r\nconst InputPtrUp = (ptr) => {\r\n    return SetInputType(Input.initPos, ptr);\r\n};\r\nconst InputDrag = (ptr) => {\r\n};\r\nconst InputPtrOut = () => {\r\n    Input.resetHold();\r\n};\r\nconst ChckSwipeDirection = (initPos, ptr) => {\r\n    const x = ptr.x - initPos.x;\r\n    const y = ptr.y - initPos.y;\r\n    if (Math.abs(x) > Math.abs(y)) {\r\n        if (x > 0)\r\n            Input.setType('swipeRight');\r\n        else\r\n            Input.setType('swipeLeft');\r\n    }\r\n    else {\r\n        if (y < 0)\r\n            Input.setType('swipeUp');\r\n        else\r\n            Input.setType('swipeDown');\r\n    }\r\n};\r\n// set comfy touch to not judge as swipe when use with actual finger\r\nconst ComfyGapTouchValue = 15;\r\nconst SetInputType = (initPos, ptr) => {\r\n    // swipe motion\r\n    const chckPosX = Math.abs(initPos.x - ptr.x) > ComfyGapTouchValue;\r\n    const chckPosY = Math.abs(initPos.y - ptr.y) > ComfyGapTouchValue;\r\n    if (chckPosX || chckPosY)\r\n        ChckSwipeDirection(initPos, ptr);\r\n    // hold or touch\r\n    else {\r\n        if (Input.chckIsHold()) {\r\n            Input.setType('hold');\r\n        }\r\n        else\r\n            Input.setType('touch');\r\n    }\r\n    Input.push2TypeHistory(Input.getType());\r\n    Input.resetHold();\r\n    return Input.getLastestInputType();\r\n};\r\n/* harmony default export */ const input = ((/* unused pure expression or super */ null && (Input)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/power.ts\n\r\n\r\n\r\n\r\n\r\nconst SetBlock2Power = (block) => {\r\n    const { scene } = block;\r\n    const rndDownDurationMax = (0,math/* GetRndNum */.hg)(0.5, 1.5);\r\n    const initPtr = (bData, block) => {\r\n        bData.isPtrDown = false;\r\n        bData.downDuration = 0;\r\n        block.setAlpha(1);\r\n    };\r\n    let bData = {\r\n        isPtrDown: false,\r\n        isComplete: false,\r\n        downDuration: 0,\r\n        downDurationMax: Math.floor(rndDownDurationMax * 1000),\r\n        ptrDown: function (block, ptr) {\r\n            InputPtrDown(ptr);\r\n            if (this.isPtrDown) {\r\n                AddObstacleBlock(block);\r\n                return;\r\n            }\r\n            this.isPtrDown = true;\r\n            audio.playSfx('powerBlockOn');\r\n            block.setAlpha(0.5);\r\n            const twList = [];\r\n            twList.push({\r\n                from: 0, to: this.downDurationMax, duration: this.downDurationMax,\r\n                onUpdate: (tw) => {\r\n                    // if keep press power btn\r\n                    if (this.isPtrDown)\r\n                        this.downDuration = tw.getValue();\r\n                    // if release power btn before done\r\n                    else {\r\n                        initPtr(this, block);\r\n                        tw.remove();\r\n                    }\r\n                },\r\n                onComplete: (tw) => {\r\n                    // done power btn play sfx\r\n                    if (!this.isPtrDown) {\r\n                        twList.shift();\r\n                        tw.remove();\r\n                        return;\r\n                    }\r\n                    initPtr(this, block);\r\n                    this.isComplete = true;\r\n                    audio.playSfx('powerBlockOff');\r\n                    scene.tweens.addCounter(twList.shift());\r\n                }\r\n            });\r\n            twList.push({\r\n                from: 1, to: 1.1, duration: 250, yoyo: true,\r\n                onUpdate: (tw, data) => {\r\n                    block.setScale(data.value);\r\n                },\r\n                onComplete: () => {\r\n                    block.setScale(1);\r\n                    audio.playSfx('touchSfx');\r\n                    ClearBlock(block, block.getScore() * this.downDurationMax / 1000);\r\n                }\r\n            });\r\n            scene.tweens.addCounter(twList.shift());\r\n        },\r\n        ptrUp: function (block, ptr) {\r\n            block.setAlpha(1);\r\n            if (this.isComplete)\r\n                return;\r\n            if (!this.isPtrDown || InputPtrUp(ptr) !== 'touch') {\r\n                AddObstacleBlock(block);\r\n                return;\r\n            }\r\n            // chck is keep press until done\r\n            initPtr(this, block);\r\n        },\r\n        ptrOut: function () {\r\n            InputPtrOut();\r\n            initPtr(this, block);\r\n        },\r\n    };\r\n    block.getTypeImg().setDisplaySize(CommonSize, CommonSize);\r\n    block.setBlockData(bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const power = (SetBlock2Power);\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/loading.ts\n\r\n\r\n\r\n\r\n\r\nconst SetBlock2Loading = (block) => {\r\n    block.setTypeTxt('%');\r\n    block.getTypeTxt().setFontSize(50);\r\n    let bData = {\r\n        isLoading: false,\r\n        ptrDown: function (block, ptr) { InputPtrDown(ptr); },\r\n        ptrUp: function (block, ptr) {\r\n            if (this.isLoading || InputPtrUp(ptr) !== 'touch') {\r\n                AddObstacleBlock(block);\r\n                return;\r\n            }\r\n            this.isLoading = true;\r\n            const rndDuration = (0,math/* GetRndInt */.dZ)(1, 4);\r\n            const processSfx = block.scene.sound.add('loadingBlockOnProcess');\r\n            audio.playSfxInstanceLoop(processSfx);\r\n            block.scene.tweens.addCounter({\r\n                from: 0, to: 100, duration: rndDuration * 1000,\r\n                onUpdate: (tw, data) => {\r\n                    const percentage = data.value.toFixed(0);\r\n                    block.setTypeTxt(percentage + '%');\r\n                },\r\n                onComplete: () => {\r\n                    audio.stopSfxInstanceLoop(processSfx);\r\n                    audio.playSfx('loadingBlockDone');\r\n                    this.isLoading = false;\r\n                    block.setTypeTxt('100%');\r\n                    setTimeout(() => {\r\n                        audio.playSfx('touchSfx');\r\n                        ClearBlock(block, block.getScore() * rndDuration);\r\n                    }, 1000);\r\n                }\r\n            });\r\n        },\r\n        ptrOut: function () { InputPtrOut(); },\r\n    };\r\n    block.getTypeImg().setDisplaySize(CommonSize, CommonSize);\r\n    block.setBlockData(bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const loading = (SetBlock2Loading);\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/touch.ts\n\r\n\r\n\r\n\r\nconst SetBlock2Touch = (block) => {\r\n    const rndTouchCnt = (0,math/* GetRndInt */.dZ)(2, 5);\r\n    const disableTouchDelayTime = 240;\r\n    let bData = {\r\n        touchCnt: 0,\r\n        maxTouchCnt: rndTouchCnt,\r\n        isAble2Touch: true,\r\n        ptrDown: function (block, ptr) { InputPtrDown(ptr); },\r\n        ptrUp: function (block, ptr) {\r\n            if (InputPtrUp(ptr) !== 'touch') {\r\n                AddObstacleBlock(block);\r\n                return;\r\n            }\r\n            if (!this.isAble2Touch)\r\n                return;\r\n            this.touchCnt++;\r\n            if (this.touchCnt >= this.maxTouchCnt) {\r\n                this.touchCnt = 0;\r\n                ClearBlock(block, block.getScore() * this.maxTouchCnt);\r\n            }\r\n            else {\r\n                // disable click, then able after delay\r\n                this.isAble2Touch = false;\r\n                block.scene.tweens.addCounter({\r\n                    from: 1, to: 1.1, duration: disableTouchDelayTime, yoyo: true, ease: 'Bounce',\r\n                    onUpdate: (tw, data) => {\r\n                        block.setScale(data.value);\r\n                    },\r\n                    onComplete: () => {\r\n                        block.setScale(1);\r\n                        this.isAble2Touch = true;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        ptrOut: function () { InputPtrOut(); }\r\n    };\r\n    block.getTypeImg().setDisplaySize(CommonSize, CommonSize);\r\n    block.setBlockData(bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const touch = (SetBlock2Touch);\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/obstacle.ts\n\r\n\r\nconst ObstacleTextureList = (/* unused pure expression or super */ null && (['obstacleBall', 'obstacleRect', 'obstacleSquare']));\r\nconst SetObstacle = (block) => {\r\n    let bData = {\r\n        isAble2Touch: true,\r\n        ptrDown: function (block, ptr) { InputPtrDown(ptr); },\r\n        ptrUp: function (block, ptr) {\r\n            const inputType = InputPtrUp(ptr);\r\n            if (inputType !== 'touch')\r\n                return;\r\n            if (!this.isAble2Touch)\r\n                return;\r\n            this.isAble2Touch = false;\r\n            AddObstacleBlock(block);\r\n            setTimeout(() => { this.isAble2Touch = true; }, 1000);\r\n        },\r\n        ptrOut: function () { InputPtrOut(); }\r\n    };\r\n    block.addBlockData(bData);\r\n    // set shape obstacle texture\r\n    const name = block.getShapeName();\r\n    const capitalShape = name[0].toUpperCase() + name.slice(1);\r\n    const obstacleShape = 'obstacle' + capitalShape;\r\n    block.addShape({ score: 0, imgTexture: obstacleShape });\r\n    block.getShapeImg().setTexture(obstacleShape);\r\n    return block;\r\n};\r\n/* harmony default export */ const obstacle = (SetObstacle);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst CommonSize = userSetting/* View.calcRatio */.G7.calcRatio(100);\r\nconst BlockUniqueProperties = [\r\n    {\r\n        typeName: '',\r\n        spawnChance: 0,\r\n        score: 0,\r\n        iconTexture: '',\r\n        imgWidth: 0,\r\n        imgHeight: 0,\r\n        timeIncreaseChance: 0,\r\n        timeIncreaseMin: 0,\r\n        timeIncreaseMax: 0,\r\n        setFunc: (block) => { SetBlockType2InitBasic(block); return block; }\r\n    },\r\n    {\r\n        typeName: 'obstacle',\r\n        spawnChance: 0,\r\n        score: 0,\r\n        iconTexture: '',\r\n        imgWidth: 0,\r\n        imgHeight: 0,\r\n        timeIncreaseChance: 0,\r\n        timeIncreaseMin: 0,\r\n        timeIncreaseMax: 0,\r\n        setFunc: (block) => { obstacle(block); return block; }\r\n    },\r\n    {\r\n        typeName: 'ad',\r\n        // spawnChance: 1,\r\n        spawnChance: 0,\r\n        score: 90,\r\n        iconTexture: '',\r\n        imgWidth: 100,\r\n        imgHeight: 100,\r\n        timeIncreaseChance: 100,\r\n        timeIncreaseMin: 3 * 1000,\r\n        timeIncreaseMax: 5 * 1000,\r\n        setFunc: (block) => { return ad(block); }\r\n    },\r\n    {\r\n        typeName: 'power',\r\n        spawnChance: 1,\r\n        score: 60,\r\n        iconTexture: 'power',\r\n        imgWidth: 100,\r\n        imgHeight: 100,\r\n        timeIncreaseChance: 50,\r\n        timeIncreaseMin: 1 * 1000,\r\n        timeIncreaseMax: 2 * 1000,\r\n        setFunc: (block) => { return power(block); }\r\n    },\r\n    {\r\n        typeName: 'loading',\r\n        spawnChance: 1,\r\n        score: 5,\r\n        iconTexture: '',\r\n        imgWidth: 100,\r\n        imgHeight: 100,\r\n        timeIncreaseChance: 30,\r\n        timeIncreaseMin: 0.5 * 1000,\r\n        timeIncreaseMax: 1 * 1000,\r\n        setFunc: (block) => { return loading(block); }\r\n    },\r\n    {\r\n        typeName: 'touch',\r\n        spawnChance: 1,\r\n        score: 10,\r\n        iconTexture: 'touch',\r\n        imgWidth: 100,\r\n        imgHeight: 100,\r\n        timeIncreaseChance: 30,\r\n        timeIncreaseMin: 2 * 1000,\r\n        timeIncreaseMax: 4 * 1000,\r\n        setFunc: (block) => { return touch(block); }\r\n    },\r\n];\r\nconst TBlockTypeList = BlockUniqueProperties.map(ele => { if (ele.typeName !== '')\r\n    return ele.typeName; });\r\nconst SpawnMaxChance = BlockUniqueProperties.map(ele => ele.spawnChance).reduce((prevValue, currValue) => {\r\n    return prevValue + currValue;\r\n}, 0);\r\nconst Set2TypeBlock = (block, typeName) => {\r\n    let filteredType = BlockUniqueProperties.find(ele => ele.typeName === typeName);\r\n    if (filteredType) {\r\n        SetBlockType2InitBasic(block);\r\n        block.setTypeName(typeName);\r\n        block.setTypeImg(filteredType.iconTexture);\r\n        block.setTypeImgDisplaySize(filteredType.imgWidth, filteredType.imgHeight);\r\n        block.addScore(filteredType.score);\r\n        block.setTimeIncrease({\r\n            chance: filteredType.timeIncreaseChance,\r\n            value: (0,math/* GetRndInt */.dZ)(filteredType.timeIncreaseMin, filteredType.timeIncreaseMax)\r\n        });\r\n        filteredType.setFunc(block);\r\n    }\r\n    else\r\n        console.log('Set2TypeBlock: typeName is not found in the block type list');\r\n};\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/storage/index.ts\n\r\nconst GameData = Object.assign({ best: 0 }, GameAudioData);\r\n// export default TGameData;\r\n/* harmony default export */ const storage = (GameData);\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/font/index.ts\n\r\nconst font_GameFont = {\r\n    guideTxtY: userSetting/* View.h */.G7.h - 80,\r\n};\r\nconst InitFont = () => {\r\n};\r\nconst CreateFont = () => {\r\n};\r\nconst font_SetFontStyle = (txt) => {\r\n    txt.setFontStyle('bold');\r\n    txt.setFontFamily('Arial Black');\r\n    txt.setOrigin(0.5);\r\n    return txt;\r\n};\r\n/* harmony default export */ const font = (font_GameFont);\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/gage/index.ts\n\r\n\r\n\r\nconst GameGageColorList = ['blue', 'red', 'yellow'];\r\nconst GameGage = {\r\n    height: 20,\r\n    txtMargin: 30,\r\n    gages: [],\r\n    color: 'blue',\r\n};\r\nconst GetGageAssets = (color, exceptionKeys) => {\r\n    let assetList = [];\r\n    if (color) {\r\n        GameGage.color = color;\r\n        assetList = [\r\n            { key: color + 'Bg', url: CommonGage + color + 'Bg.png', type: 'image' },\r\n            { key: color + 'Btn', url: CommonGage + color + 'Btn.png', type: 'image' },\r\n            { key: color + 'HandleDown', url: CommonGage + color + 'HandleDown.png', type: 'image' },\r\n            { key: color + 'HandleUp', url: CommonGage + color + 'HandleUp.png', type: 'image' },\r\n        ];\r\n    }\r\n    else {\r\n        GameGageColorList.map((gageColor) => {\r\n            assetList.push({ key: gageColor + 'Bg', url: CommonGage + gageColor + 'Bg.png', type: 'image' }, { key: gageColor + 'Btn', url: CommonGage + gageColor + 'Btn.png', type: 'image' }, { key: gageColor + 'HandleDown', url: CommonGage + gageColor + 'HandleDown.png', type: 'image' }, { key: gageColor + 'HandleUp', url: CommonGage + gageColor + 'HandleUp.png', type: 'image' });\r\n        });\r\n    }\r\n    return GetAssetFiles(assetList, exceptionKeys);\r\n};\r\nconst InitGage = (name) => {\r\n    const gageLayer = GameGage.gages.find(gage => gage.name === name);\r\n    if (gageLayer) {\r\n        // namedGage\r\n    }\r\n};\r\nconst gage_CreateGageBar = (scene, x, y, endMoveCallback, data) => {\r\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p, _q, _r;\r\n    const layer = scene.add.layer();\r\n    // setting parameter init data\r\n    layer.x = x;\r\n    layer.y = y;\r\n    layer.gageNumMin = (_a = data === null || data === void 0 ? void 0 : data.numMin) !== null && _a !== void 0 ? _a : 0;\r\n    layer.gageNumMax = (_b = data === null || data === void 0 ? void 0 : data.numMin) !== null && _b !== void 0 ? _b : 100;\r\n    layer.gageNum = (layer.gageNumMin + layer.gageNumMax) / 2;\r\n    layer.isAble = (_c = data === null || data === void 0 ? void 0 : data.isAble) !== null && _c !== void 0 ? _c : true;\r\n    const color = (_d = data === null || data === void 0 ? void 0 : data.color) !== null && _d !== void 0 ? _d : GameGage.color;\r\n    const w = (_e = data === null || data === void 0 ? void 0 : data.width) !== null && _e !== void 0 ? _e : userSetting/* View.centerX */.G7.centerX;\r\n    const h = (_f = data === null || data === void 0 ? void 0 : data.height) !== null && _f !== void 0 ? _f : GameGage.height;\r\n    const bgTexture = (_g = data === null || data === void 0 ? void 0 : data.bgTxture) !== null && _g !== void 0 ? _g : color + 'Bg';\r\n    const btnTexture = (_h = data === null || data === void 0 ? void 0 : data.btnTexture) !== null && _h !== void 0 ? _h : color + 'Btn';\r\n    const handleUpTexture = (_k = (_j = data === null || data === void 0 ? void 0 : data.handle) === null || _j === void 0 ? void 0 : _j.upTexture) !== null && _k !== void 0 ? _k : color + 'HandleUp';\r\n    const handleDownTexture = (_m = (_l = data === null || data === void 0 ? void 0 : data.handle) === null || _l === void 0 ? void 0 : _l.upTexture) !== null && _m !== void 0 ? _m : color + 'HandleDown';\r\n    const txtX = (_p = (_o = data === null || data === void 0 ? void 0 : data.txt) === null || _o === void 0 ? void 0 : _o.x) !== null && _p !== void 0 ? _p : userSetting/* View.centerX */.G7.centerX / 2 + GameGage.txtMargin;\r\n    const txtY = (_r = (_q = data === null || data === void 0 ? void 0 : data.txt) === null || _q === void 0 ? void 0 : _q.y) !== null && _r !== void 0 ? _r : 0;\r\n    const gageBg = scene.add.image(0, 0, bgTexture);\r\n    gageBg.setDisplaySize(w, h);\r\n    const gageBar = scene.add.image(0, 0, btnTexture);\r\n    gageBar.setDisplaySize(userSetting/* View.centerX */.G7.centerX / 2, GameGage.height);\r\n    gageBar.setOrigin(0, 0.5);\r\n    gageBar.setPosition(-userSetting/* View.centerX */.G7.centerX / 2, 0);\r\n    const gageBarHandle = scene.add.image(0, 0, handleUpTexture);\r\n    const gageTxt = scene.add.text(0, -GameGage.height, layer.gageNum.toString());\r\n    gageTxt.setPosition(txtX, txtY);\r\n    font_SetFontStyle(gageTxt);\r\n    layer.gagePosX = 0; // default middle value\r\n    layer.gagePosXMin = -gageBg.width / 2 + gageBarHandle.width / 2;\r\n    layer.gagePosXMax = gageBg.width / 2;\r\n    layer.gagePosXLength = gageBg.width - gageBarHandle.width / 2;\r\n    layer.setGageHandleFrame = (isDown) => {\r\n        gageBarHandle.setTexture(isDown ? handleDownTexture : handleUpTexture);\r\n    };\r\n    layer.setGageBarSize = (gagePos) => {\r\n        let gagePosX = gagePos - layer.x;\r\n        if (gagePosX <= layer.gagePosXMin)\r\n            gagePosX = layer.gagePosXMin;\r\n        else if (gagePosX >= layer.gagePosXMax)\r\n            gagePosX = layer.gagePosXMax;\r\n        layer.gagePosX = gagePosX;\r\n        layer.gageNum = Math.floor((layer.gageNumMax - layer.gageNumMin) * Math.abs(gagePosX - layer.gagePosXMin) / layer.gagePosXLength);\r\n        layer.updateGage();\r\n    };\r\n    layer.setGageNum = (gageNum) => {\r\n        let gageNumber = gageNum;\r\n        if (gageNumber < layer.gageNumMin)\r\n            gageNumber = layer.gageNumMin;\r\n        else if (gageNumber > layer.gageNumMax)\r\n            gageNumber = layer.gageNumMax;\r\n        layer.gageNum = gageNumber;\r\n        layer.gagePosX = layer.gagePosXMin + (layer.gageNum / (layer.gageNumMax - layer.gageNumMin) * layer.gagePosXLength);\r\n        layer.updateGage();\r\n    };\r\n    layer.updateGage = () => {\r\n        gageBar.setDisplaySize(layer.gagePosX + gageBar.width / 2, GameGage.height);\r\n        gageBarHandle.x = layer.gagePosX + gageBar.width - gageBarHandle.width / 2;\r\n        gageTxt.setText(layer.gageNum.toFixed(0));\r\n    };\r\n    layer.setAble = (isAble) => {\r\n        layer.isAble = isAble;\r\n        layer.isAble ? layer.setAlpha(1) : layer.setAlpha(0.5);\r\n        return layer.isAble;\r\n    };\r\n    const dragStart = () => {\r\n        layer.isAble && layer.setGageHandleFrame(true);\r\n    };\r\n    const dragging = (dragX) => {\r\n        layer.isAble && layer.setGageBarSize(dragX);\r\n    };\r\n    const dragEnd = () => {\r\n        if (layer.isAble) {\r\n            layer.setGageHandleFrame(false);\r\n            endMoveCallback && endMoveCallback(layer.gageNumMin, layer.gageNumMax, layer.gageNum);\r\n        }\r\n    };\r\n    [gageBg, gageBar].map((bar) => {\r\n        bar.setInteractive({ draggable: true });\r\n        bar.on('dragstart', (ptr) => {\r\n            dragStart();\r\n            dragging(ptr.x);\r\n        });\r\n        bar.on('drag', (ptr, dragX) => { dragging(ptr.x); });\r\n        bar.on('dragend', (ptr) => { dragEnd(); });\r\n    });\r\n    gageBarHandle.setInteractive({ draggable: true });\r\n    gageBarHandle.on('dragstart', () => { dragStart(); });\r\n    gageBarHandle.on('drag', (ptr, dragX) => { dragging(dragX); });\r\n    gageBarHandle.on('dragend', () => { dragEnd(); });\r\n    layer.setAble(layer.isAble);\r\n    [gageBg, gageBar, gageBarHandle, gageTxt].map((child) => {\r\n        child.setPosition(child.x + x, child.y + y);\r\n        layer.add(child);\r\n    });\r\n    GameGage.gages.push(layer);\r\n    InitGage(layer.name);\r\n    return layer;\r\n};\r\n/* harmony default export */ const gage = ((/* unused pure expression or super */ null && (GameGage)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/gesture/index.ts\nconst GameGesture = {\r\n    type: '',\r\n    typeHistory: [],\r\n    initPos: { x: 0, y: 0 },\r\n    isHoldingDown: false,\r\n    holdDuration: 0,\r\n    holdMaxDuration: 1000,\r\n    comfyGapTouchValue: 15,\r\n    startHold: () => { GameGesture.isHoldingDown = true; return GameGesture; },\r\n    resetHold: () => {\r\n        GameGesture.isHoldingDown = false;\r\n        GameGesture.initPos = { x: 0, y: 0 };\r\n        GameGesture.holdDuration = 0;\r\n        GameGesture.setType('');\r\n        return GameGesture;\r\n    },\r\n    setHoldDuration: function (duration) { GameGesture.holdDuration = duration; return GameGesture; },\r\n    setInitPos: function (x, y) { GameGesture.initPos = { x: x, y: y }; return GameGesture; },\r\n    chckIsHold: () => {\r\n        if (GameGesture.holdDuration >= GameGesture.holdMaxDuration)\r\n            return true;\r\n        else\r\n            return false;\r\n    },\r\n    getType: () => { return GameGesture.type; },\r\n    setType: function (type) { GameGesture.type = type; return GameGesture; },\r\n    initTypeHistory: () => { GameGesture.typeHistory = []; },\r\n    getTypeHistory: () => { return GameGesture.typeHistory; },\r\n    getLastestInputType: () => { return GameGesture.typeHistory[GameGesture.typeHistory.length - 1]; },\r\n    push2TypeHistory: function (gestureEle) {\r\n        GameGesture.typeHistory.push(gestureEle);\r\n        return GameGesture.typeHistory;\r\n    },\r\n};\r\nconst InitGameGesture = () => {\r\n    GameGesture.resetHold();\r\n    GameGesture.initTypeHistory();\r\n};\r\nconst CreateGameGesture = (scene) => {\r\n    scene.input.off('pointerdown', PtrDownGameGesture);\r\n    scene.input.on('pointerdown', PtrDownGameGesture);\r\n    scene.input.off('pointermove', PtrMoveGameGesture);\r\n    scene.input.on('pointermove', PtrMoveGameGesture);\r\n    scene.input.off('pointerup', PtrUpGameGesture);\r\n    scene.input.on('pointerup', PtrUpGameGesture);\r\n    InitGameGesture();\r\n    return GameGesture;\r\n};\r\nconst UpdateGameGesture = (delta) => {\r\n    if (GameGesture.isHoldingDown)\r\n        GameGesture.setHoldDuration(GameGesture.holdDuration + delta);\r\n};\r\nconst PtrDownGameGesture = (ptr) => {\r\n    GameGesture.setInitPos(ptr.x, ptr.y);\r\n    GameGesture.startHold();\r\n};\r\nconst PtrMoveGameGesture = (ptr) => {\r\n    if (!ptr.isDown)\r\n        return;\r\n    if (!gesture_ChckSwipeDirection(GameGesture.initPos, ptr)) {\r\n        ChckHoldOrTouch();\r\n    }\r\n    // const gestureEle = {\r\n    //     type: GameGesture.getType(),\r\n    //     initPos: GameGesture.initPos,\r\n    //     lastPos: { x: ptr.x, y: ptr.y }\r\n    // };\r\n};\r\nconst PtrUpGameGesture = (ptr) => {\r\n    return SetGameGestureType(GameGesture.initPos, ptr);\r\n};\r\nconst PtrOutGameGesture = () => {\r\n    GameGesture.resetHold();\r\n};\r\nconst gesture_ChckSwipeDirection = (initPos, ptr) => {\r\n    const chckPosX = Math.abs(initPos.x - ptr.x) > GameGesture.comfyGapTouchValue;\r\n    const chckPosY = Math.abs(initPos.y - ptr.y) > GameGesture.comfyGapTouchValue;\r\n    if (chckPosX || chckPosY) {\r\n        const x = ptr.x - initPos.x;\r\n        const y = ptr.y - initPos.y;\r\n        if (Math.abs(x) > Math.abs(y)) {\r\n            if (x > 0)\r\n                GameGesture.setType('swipeRight');\r\n            else\r\n                GameGesture.setType('swipeLeft');\r\n        }\r\n        else {\r\n            if (y < 0)\r\n                GameGesture.setType('swipeUp');\r\n            else\r\n                GameGesture.setType('swipeDown');\r\n        }\r\n        return true;\r\n    }\r\n    else\r\n        return false;\r\n};\r\nconst ChckHoldOrTouch = () => {\r\n    if (GameGesture.chckIsHold()) {\r\n        GameGesture.setType('hold');\r\n        return true;\r\n    }\r\n    else {\r\n        GameGesture.setType('touch');\r\n        return false;\r\n    }\r\n};\r\n// set comfy touch to not judge as swipe when use with actual finger\r\nconst SetGameGestureType = (initPos, ptr) => {\r\n    // swipe motion\r\n    if (!gesture_ChckSwipeDirection(initPos, ptr)) {\r\n        // hold or touch\r\n        ChckHoldOrTouch();\r\n    }\r\n    const gestureEle = {\r\n        type: GameGesture.getType(),\r\n        initPos: initPos,\r\n        lastPos: { x: ptr.x, y: ptr.y }\r\n    };\r\n    GameGesture.push2TypeHistory(gestureEle);\r\n    GameGesture.resetHold();\r\n    return GameGesture.getLastestInputType();\r\n};\r\n/* harmony default export */ const gesture = (GameGesture);\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/input/index.ts\nconst GameInput = {\r\n    down: [],\r\n    move: [],\r\n    up: [],\r\n    add: (cmd, evt) => {\r\n        GameInput[cmd].push(evt);\r\n        return GameInput;\r\n    },\r\n};\r\nconst InitGameInput = () => {\r\n};\r\nconst CreateGameInput = (scene) => {\r\n    const inputDownEvt = (ptr, currentlyOver) => {\r\n        GameInput.down && GameInput.down.map(downEvt => downEvt(ptr, currentlyOver));\r\n    };\r\n    scene.input.off('pointerdown', inputDownEvt);\r\n    scene.input.on('pointerdown', inputDownEvt);\r\n    const inputMoveEvt = (ptr, currentlyOver) => {\r\n        GameInput.move && GameInput.move.map(moveEvt => moveEvt(ptr, currentlyOver));\r\n    };\r\n    scene.input.off('pointermove', inputMoveEvt);\r\n    scene.input.on('pointermove', inputMoveEvt);\r\n    const inputUpEvt = (ptr, currentlyOver) => {\r\n        GameInput.up && GameInput.up.map(upEvt => upEvt(ptr, currentlyOver));\r\n    };\r\n    scene.input.off('pointerup', inputUpEvt);\r\n    scene.input.on('pointerup', inputUpEvt);\r\n    InitGameInput();\r\n    return GameInput;\r\n};\r\n/* harmony default export */ const scenes_input = (GameInput);\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/depth/index.ts\nconst GameDepth = {\r\n    list: {\r\n        default: 0,\r\n        highest: 9999,\r\n    },\r\n    add: (key, depth) => {\r\n        if (depth < GameDepth.list.default) {\r\n            console.warn(`adding depth ${key} key has a lower depth value(${depth}) than default`);\r\n            return;\r\n        }\r\n        if (depth > GameDepth.list.highest) {\r\n            console.warn(`adding depth ${key} key has a larger depth value(${depth}) than default`);\r\n            return;\r\n        }\r\n        GameDepth[key] = depth;\r\n        return GameDepth;\r\n    },\r\n};\r\nconst scenes_depth_SetDepth = (targetObj, type, addDepthValue) => {\r\n    if (!GameDepth.list[type]) {\r\n        console.warn('SetDepth: type is not found in the depth list:', targetObj, type);\r\n        console.log('targetObj, type: ', targetObj, type);\r\n        return;\r\n    }\r\n    const extraDetph = addDepthValue !== null && addDepthValue !== void 0 ? addDepthValue : 0;\r\n    // console.log('extraDetph: ', extraDetph, GameDepth.list, GameDepth.list[type], GameDepth.list[type] as number + extraDetph);\r\n    if (targetObj.setDepth)\r\n        targetObj.setDepth(GameDepth.list[type] + extraDetph);\r\n    else\r\n        console.warn('SetDepth: targetObj is not Phaser.GameObjects');\r\n};\r\n/* harmony default export */ const scenes_depth = ((/* unused pure expression or super */ null && (GameDepth)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/popUp/exit.ts\n\r\n\r\n\r\nconst CreateBasicPopUpExitType = (scene, popLayerBg, popUpLayer, btn, pop, option) => {\r\n    var _a, _b, _c, _d;\r\n    const exitIsExist = (_b = (_a = pop === null || pop === void 0 ? void 0 : pop.exitBtn) === null || _a === void 0 ? void 0 : _a.isExist) !== null && _b !== void 0 ? _b : false;\r\n    const exitType = (_d = (_c = pop === null || pop === void 0 ? void 0 : pop.exitBtn) === null || _c === void 0 ? void 0 : _c.type) !== null && _d !== void 0 ? _d : 'anywhere';\r\n    const popLayerList = [];\r\n    // exit btn & bg option setting\r\n    if (exitIsExist) {\r\n        switch (exitType) {\r\n            case 'anywhere':\r\n                popLayerList.push(...CreateExitAnywhere(scene, popLayerBg, popUpLayer, pop));\r\n                break;\r\n            case 'btn':\r\n                popLayerList.push(...CreateExitBtn(scene, popUpLayer, pop));\r\n                break;\r\n            case 'yesOrNo':\r\n                popLayerList.push(...CreateExitYesOrNo(scene, popUpLayer, pop));\r\n                break;\r\n        }\r\n    }\r\n    else\r\n        popLayerList.push(...CreateExitAnywhere(scene, popLayerBg, popUpLayer, pop));\r\n    return popLayerList;\r\n};\r\nconst CreateExitBtn = (scene, popUpLayer, pop) => {\r\n    var _a, _b, _c, _d;\r\n    const exitBtnX = (_b = (_a = pop === null || pop === void 0 ? void 0 : pop.exitBtn) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : userSetting/* View.centerX */.G7.centerX;\r\n    const exitBtnY = (_d = (_c = pop === null || pop === void 0 ? void 0 : pop.exitBtn) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : ui.exitPosY;\r\n    const exitBgBtnHeight = (userSetting/* View.h */.G7.h - exitBtnY) * 2;\r\n    const popLayerList = [];\r\n    const exitBtnBg = scene.add.image(exitBtnX, exitBtnY, 'whiteScreen');\r\n    const exitBtn = scene.add.image(exitBtnX, exitBtnY, 'exitBtn');\r\n    const exitPtrDown = (btn) => {\r\n        btn.downEvt();\r\n        exitBtnBg.setAlpha(0.3);\r\n        exitBtn.setAlpha(1);\r\n    };\r\n    const exitPtrUp = (btn) => {\r\n        btn.upEvt();\r\n        exitBtnBg.setAlpha(0.1);\r\n        exitBtn.setAlpha(ui.alpha);\r\n        popUpLayer.hide();\r\n    };\r\n    const exitPtrOut = (btn) => {\r\n        btn.upEvt();\r\n        exitBtnBg.setAlpha(0.1);\r\n        exitBtn.setAlpha(ui.alpha);\r\n    };\r\n    SetCommonUIProps(exitBtnBg);\r\n    CreateUIBtnAnim(scene, exitBtnBg);\r\n    exitBtnBg.setAlpha(0.1);\r\n    exitBtnBg.setInteractive();\r\n    exitBtnBg.on('pointerdown', () => { exitPtrDown(exitBtn); });\r\n    exitBtnBg.on('pointerup', () => { exitPtrUp(exitBtn); });\r\n    exitBtnBg.on('pointerout', () => { exitPtrOut(exitBtn); });\r\n    exitBtnBg.setDisplaySize(userSetting/* View.w */.G7.w, exitBgBtnHeight);\r\n    popLayerList.push(exitBtnBg);\r\n    SetCommonUIProps(exitBtn);\r\n    CreateUIBtnAnim(scene, exitBtn);\r\n    exitBtn.setInteractive();\r\n    exitBtn.on('pointerdown', () => { exitPtrDown(exitBtnBg); });\r\n    exitBtn.on('pointerup', () => { exitPtrUp(exitBtnBg); });\r\n    exitBtn.on('pointerout', () => { exitPtrOut(exitBtnBg); });\r\n    popLayerList.push(exitBtn);\r\n    return popLayerList;\r\n};\r\nconst CreateExitAnywhere = (scene, popLayerBg, popUpLayer, pop) => {\r\n    var _a, _b, _c, _d;\r\n    const popLayerList = [];\r\n    const guideTxtX = (_b = (_a = pop === null || pop === void 0 ? void 0 : pop.guideTxt) === null || _a === void 0 ? void 0 : _a.x) !== null && _b !== void 0 ? _b : userSetting/* View.centerX */.G7.centerX;\r\n    const guideTxtY = (_d = (_c = pop === null || pop === void 0 ? void 0 : pop.guideTxt) === null || _c === void 0 ? void 0 : _c.y) !== null && _d !== void 0 ? _d : font.guideTxtY;\r\n    popLayerBg.on('pointerup', (ptr) => {\r\n        var _a, _b;\r\n        popUpLayer.hide();\r\n        ((_a = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _a === void 0 ? void 0 : _a.up) && ((_b = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _b === void 0 ? void 0 : _b.up(ptr));\r\n    });\r\n    const popGuideTxt = scene.add.text(guideTxtX, guideTxtY, 'press anywhere to exit');\r\n    popGuideTxt.setAlpha(ui.alpha);\r\n    font_SetFontStyle(popGuideTxt);\r\n    popLayerList.push(popGuideTxt);\r\n    return popLayerList;\r\n};\r\nconst CreateExitYesOrNo = (scene, popUpLayer, pop) => {\r\n    var _a, _b;\r\n    const exitBtnY = (_b = (_a = pop === null || pop === void 0 ? void 0 : pop.exitBtn) === null || _a === void 0 ? void 0 : _a.y) !== null && _b !== void 0 ? _b : ui.exitPosY;\r\n    const bgAlphaDown = 0.5;\r\n    const bgAlphaUp = 0.1;\r\n    const txtAlphaDown = 1;\r\n    const txtAlphaUp = 0.8;\r\n    const exitBgBtnHeight = (userSetting/* View.h */.G7.h - exitBtnY) * 2;\r\n    const popLayerList = [];\r\n    const leftNoBg = scene.add.image(userSetting/* View.w */.G7.w / 4, exitBtnY, 'whiteScreen');\r\n    const leftNoTxt = scene.add.text(leftNoBg.x, leftNoBg.y, 'No');\r\n    const leftPtrDown = (imgOrTxt) => {\r\n        imgOrTxt.downEvt();\r\n        leftNoBg.setAlpha(bgAlphaDown);\r\n        leftNoTxt.setAlpha(txtAlphaDown);\r\n    };\r\n    const leftPtrUp = (imgOrTxt) => {\r\n        imgOrTxt.upEvt();\r\n        leftPtrOut();\r\n        popUpLayer.hide();\r\n    };\r\n    const leftPtrOut = () => {\r\n        leftNoBg.setAlpha(bgAlphaUp);\r\n        leftNoTxt.setAlpha(txtAlphaUp);\r\n    };\r\n    SetCommonUIProps(leftNoBg);\r\n    CreateUIBtnAnim(scene, leftNoBg);\r\n    leftNoBg.setAlpha(bgAlphaUp);\r\n    leftNoBg.setDisplaySize(userSetting/* View.centerX */.G7.centerX, exitBgBtnHeight);\r\n    leftNoBg.on('pointerdown', () => { leftPtrDown(leftNoTxt); });\r\n    leftNoBg.on('pointerup', () => { leftPtrUp(leftNoTxt); });\r\n    leftNoBg.on('pointerout', () => { leftPtrOut(); });\r\n    CreateUIBtnAnim(scene, leftNoTxt);\r\n    font_SetFontStyle(leftNoTxt);\r\n    leftNoTxt.setAlpha(txtAlphaUp);\r\n    leftNoTxt.setFontSize(userSetting/* View.w */.G7.w / 14);\r\n    leftNoTxt.on('pointerdown', () => { leftPtrDown(leftNoBg); });\r\n    leftNoTxt.on('pointerup', () => { leftPtrUp(leftNoBg); });\r\n    leftNoTxt.on('pointerout', () => { leftPtrOut(); });\r\n    popLayerList.push(leftNoBg, leftNoTxt);\r\n    const rightNoBg = scene.add.image(userSetting/* View.w */.G7.w * 3 / 4, exitBtnY, 'whiteScreen');\r\n    const rightNoTxt = scene.add.text(rightNoBg.x, rightNoBg.y, 'Yes');\r\n    const rightPtrDown = (imgOrTxt) => {\r\n        imgOrTxt.downEvt();\r\n        rightNoBg.setAlpha(bgAlphaDown);\r\n        rightNoTxt.setAlpha(txtAlphaDown);\r\n    };\r\n    const rightPtrUp = (imgOrTxt, ptr) => {\r\n        var _a;\r\n        imgOrTxt.upEvt();\r\n        rightPtrOut();\r\n        ((_a = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _a === void 0 ? void 0 : _a.up) && pop.evt.up(ptr);\r\n        popUpLayer.hide();\r\n    };\r\n    const rightPtrOut = () => {\r\n        rightNoBg.setAlpha(bgAlphaUp);\r\n        rightNoTxt.setAlpha(txtAlphaUp);\r\n    };\r\n    SetCommonUIProps(rightNoBg);\r\n    CreateUIBtnAnim(scene, rightNoBg);\r\n    rightNoBg.setAlpha(bgAlphaUp);\r\n    rightNoBg.setDisplaySize(userSetting/* View.centerX */.G7.centerX, exitBgBtnHeight);\r\n    rightNoBg.on('pointerdown', () => { rightPtrDown(rightNoTxt); });\r\n    rightNoBg.on('pointerup', (ptr) => { rightPtrUp(rightNoTxt, ptr); });\r\n    rightNoBg.on('pointerout', () => { rightPtrOut(); });\r\n    CreateUIBtnAnim(scene, rightNoTxt);\r\n    font_SetFontStyle(rightNoTxt);\r\n    rightNoTxt.setAlpha(txtAlphaUp);\r\n    rightNoTxt.setFontSize(userSetting/* View.w */.G7.w / 14);\r\n    rightNoTxt.on('pointerdown', () => { rightPtrDown(rightNoBg); });\r\n    rightNoTxt.on('pointerup', (ptr) => { rightPtrUp(rightNoBg, ptr); });\r\n    rightNoTxt.on('pointerout', () => { rightPtrOut(); });\r\n    popLayerList.push(rightNoBg, rightNoTxt);\r\n    return popLayerList;\r\n};\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/popUp/index.ts\n\r\n\r\n\r\n\r\n\r\nconst GamePopUp = {\r\n    commonLayer: null,\r\n    list: [],\r\n    popAlpha: 0.6,\r\n    defaultOpt: {\r\n        cmdKey: 'Escape',\r\n    },\r\n    option: {},\r\n};\r\nconst GetPopUpAssets = (exceptionKeys) => {\r\n    let assetList = [\r\n        { key: 'whiteScreen', url: CommonUI + 'whiteScreen.png', type: 'image' },\r\n        { key: 'blackScreen', url: CommonUI + 'blackScreen.png', type: 'image' },\r\n        { key: 'exitBtn', url: CommonUI + 'exitBtn.png', type: 'image' },\r\n        { key: 'doorExitBtn', url: CommonUI + 'doorExitBtn.png', type: 'image' },\r\n    ];\r\n    return GetAssetFiles(assetList, exceptionKeys);\r\n};\r\nconst InitPopUp = (popUpLayer) => {\r\n    popUpLayer.hide();\r\n};\r\nconst CreateBasicPopUp = (scene, name, btn, pop, option) => {\r\n    var _a, _b, _c, _d;\r\n    // btn layer setting\r\n    const isBgBlack = (_a = pop === null || pop === void 0 ? void 0 : pop.isBgBlack) !== null && _a !== void 0 ? _a : true;\r\n    const btnX = (_b = btn === null || btn === void 0 ? void 0 : btn.x) !== null && _b !== void 0 ? _b : userSetting/* View.centerX */.G7.centerX;\r\n    const btnY = (_c = btn === null || btn === void 0 ? void 0 : btn.y) !== null && _c !== void 0 ? _c : userSetting/* View.centerY */.G7.centerY;\r\n    const isBtnExist = (_d = btn === null || btn === void 0 ? void 0 : btn.isExist) !== null && _d !== void 0 ? _d : false;\r\n    GamePopUp.option = Object.assign(Object.assign({}, GamePopUp.defaultOpt), option);\r\n    // const { cmdKey } = GamePopUp.option;\r\n    let btnLayer;\r\n    if (isBtnExist) {\r\n        btnLayer = scene.add.layer();\r\n        btnLayer.name = name;\r\n        (btn === null || btn === void 0 ? void 0 : btn.depth) && btnLayer.setDepth(btn.depth);\r\n        if (btn === null || btn === void 0 ? void 0 : btn.list) {\r\n            btn.list.map((btnChild) => {\r\n                btnChild.setPosition(btnX, btnY);\r\n                btnLayer.add(btnChild);\r\n            });\r\n        }\r\n        else {\r\n            const defaultBtn = scene.add.text(btnX, btnY, name);\r\n            defaultBtn.setOrigin(0.5);\r\n            defaultBtn.setFontStyle('bold');\r\n            defaultBtn.setFontFamily('Arial Black');\r\n            btnLayer.add(defaultBtn);\r\n        }\r\n        btnLayer.getChildren().map((child) => {\r\n            child.setInteractive();\r\n            child.on('pointerdown', (ptr) => {\r\n                var _a, _b;\r\n                ((_a = btn === null || btn === void 0 ? void 0 : btn.evt) === null || _a === void 0 ? void 0 : _a.down) && ((_b = btn === null || btn === void 0 ? void 0 : btn.evt) === null || _b === void 0 ? void 0 : _b.down(ptr));\r\n            });\r\n            child.on('pointerup', (ptr) => {\r\n                var _a, _b;\r\n                popUpLayer.show();\r\n                ((_a = btn === null || btn === void 0 ? void 0 : btn.evt) === null || _a === void 0 ? void 0 : _a.up) && ((_b = btn === null || btn === void 0 ? void 0 : btn.evt) === null || _b === void 0 ? void 0 : _b.up(ptr));\r\n            });\r\n            child.on('pointerout', (ptr) => {\r\n                var _a, _b;\r\n                ((_a = btn === null || btn === void 0 ? void 0 : btn.evt) === null || _a === void 0 ? void 0 : _a.out) && ((_b = btn === null || btn === void 0 ? void 0 : btn.evt) === null || _b === void 0 ? void 0 : _b.out(ptr));\r\n            });\r\n        });\r\n    }\r\n    // pop layer setting\r\n    const popLayer = scene.add.layer();\r\n    const popLayerList = [];\r\n    popLayer.name = name;\r\n    (pop === null || pop === void 0 ? void 0 : pop.depth) && popLayer.setDepth(pop.depth);\r\n    const popLayerBg = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, isBgBlack ? 'blackScreen' : 'whiteScreen');\r\n    popLayerBg.setAlpha(GamePopUp.popAlpha);\r\n    popLayerBg.setDisplaySize(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n    popLayerBg.setInteractive();\r\n    popLayerBg.on('pointerdown', (ptr) => { var _a, _b; ((_a = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _a === void 0 ? void 0 : _a.down) && ((_b = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _b === void 0 ? void 0 : _b.down(ptr)); });\r\n    popLayerBg.on('pointermove', (ptr) => { var _a, _b; ((_a = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _a === void 0 ? void 0 : _a.move) && ((_b = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _b === void 0 ? void 0 : _b.move(ptr)); });\r\n    popLayerList.push(popLayerBg);\r\n    const popUpLayer = {\r\n        name: name,\r\n        isOpen: false,\r\n        btn: btnLayer,\r\n        pop: popLayer,\r\n        add: (child) => {\r\n            popLayer.add(child);\r\n        },\r\n        show: () => {\r\n            var _a, _b;\r\n            popUpLayer.isOpen = true;\r\n            popUpLayer.pop.setVisible(true);\r\n            ((_a = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _a === void 0 ? void 0 : _a.show) && ((_b = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _b === void 0 ? void 0 : _b.show());\r\n        },\r\n        hide: () => {\r\n            var _a, _b;\r\n            popUpLayer.isOpen = false;\r\n            const isAllPopLayerClosed = GamePopUp.list.filter(popUpLayer => popUpLayer.isOpen === true).length === 0;\r\n            isAllPopLayerClosed && popUpLayer.pop.setVisible(false);\r\n            ((_a = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _a === void 0 ? void 0 : _a.hide) && ((_b = pop === null || pop === void 0 ? void 0 : pop.evt) === null || _b === void 0 ? void 0 : _b.hide());\r\n        }\r\n    };\r\n    if (pop === null || pop === void 0 ? void 0 : pop.exitBtn) {\r\n        popLayerList.push(...CreateBasicPopUpExitType(scene, popLayerBg, popUpLayer, btn, pop, option));\r\n    }\r\n    // add child to popup layer\r\n    popLayerList.map(popChild => popLayer.add(popChild));\r\n    (pop === null || pop === void 0 ? void 0 : pop.list) && pop.list.map(popChild => popLayer.add(popChild));\r\n    scenes_depth_SetDepth(popLayer, 'highest');\r\n    // chck nested pop up layer\r\n    let nestedPopUpLayer = GamePopUp.list.find(popUp => popUp.name === name);\r\n    if (nestedPopUpLayer) {\r\n        // console.warn(`pop up name nested: ${name} // so lay over it`);\r\n        nestedPopUpLayer = popUpLayer;\r\n    }\r\n    else\r\n        GamePopUp.list.push(popUpLayer);\r\n    InitPopUp(popUpLayer);\r\n    return popUpLayer;\r\n};\r\n/* harmony default export */ const popUp = ((/* unused pure expression or super */ null && (GamePopUp)));\r\n\r\n\n// EXTERNAL MODULE: ./src/window/index.ts\nvar src_window = __webpack_require__(626);\n;// CONCATENATED MODULE: ./src/scenes/ui/audio/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GameAudioUI = {\r\n    btn: null,\r\n    context: [],\r\n    pop: null,\r\n    holdDuration: 1000,\r\n    eleGapValue: 100,\r\n    toggleMute: () => {\r\n        audio.setAllMute(!audio.isAllMute);\r\n        GameAudioUI.btn.setTexture(audio.isAllMute ? 'sfxOff' : 'sfxOn');\r\n    },\r\n    show: () => {\r\n        GameAudioUI.context && GameAudioUI.context.map((contextChild) => {\r\n            contextChild.setVisible && contextChild.setVisible(true);\r\n        });\r\n    },\r\n    hide: () => {\r\n        GameAudioUI.context && GameAudioUI.context.map((contextChild) => {\r\n            contextChild.setVisible && contextChild.setVisible(false);\r\n        });\r\n    },\r\n    defaultOpt: {\r\n        cmdKey: 'm'\r\n    },\r\n    option: {},\r\n};\r\nconst GetGameAudioUIAssets = (exceptionKeys) => {\r\n    const audioUIAssets = [\r\n        { key: 'sfxOff', url: CommonAudio + 'sfxOff.png', type: 'image' },\r\n        { key: 'sfxOn', url: CommonAudio + 'sfxOn.png', type: 'image' },\r\n        { key: 'bgmOff', url: CommonAudio + 'bgmOff.png', type: 'image' },\r\n        { key: 'bgmOn', url: CommonAudio + 'bgmOn.png', type: 'image' },\r\n    ];\r\n    return GetAssetFiles(audioUIAssets, exceptionKeys);\r\n};\r\nconst InitGameAudioUI = () => {\r\n    GameAudioUI.btn.setTexture(audio.isAllMute ? 'sfxOff' : 'sfxOn');\r\n    GameAudioUI.hide();\r\n};\r\nconst CreateGameAudioUI = (scene, option) => {\r\n    GameAudioUI.option = Object.assign(Object.assign(Object.assign({}, GameAudioUI.defaultOpt), { x: ui.margin * 4.5 * ui.scale, y: ui.margin }), option);\r\n    const { x, y, cmdKey } = GameAudioUI.option;\r\n    // btn (simple touch means toggling mute or 0.5 volume)\r\n    GameAudioUI.btn = scene.add.image(x, y, audio.isAllMute ? 'sfxOff' : 'sfxOn');\r\n    SetCommonUIProps(GameAudioUI.btn);\r\n    CreateUIBtnAnim(scene, GameAudioUI.btn);\r\n    GameAudioUI.btn.on('pointerdown', (ptr) => {\r\n        scene.tweens.addCounter({\r\n            duration: GameAudioUI.holdDuration,\r\n            onUpdate: (tw) => {\r\n                if (!ptr.isDown) {\r\n                    tw.remove();\r\n                    return;\r\n                }\r\n            },\r\n            onComplete: () => { GameAudioUI.pop.show(); },\r\n        });\r\n    });\r\n    GameAudioUI.btn.on('pointerup', () => {\r\n        if (GameAudioUI.pop.isOpen)\r\n            return;\r\n        GameAudioUI.toggleMute();\r\n    });\r\n    // context gage (all, sfx, bgm icon & gage)\r\n    const allIcon = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, audio.isAllMute ? 'Mute All' : 'All');\r\n    const sfxIcon = scene.add.image(userSetting/* View.centerX */.G7.centerX, allIcon.y + GameAudioUI.eleGapValue, audio.isSfxMute ? 'sfxOff' : 'sfxOn');\r\n    SetCommonUIProps(sfxIcon);\r\n    CreateUIBtnAnim(scene, sfxIcon);\r\n    const sfxGage = gage_CreateGageBar(scene, sfxIcon.x, sfxIcon.y + sfxIcon.height / 1.5, (min, max, curr) => {\r\n        audio.setSfxVolume(curr / 100);\r\n    }, { color: 'blue' });\r\n    sfxGage.setGageNum(audio.bgmVolume * 100);\r\n    sfxGage.setAble(!audio.isSfxMute);\r\n    sfxIcon.on('pointerup', () => {\r\n        const isOn = sfxIcon.texture.key === 'sfxOn';\r\n        sfxGage.setAble(!isOn);\r\n        sfxIcon.setTexture(isOn ? 'sfxOff' : 'sfxOn');\r\n        audio.setSfxMute(isOn);\r\n    });\r\n    const bgmIcon = scene.add.image(sfxIcon.x, sfxIcon.y + GameAudioUI.eleGapValue, audio.isBgmMute ? 'bgmOff' : 'bgmOn');\r\n    SetCommonUIProps(bgmIcon);\r\n    CreateUIBtnAnim(scene, bgmIcon);\r\n    const bgmGage = gage_CreateGageBar(scene, bgmIcon.x, bgmIcon.y + bgmIcon.height / 1.5, (min, max, curr) => {\r\n        audio.setBgmVolume(curr / 100);\r\n    }, { color: 'blue' });\r\n    bgmGage.setGageNum(audio.bgmVolume * 100);\r\n    bgmGage.setAble(!audio.isBgmMute);\r\n    bgmIcon.on('pointerup', () => {\r\n        const isOn = bgmIcon.texture.key === 'bgmOn';\r\n        bgmGage.setAble(!isOn);\r\n        bgmIcon.setTexture(isOn ? 'bgmOff' : 'bgmOn');\r\n        audio.setBgmMute(isOn);\r\n    });\r\n    font_SetFontStyle(allIcon);\r\n    allIcon.setFontSize(64);\r\n    SetCommonUIProps(allIcon);\r\n    CreateUIBtnAnim(scene, allIcon);\r\n    const allGage = gage_CreateGageBar(scene, allIcon.x, allIcon.y + 48, (min, max, curr) => {\r\n        audio.setAllVolume(curr / 100);\r\n        audio.setSfxVolume(curr / 100);\r\n        sfxGage.setGageNum(curr);\r\n        audio.setBgmVolume(curr / 100);\r\n        bgmGage.setGageNum(curr);\r\n    }, { color: 'blue' });\r\n    allGage.setGageNum(audio.bgmVolume * 100);\r\n    allGage.setAble(!audio.isSfxMute);\r\n    // override mute\r\n    const tmpToggleMute = GameAudioUI.toggleMute;\r\n    GameAudioUI.toggleMute = () => {\r\n        tmpToggleMute();\r\n        const isOn = allIcon.text === 'All';\r\n        allGage.setAble(!isOn);\r\n        allIcon.setText(isOn ? 'Mute All' : 'All');\r\n        audio.setAllMute(isOn);\r\n        sfxGage.setAble(!isOn);\r\n        sfxIcon.setTexture(isOn ? 'sfxOff' : 'sfxOn');\r\n        audio.setSfxMute(isOn);\r\n        bgmGage.setAble(!isOn);\r\n        bgmIcon.setTexture(isOn ? 'bgmOff' : 'bgmOn');\r\n        audio.setBgmMute(isOn);\r\n    };\r\n    allIcon.on('pointerup', GameAudioUI.toggleMute);\r\n    // add context game object to pop layer\r\n    // [ allIcon, sfxIcon, bgmIcon ].map( child => GameAudioUI.pop.add(child) );\r\n    GameAudioUI.context.push(allIcon, sfxIcon, bgmIcon, allGage, sfxGage, bgmGage);\r\n    const arrangeList = [\r\n        allIcon, ...allGage.getChildren(),\r\n        sfxIcon, ...sfxGage.getChildren(),\r\n        bgmIcon, ...bgmGage.getChildren(),\r\n    ];\r\n    SetElementInMiddle(arrangeList);\r\n    // if holding audio btn 2 seconds, then it appears layer for detail audio option\r\n    GameAudioUI.pop = CreateBasicPopUp(scene, 'audioUI', {}, {\r\n        list: arrangeList,\r\n        exitBtn: {\r\n            isExist: true,\r\n            type: 'btn',\r\n        },\r\n        evt: {\r\n            show: () => { GameAudioUI.show(); },\r\n            hide: () => { GameAudioUI.hide(); },\r\n        }\r\n    });\r\n    scenes_depth_SetDepth(GameAudioUI.btn, 'highest');\r\n    // SetDepth(GameAudioUI.pop, 'highest', 100);\r\n    // key binding\r\n    src_window/* default.add2All */.Z.add2All('up', 'audio', (evt, key) => {\r\n        if (key !== cmdKey)\r\n            return;\r\n        GameAudioUI.toggleMute();\r\n    });\r\n    InitGameAudioUI();\r\n    return GameAudioUI;\r\n};\r\n/* harmony default export */ const ui_audio = ((/* unused pure expression or super */ null && (GameAudioUI)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/scroll/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GameScroll = {\r\n    btn: null,\r\n    isScrollable: true,\r\n    actScroll: function () {\r\n        if (!GameScroll.isScrollable)\r\n            return;\r\n        src_window/* default.reqParent */.Z.reqParent('scroll');\r\n    },\r\n    wheelScroll: function (ptr) {\r\n        if (GameScroll.isScrollable)\r\n            return true;\r\n        else\r\n            ptr.event.preventDefault();\r\n    },\r\n    defaultOpt: {\r\n        cmdKey: 'v',\r\n        isSwipeGestureExist: true,\r\n    },\r\n    option: {},\r\n};\r\nconst GetScrollAssets = (exceptionKeys) => {\r\n    const assetList = [\r\n        { key: 'scrollBelow', url: CommonScroll + 'scrollBelow.png', type: 'image' },\r\n        { key: 'scrollArrow', url: CommonScroll + 'scrollArrow.png', type: 'image' },\r\n    ];\r\n    return GetAssetFiles(assetList, exceptionKeys);\r\n};\r\nconst InitGameScroll = () => {\r\n};\r\nconst CreateGameScroll = (scene, option) => {\r\n    GameScroll.option = Object.assign(Object.assign(Object.assign({}, GameScroll.defaultOpt), option), { x: ui.margin * 4.5 * ui.scale * 1.6, y: ui.margin });\r\n    const { x, y, cmdKey, isSwipeGestureExist } = GameScroll.option;\r\n    // off the preventDefault method to all evts\r\n    scene.game.input.mouse.preventDefaultWheel = false;\r\n    GameScroll.btn = scene.add.image(x, y, 'scrollBelow');\r\n    scenes_depth_SetDepth(GameScroll.btn, 'highest');\r\n    SetCommonUIProps(GameScroll.btn);\r\n    CreateUIBtnAnim(scene, GameScroll.btn);\r\n    const prevWheelScroll = GameScroll.wheelScroll;\r\n    GameScroll.wheelScroll = (ptr) => {\r\n        var _a, _b;\r\n        ((_a = option === null || option === void 0 ? void 0 : option.evt) === null || _a === void 0 ? void 0 : _a.up) && ((_b = option === null || option === void 0 ? void 0 : option.evt) === null || _b === void 0 ? void 0 : _b.up(ptr));\r\n        prevWheelScroll(ptr);\r\n    };\r\n    GameScroll.btn.on('pointerup', GameScroll.actScroll);\r\n    scene.input.off('wheel', GameScroll.wheelScroll);\r\n    scene.input.on('wheel', GameScroll.wheelScroll);\r\n    // key binding\r\n    src_window/* default.add2All */.Z.add2All('down', 'scroll', (evt, key) => {\r\n        if (key !== cmdKey)\r\n            return;\r\n        GameScroll.actScroll();\r\n    });\r\n    if (isSwipeGestureExist)\r\n        CreateSwipeScroll(scene);\r\n    InitGameScroll();\r\n    return GameScroll;\r\n};\r\nconst SetGameScrollable = (isScrollable) => {\r\n    if (!GameScroll.btn)\r\n        return;\r\n    GameScroll.isScrollable = isScrollable;\r\n    GameScroll.btn.setAlpha(GameScroll.isScrollable ? ui.alpha : 0);\r\n    return GameScroll;\r\n};\r\nconst CreateSwipeScroll = (scene) => {\r\n    const disableAlpha = 0;\r\n    const ableAlpha = 0.6;\r\n    const scrollBg = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 'blackScreen');\r\n    scrollBg.setAlpha(0.6);\r\n    scrollBg.setDisplaySize(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n    scrollBg.setInteractive();\r\n    scrollBg.setVisible(false);\r\n    let isScrollBgTextureExist = true;\r\n    if (!scene.textures.get('blackScreen'))\r\n        isScrollBgTextureExist = false;\r\n    else\r\n        isScrollBgTextureExist = true;\r\n    const scrollArrow = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 'scrollArrow');\r\n    scrollArrow.setOrigin(0.5, 0.5);\r\n    scrollArrow.setVisible(false);\r\n    scrollArrow.setAlpha(disableAlpha);\r\n    const scrollTxt = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 'Scroll Touch Down');\r\n    font_SetFontStyle(scrollTxt);\r\n    scrollTxt.setAlpha(0.8);\r\n    scrollTxt.setFontSize(userSetting/* View.w */.G7.w / 16);\r\n    scrollTxt.setVisible(false);\r\n    const swipeYAmount = userSetting/* View.h */.G7.h * 2 / 5;\r\n    const swipeYLimit = userSetting/* View.h */.G7.h / 2 + userSetting/* View.h */.G7.h / 8;\r\n    const ScrollShow = (sizeY, alpha) => {\r\n        scrollArrow.setDisplaySize(userSetting/* View.centerX */.G7.centerX, sizeY);\r\n        scrollArrow.setAlpha(alpha);\r\n    };\r\n    const ScrollHide = () => {\r\n        isScrollBgTextureExist && scrollBg.setVisible(false);\r\n        scrollArrow.setVisible(false);\r\n        scrollArrow.setAlpha(disableAlpha);\r\n        scrollTxt.setVisible(false);\r\n    };\r\n    // move evt\r\n    scenes_input.add('move', (ptr, currentlyOver) => {\r\n        if (!ptr.isDown)\r\n            return;\r\n        if (!GameScroll.isScrollable)\r\n            return;\r\n        // show or hide scroll down img & txt\r\n        const diffY = gesture.initPos.y - ptr.y;\r\n        if (diffY >= swipeYAmount) {\r\n            scrollArrow.setVisible(true);\r\n            if (diffY >= swipeYLimit) {\r\n                // limit swipe\r\n                isScrollBgTextureExist && scrollBg.setVisible(true);\r\n                scrollTxt.setVisible(true);\r\n                ScrollShow(swipeYLimit, ableAlpha);\r\n            }\r\n            else {\r\n                // calculate alpha ratio\r\n                const distanceRatio = (0,math/* GetRatio */.x7)(swipeYAmount, swipeYLimit, diffY);\r\n                const alphaRatio = (0,math/* GetValueViaRatio */.$S)(disableAlpha, ableAlpha, distanceRatio);\r\n                ScrollShow(diffY, alphaRatio);\r\n            }\r\n        }\r\n        else\r\n            ScrollHide();\r\n    });\r\n    // act scroll when ptr up\r\n    scenes_input.add('up', (ptr, currentlyOver) => {\r\n        if (!GameScroll.isScrollable)\r\n            return ScrollHide();\r\n        if (!scrollArrow.visible)\r\n            return ScrollHide();\r\n        if (!scrollTxt.visible)\r\n            return ScrollHide();\r\n        ScrollHide();\r\n        GameScroll.actScroll();\r\n    });\r\n    [scrollBg, scrollArrow, scrollTxt].map(scrollEle => scenes_depth_SetDepth(scrollEle, 'highest'));\r\n};\r\n/* harmony default export */ const ui_scroll = ((/* unused pure expression or super */ null && (GameScroll)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/fullScreen/index.ts\n\r\n\r\n\r\n\r\n\r\nconst GameFullScreen = {\r\n    isDelaying: false,\r\n    delay: 300,\r\n    chckTime: 1000,\r\n    isFullScreen: false,\r\n    btn: null,\r\n    defaultOpt: {\r\n        cmdKey: 'f',\r\n    },\r\n    option: {},\r\n};\r\nconst GetFullScreenAssets = (exceptionKeys) => {\r\n    const assetList = [\r\n        { key: 'fullScreenLarger', url: CommonFullScreen + 'fullScreenLarger.png', type: 'image' },\r\n        { key: 'fullScreenSmaller', url: CommonFullScreen + 'fullScreenSmaller.png', type: 'image' },\r\n        { key: 'touchSfx', url: CommonSfx + 'touchSfx.mp3', type: 'audio' },\r\n    ];\r\n    return GetAssetFiles(assetList, exceptionKeys);\r\n};\r\nconst InitFullScreen = () => {\r\n};\r\nconst CreateFullScreen = (scene, option) => {\r\n    GameFullScreen.option = Object.assign(Object.assign(Object.assign({}, GameFullScreen.defaultOpt), { x: ui.margin, y: ui.margin }), option);\r\n    const { x, y, cmdKey } = GameFullScreen.option;\r\n    const btnTexture = GameFullScreen.isFullScreen ? 'fullScreenSmaller' : 'fullScreenLarger';\r\n    // add screen size controller\r\n    GameFullScreen.btn = scene.add.image(x, y, btnTexture);\r\n    scenes_depth_SetDepth(GameFullScreen.btn, 'highest');\r\n    SetCommonUIProps(GameFullScreen.btn);\r\n    CreateUIBtnAnim(scene, GameFullScreen.btn);\r\n    const delayEvt = () => {\r\n        GameFullScreen.btn.disableInteractive();\r\n        GameFullScreen.isDelaying = true;\r\n        GameFullScreen.btn.setAlpha(0.2);\r\n        setTimeout(() => {\r\n            GameFullScreen.btn.setInteractive();\r\n            GameFullScreen.isDelaying = false;\r\n            GameFullScreen.btn.setAlpha(ui.alpha);\r\n            scene.tweens.addCounter({\r\n                duration: 1000,\r\n                onUpdate: (tw) => {\r\n                    if (!scene.scale.isFullscreen) {\r\n                        exitEvt();\r\n                        tw.remove();\r\n                        return;\r\n                    }\r\n                },\r\n                onComplete: () => {\r\n                    GameFullScreen.btn.setInteractive();\r\n                    GameFullScreen.isDelaying = false;\r\n                    GameFullScreen.btn.setAlpha(ui.alpha);\r\n                }\r\n            });\r\n        }, GameFullScreen.delay);\r\n        return false;\r\n    };\r\n    const exitEvt = () => {\r\n        GameFullScreen.isFullScreen = false;\r\n        scene.scale.stopFullscreen();\r\n        GameFullScreen.btn.setTexture('fullScreenLarger');\r\n        SetGameScrollable(true);\r\n    };\r\n    const toggleEvt = () => {\r\n        if (GameFullScreen.isDelaying)\r\n            return;\r\n        delayEvt();\r\n        GameFullScreen.isFullScreen = !GameFullScreen.isFullScreen;\r\n        if (GameFullScreen.isFullScreen) {\r\n            scene.scale.startFullscreen();\r\n            GameFullScreen.btn.setTexture('fullScreenSmaller');\r\n            SetGameScrollable(false);\r\n        }\r\n        else\r\n            exitEvt();\r\n    };\r\n    GameFullScreen.btn.on('pointerup', () => { toggleEvt(); });\r\n    // resize event for stop full screen\r\n    scene.scale.off('resize');\r\n    scene.scale.on('resize', () => {\r\n        if (GameFullScreen.btn.isChanging)\r\n            return;\r\n        if (GameFullScreen.isDelaying)\r\n            return;\r\n        if (!GameFullScreen.isFullScreen)\r\n            return;\r\n        delayEvt();\r\n        exitEvt();\r\n    });\r\n    // key binding\r\n    src_window/* default.add2All */.Z.add2All('up', 'fullScreen', (evt, key) => {\r\n        if (key !== cmdKey)\r\n            return;\r\n        toggleEvt();\r\n    });\r\n    InitFullScreen();\r\n    return GameFullScreen;\r\n};\r\n/* harmony default export */ const fullScreen = ((/* unused pure expression or super */ null && (GameFullScreen)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ui_UIProps = {\r\n    exitPosY: userSetting/* View.h */.G7.h - 36,\r\n    margin: 30,\r\n    alpha: 0.8,\r\n    scale: 0.6,\r\n    downGap: 4, // down gap for anim\r\n};\r\nconst SetUIProps = (props, value) => {\r\n    if (!ui_UIProps[props])\r\n        console.warn(`ui props: ${props} is not exist`);\r\n    ui_UIProps[props] = value;\r\n    return ui_UIProps;\r\n};\r\nconst SetCommonUIProps = (btn) => {\r\n    btn.setAlpha(ui_UIProps.alpha);\r\n    btn.setScale(ui_UIProps.scale);\r\n    return btn;\r\n};\r\nconst CreateUIBtnAnim = (scene, btn, option) => {\r\n    var _a;\r\n    const toggleBtn = btn;\r\n    if (!toggleBtn)\r\n        return;\r\n    const dur = (_a = option === null || option === void 0 ? void 0 : option.dur) !== null && _a !== void 0 ? _a : 70;\r\n    const ChckIsMoved = () => {\r\n        if (!toggleBtn.isMovedOnce)\r\n            return;\r\n        toggleBtn.isMovedOnce = false;\r\n        if (toggleBtn.downPosY !== toggleBtn.y + ui_UIProps.downGap) {\r\n            toggleBtn.upPosY = toggleBtn.y;\r\n            toggleBtn.downPosY = toggleBtn.y + ui_UIProps.downGap;\r\n        }\r\n    };\r\n    toggleBtn.downEvt = () => {\r\n        ChckIsMoved();\r\n        scene.tweens.addCounter({\r\n            from: toggleBtn.y, to: toggleBtn.downPosY, duration: dur,\r\n            onStart: () => {\r\n                toggleBtn.isChanging = true;\r\n            },\r\n            onUpdate: (tw, twData) => {\r\n                if (!toggleBtn.isChanging) {\r\n                    toggleBtn.upEvt();\r\n                    tw.remove();\r\n                    return;\r\n                }\r\n                toggleBtn.y = twData.value;\r\n            },\r\n            onComplete: () => {\r\n                toggleBtn.isChanging = false;\r\n            },\r\n        });\r\n    };\r\n    toggleBtn.upEvt = () => {\r\n        ChckIsMoved();\r\n        scene.tweens.addCounter({\r\n            from: toggleBtn.y, to: toggleBtn.upPosY, duration: dur,\r\n            onStart: () => {\r\n                toggleBtn.isChanging = true;\r\n            },\r\n            onUpdate: (tw, twData) => {\r\n                if (!toggleBtn.isChanging) {\r\n                    toggleBtn.y = toggleBtn.upPosY;\r\n                    tw.remove();\r\n                    return;\r\n                }\r\n                toggleBtn.y = twData.value;\r\n            },\r\n            onComplete: () => {\r\n                toggleBtn.isChanging = false;\r\n            },\r\n        });\r\n    };\r\n    toggleBtn.upPosY = btn.y;\r\n    toggleBtn.downPosY = btn.y + ui_UIProps.downGap;\r\n    toggleBtn.isMovedOnce = true;\r\n    toggleBtn.setInteractive();\r\n    toggleBtn.on('pointerdown', toggleBtn.downEvt);\r\n    toggleBtn.on('pointerup', toggleBtn.upEvt);\r\n    toggleBtn.on('pointerout', toggleBtn.upEvt);\r\n    return ui_UIProps;\r\n};\r\nconst SetElementInMiddle = (list, initY) => {\r\n    const contentInitY = initY !== null && initY !== void 0 ? initY : 0;\r\n    const yList = list.map(child => child.y);\r\n    const topY = Math.min(...yList);\r\n    const bottomY = Math.max(...yList);\r\n    const gapLength = bottomY - topY - contentInitY;\r\n    if (gapLength > userSetting/* View.h */.G7.h) {\r\n        console.warn('content gap is more than view height, this should be a scrollable layer');\r\n    }\r\n    else {\r\n        const gapY = (userSetting/* View.h */.G7.h - gapLength) / 2;\r\n        const contentY = topY - gapY;\r\n        const last = list.map(child => child.y -= contentY);\r\n    }\r\n};\r\nconst GetGameCommonUIAssets = () => {\r\n    const commonUIAssetsList = [\r\n        ...GetScrollAssets(),\r\n        ...GetFullScreenAssets(),\r\n        ...GetPopUpAssets(),\r\n        ...GetGageAssets('blue'),\r\n        ...GetGameAudioUIAssets(),\r\n    ];\r\n    return commonUIAssetsList;\r\n};\r\nconst CreateGameCommonUI = (scene, exceptionKeys) => {\r\n    CreateGameInput(scene);\r\n    CreateFullScreen(scene);\r\n    CreateGameScroll(scene);\r\n    CreateGameGesture(scene);\r\n    CreateGameAudioUI(scene);\r\n};\r\nconst UpdateGameCommonUI = (delta) => {\r\n    UpdateGameGesture(delta);\r\n};\r\n/* harmony default export */ const ui = (ui_UIProps);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/setting.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Setting = {\r\n    btn: null,\r\n    layer: [],\r\n    layerData: {\r\n        txtGap: 50,\r\n        controlTxtList: ['FullScreen', 'Normal'],\r\n        isFullScreen: false,\r\n    },\r\n    exitBtn: null,\r\n    isOpen: false,\r\n    isTwing: false,\r\n};\r\nconst InitSetting = (scene) => {\r\n    Setting.isTwing = false;\r\n    HideSetting(scene);\r\n};\r\nconst CreateSetting = (scene) => {\r\n    const { margin, alpha, scale } = UIProps;\r\n    Setting.btn = scene.add.image(View.w - margin, margin, 'settingBtn');\r\n    Setting.btn.setScale(scale);\r\n    Setting.btn.setAlpha(alpha);\r\n    Setting.btn.setInteractive();\r\n    Setting.btn.on('pointerup', () => { Setting.isTwing || AnimShowSetting(scene); });\r\n    // Setting.layer = scene.add.container();\r\n    // Setting.layer = scene.add.layer();\r\n    const bg = scene.add.image(View.centerX, View.centerY, 'blackScreen');\r\n    bg.setInteractive();\r\n    bg.setDisplaySize(View.w, View.h);\r\n    bg.setAlpha(0.4);\r\n    const panel = scene.add.image(View.centerX, View.centerY, 'settingPanel');\r\n    panel.setDisplaySize(View.w - ContextMarginW, View.h - ContextMarginH);\r\n    const title = scene.add.text(View.centerX, View.centerY - (TxtTitleHeightGap * 3), 'Setting');\r\n    SetFont2CommonContextStyle(title);\r\n    title.setFontSize(TxtTitleHeadSize);\r\n    const bgmBtn = scene.add.image(View.centerX, View.centerY - View.h / 6, 'musicOn');\r\n    const bgmGage = CreateGageBar(scene, View.centerX, bgmBtn.y + SettingGapContextMargin, (min, max, curr) => {\r\n        GameAudio.setBgmVolume(curr / 100);\r\n    });\r\n    bgmGage.setGageNum(GameAudio.bgmVolume * 100);\r\n    const sfxBtn = scene.add.image(View.centerX, bgmGage.y + SettingGapContextMargin, 'audioOn');\r\n    const sfxGage = CreateGageBar(scene, View.centerX, sfxBtn.y + SettingGapContextMargin, (min, max, curr) => {\r\n        GameAudio.setSfxVolume(curr / 100);\r\n        GameAudio.playSfx('gearAnim');\r\n    });\r\n    sfxGage.setGageNum(GameAudio.sfxVolume * 100);\r\n    [bgmBtn, sfxBtn].map((btn) => {\r\n        btn.setScale(0.6);\r\n        btn.setInteractive();\r\n    });\r\n    bgmBtn.on('pointerup', () => {\r\n        const isOn = bgmBtn.texture.key === 'musicOn';\r\n        bgmGage.setAble(!isOn);\r\n        bgmBtn.setTexture(isOn ? 'musicOff' : 'musicOn');\r\n        GameAudio.setBgmMute(isOn);\r\n    });\r\n    sfxBtn.on('pointerup', () => {\r\n        const isOn = sfxBtn.texture.key === 'audioOn';\r\n        sfxGage.setAble(!isOn);\r\n        sfxBtn.setTexture(isOn ? 'audioOff' : 'audioOn');\r\n        GameAudio.setSfxMute(isOn);\r\n    });\r\n    bgmBtn.setTexture(GameAudio.isBgmMute ? 'musicOff' : 'musicOn');\r\n    sfxBtn.setTexture(GameAudio.isSfxMute ? 'audioOff' : 'audioOn');\r\n    bgmGage.setAble(!GameAudio.isBgmMute);\r\n    sfxGage.setAble(!GameAudio.isSfxMute);\r\n    const { txtGap } = Setting.layerData;\r\n    // add back to title btn\r\n    const back2TitleBg = scene.add.image(View.centerX, sfxGage.y + SettingGapContextMarginLarger, 'settingOverBtnUp').setScale(1.2);\r\n    const back2Title = scene.add.image(back2TitleBg.x, back2TitleBg.y - 4, 'overBack');\r\n    back2Title.setScale(0.6).setInteractive();\r\n    back2Title.downPosY = back2Title.y + 4;\r\n    back2Title.upPosY = back2Title.y;\r\n    back2Title.on('pointerdown', () => {\r\n        back2TitleBg.setTexture('settingOverBtnDown');\r\n        back2Title.setPosition(back2Title.x, back2Title.downPosY);\r\n    });\r\n    back2Title.on('pointerup', () => {\r\n        GameAudio.playSfx('gearAnim');\r\n        back2TitleBg.setTexture('settingOverBtnUp');\r\n        back2Title.setPosition(back2Title.x, back2Title.upPosY);\r\n        if (back2Title.isChanging)\r\n            return;\r\n        if (!scene.scene.isActive('title')) {\r\n            StopGame(scene);\r\n            StartTitle(scene);\r\n        }\r\n        else\r\n            AnimHideSetting(scene);\r\n        setTimeout(() => { back2Title.isChanging = false; }, 500);\r\n    });\r\n    back2Title.on('pointerout', () => {\r\n        back2TitleBg.setTexture('settingOverBtnUp');\r\n        back2Title.setPosition(back2Title.x, back2Title.upPosY);\r\n    });\r\n    const back2TitleTxt = scene.add.text(back2TitleBg.x, back2TitleBg.y + txtGap, 'Go to Title');\r\n    SetFont2CommonContextStyle(back2TitleTxt);\r\n    back2TitleTxt.setFontSize(16);\r\n    const back2TitleList = [back2TitleBg, back2Title, back2TitleTxt];\r\n    // // add screen size controller\r\n    // const sizeControllerBg = scene.add.image(View.centerX + controlGap, back2TitleBg.y, 'settingOverBtnUp').setScale(1.2);\r\n    // let sizeController = scene.add.image(sizeControllerBg.x, sizeControllerBg.y - 4, 'screenLarger') as TToggleBtnImg;\r\n    // sizeController.setScale(0.6).setInteractive();\r\n    // sizeController.downPosY = sizeController.y + 4;\r\n    // sizeController.upPosY = sizeController.y;\r\n    // sizeController.on('pointerdown', () => {\r\n    //     sizeControllerBg.setTexture('settingOverBtnDown');\r\n    //     sizeController.setPosition(sizeController.x, sizeController.downPosY);\r\n    // });\r\n    // const sizeControllerExitEvt = () => {\r\n    //     Setting.layerData.isFullScreen = false;\r\n    //     scene.scale.stopFullscreen();\r\n    //     sizeController.setTexture('screenLarger');\r\n    //     sizeControlTxt.setText(controlTxtList[0]);\r\n    // };\r\n    // const sizeControllerToggleEvt = () => {\r\n    //     Setting.layerData.isFullScreen = !Setting.layerData.isFullScreen;\r\n    //     if (Setting.layerData.isFullScreen) {\r\n    //         scene.scale.startFullscreen();\r\n    //         sizeController.setTexture('screenSmaller');\r\n    //         sizeControlTxt.setText(controlTxtList[1]);\r\n    //     }\r\n    //     else sizeControllerExitEvt();\r\n    // };\r\n    // sizeController.on('pointerup', () => {\r\n    //     GameAudio.playSfx('gearAnim');\r\n    //     sizeControllerBg.setTexture('settingOverBtnUp');\r\n    //     sizeController.setPosition(sizeController.x, sizeController.upPosY);\r\n    //     if (sizeController.isChanging) return;\r\n    //     sizeController.isChanging = true;\r\n    //     sizeControllerToggleEvt();\r\n    //     setTimeout(() => { sizeController.isChanging = false; }, 300);\r\n    // });\r\n    // sizeController.on('pointerout', () => {\r\n    //     sizeControllerBg.setTexture('settingOverBtnUp');\r\n    //     sizeController.setPosition(sizeController.x, sizeController.upPosY);\r\n    // });\r\n    // const sizeControlTxt = scene.add.text(sizeControllerBg.x, sizeControllerBg.y + txtGap, controlTxtList[0]);\r\n    // SetFont2CommonContextStyle(sizeControlTxt);\r\n    // sizeControlTxt.setFontSize(16);\r\n    // // resize event for stop full screen\r\n    // scene.scale.off('resize');\r\n    // scene.scale.on('resize', () => {\r\n    //     if (sizeController.isChanging) return;\r\n    //     if (!Setting.layerData.isFullScreen) return;\r\n    //     GameAudio.playSfx('gearAnim');\r\n    //     sizeControllerExitEvt();\r\n    // });\r\n    // const sizeControllerList = [ sizeControllerBg, sizeController, sizeControlTxt ];\r\n    // const howContext = CreateHow(scene);\r\n    // const howBtn = scene.add.image(View.centerX, sizeControlTxt.y + SettingGapContextMargin, 'btnSettingUp') as TToggleBtnImg;\r\n    // howBtn.setInteractive().setScale(1);\r\n    // howBtn.downPosY = howBtn.y + 4;\r\n    // howBtn.upPosY = howBtn.y;\r\n    // howBtn.on('pointerdown', () => {\r\n    //     howBtn.setTexture('btnSettingDown');\r\n    //     howTxt.setPosition(howTxt.x, howBtn.downPosY);\r\n    // });\r\n    // howBtn.on('pointerup', () => {\r\n    //     GameAudio.playSfx('gearAnim');\r\n    //     howBtn.setTexture('btnSettingUp');\r\n    //     howTxt.setPosition(howTxt.x, howBtn.upPosY);\r\n    //     howContext.show();\r\n    // });\r\n    // howBtn.on('pointerout', () => {\r\n    //     howBtn.setTexture('btnSettingUp');\r\n    //     howTxt.setPosition(howTxt.x, howBtn.upPosY);\r\n    // });\r\n    // const howTxt = scene.add.text(howBtn.x, howBtn.y, 'how');\r\n    // SetFont2CommonContextStyle(howTxt);\r\n    // howTxt.setFontSize(TxtTitleSize);\r\n    // const howList = [ howBtn, howTxt, howContext ];\r\n    // Setting.layer.add([\r\n    //     bg, panel, title,\r\n    //     bgmBtn, sfxBtn,\r\n    //     bgmGage, sfxGage,\r\n    //     ...back2TitleList,\r\n    //     // ...sizeControllerList,\r\n    // ]);\r\n    // Setting.layer.add(\r\n    //     bg, panel, title,\r\n    //     bgmBtn, sfxBtn,\r\n    //     bgmGage, sfxGage,\r\n    //     // ...back2TitleList,\r\n    //     // ...sizeControllerList,\r\n    // );\r\n    Setting.layer.push(bg);\r\n    Setting.layer.push(panel);\r\n    Setting.layer.push(title);\r\n    Setting.layer.push(bgmBtn);\r\n    Setting.layer.push(sfxBtn);\r\n    Setting.layer.push(bgmGage);\r\n    Setting.layer.push(sfxGage);\r\n    back2TitleList.map((child) => {\r\n        Setting.layer.push(child);\r\n    });\r\n    // exit btn & last container setup\r\n    Setting.exitBtn = scene.add.image(View.w - SettingContextMargin, SettingContextMargin, 'exitBtn').setScale(0.6);\r\n    Setting.exitBtn.setInteractive();\r\n    Setting.exitBtn.on('pointerup', () => {\r\n        AnimHideSetting(scene);\r\n    });\r\n    [Setting.btn, ...Setting.layer, Setting.exitBtn].map(ele => SetDepth(ele, 'setting'));\r\n    InitSetting(scene);\r\n    return Setting;\r\n};\r\n// type TGageContainer = Phaser.GameObjects.Container & {\r\n//     gageNum: number;\r\n//     gageNumMin: number;\r\n//     gageNumMax: number;\r\n//     gagePosX: number;\r\n//     gagePosXMin: number;\r\n//     gagePosXMax: number;\r\n//     gagePosXLength: number;\r\n//     isAble: boolean;\r\n//     setGageHandleFrame: (isDown: boolean) => void;\r\n//     setGageBarSize: (gagePos: number) => void;\r\n//     setGageNum: (gageNum: number) => void;\r\n//     setGage: () => void;\r\n//     setAble: (isAble: boolean) => void;\r\n// };\r\n// const GageHeight = 20;\r\n// const CreateGageBar = (\r\n//     scene: Phaser.Scene, x: number, y: number,\r\n//     endMoveCallback?: (min: number, max: number, curr: number) => void,\r\n//     gageNumMin: number = 0, gageNumMax: number = 100,\r\n// ) => {\r\n//     const con: TGageContainer = scene.add.container(x, y) as TGageContainer;\r\n//     con.gageNumMin = gageNumMin;\r\n//     con.gageNumMax = gageNumMax;\r\n//     con.gageNum = (con.gageNumMin + con.gageNumMax) / 2;\r\n//     const gageBg = scene.add.image(0, 0, 'colorBackground');\r\n//     const gageBar = scene.add.image(0, 0, 'btnBlue');\r\n//     const gageBarHandle = scene.add.image(0, 0, 'colorHandle');\r\n//     const gageTxt = scene.add.text(0, 0, con.gageNum.toString());\r\n//     gageBg.setDisplaySize(View.centerX, GageHeight);\r\n//     gageBar.setDisplaySize(View.centerX/2, GageHeight);\r\n//     gageBar.setOrigin(0, 0.5);\r\n//     gageBar.setPosition(-View.centerX/2, 0);\r\n//     gageTxt.setOrigin(0, 0.5);\r\n//     gageTxt.setPosition(View.centerX/2 + TxtMargin - 5, 0);\r\n//     con.add([ gageBg, gageBar, gageBarHandle, gageTxt ]);\r\n//     con.gagePosX = 0;\r\n//     con.gagePosXMin = -gageBg.width/2 - gageBarHandle.width/2;\r\n//     con.gagePosXMax = gageBg.width/2 + gageBarHandle.width/2;\r\n//     con.gagePosXLength = gageBg.width + gageBarHandle.width;\r\n//     con.setGageHandleFrame = (isDown: boolean) => {\r\n//         gageBarHandle.setTexture(isDown ? 'colorHandleDown' : 'colorHandle');\r\n//     };\r\n//     con.setGageBarSize = (gagePos: number) => {\r\n//         let gagePosX = gagePos;\r\n//         if (gagePosX <= con.gagePosXMin) gagePosX = con.gagePosXMin;\r\n//         else if (gagePosX >= con.gagePosXMax) gagePosX = con.gagePosXMax;\r\n//         con.gagePosX = gagePosX;\r\n//         con.gageNum = Math.floor((con.gageNumMax - con.gageNumMin) * Math.abs(gagePosX - con.gagePosXMin) / con.gagePosXLength);\r\n//         con.setGage();\r\n//     };\r\n//     con.setGageNum = (gageNum: number) => {\r\n//         let gageNumber = gageNum;\r\n//         if (gageNumber < con.gageNumMin) gageNumber = con.gageNumMin;\r\n//         else if (gageNumber > con.gageNumMax) gageNumber = con.gageNumMax;\r\n//         con.gageNum = gageNumber;\r\n//         con.gagePosX = (con.gageNum * con.gagePosXLength / con.gageNumMax) - con.gagePosXMax;\r\n//         con.setGage();\r\n//     };\r\n//     con.setGage = () => {\r\n//         gageBar.setDisplaySize(con.gagePosX + gageBar.width/2 + gageBarHandle.width/2, GageHeight);\r\n//         gageBarHandle.setPosition(con.gagePosX, 0);\r\n//         gageTxt.setText(con.gageNum.toFixed(0));\r\n//     };\r\n//     con.setAble = (isAble: boolean) => {\r\n//         con.isAble = isAble;\r\n//         con.isAble ? con.setAlpha(1) : con.setAlpha(0.5);\r\n//     };\r\n//     con.setAble(true);\r\n//     gageBarHandle.setInteractive({ draggable: true });\r\n//     gageBarHandle.on('dragstart', () => {\r\n//         con.isAble && con.setGageHandleFrame(true);\r\n//     });\r\n//     gageBarHandle.on('drag', (ptr, dragX) => {\r\n//         con.isAble && con.setGageBarSize(dragX);\r\n//     });\r\n//     gageBarHandle.on('dragend', () => {\r\n//         if (con.isAble) {\r\n//             con.setGageHandleFrame(false);\r\n//             endMoveCallback && endMoveCallback(con.gageNumMin, con.gageNumMax, con.gageNum);\r\n//         }\r\n//     });\r\n//     return con;\r\n// };\r\nconst AnimShowSetting = (scene) => {\r\n    Setting.isTwing = true;\r\n    GameAudio.playSfx('gearAnim');\r\n    scene.tweens.addCounter({\r\n        from: 0, to: 60, duration: 120,\r\n        onUpdate: (tw, data) => { Setting.btn.setAngle(data.value); },\r\n        onComplete: () => {\r\n            Setting.isTwing = false;\r\n            ShowSetting(scene);\r\n        }\r\n    });\r\n};\r\nconst AnimHideSetting = (scene) => {\r\n    Setting.isTwing = true;\r\n    GameAudio.playSfx('gearAnim');\r\n    HideSetting(scene);\r\n    scene.tweens.addCounter({\r\n        from: 180, to: 0, duration: 120,\r\n        onUpdate: (tw, data) => { Setting.btn.setAngle(data.value); },\r\n        onComplete: () => { Setting.isTwing = false; }\r\n    });\r\n};\r\nconst ShowSetting = (scene) => {\r\n    GameTime.setTimeScale(scene, GameTime.showSettingTimeScale);\r\n    Setting.isOpen = true;\r\n    Setting.layer.map(layerChild => layerChild.setVisible && layerChild.setVisible(true));\r\n    Setting.exitBtn.setVisible(true);\r\n};\r\nconst HideSetting = (scene) => {\r\n    ui_time.setTimeScale(scene, ui_time.hideSettingTimeScale);\r\n    Setting.isOpen = false;\r\n    Setting.layer.map(layerChild => layerChild.setVisible && layerChild.setVisible(false));\r\n    Setting.exitBtn.setVisible(false);\r\n};\r\nconst ShowSettingBtn = (scene) => {\r\n    HideSetting(scene);\r\n    Setting.btn.setVisible(true);\r\n};\r\nconst HideSettingBtn = (scene) => {\r\n    HideSetting(scene);\r\n    Setting.btn.setVisible(false);\r\n};\r\n/* harmony default export */ const setting = ((/* unused pure expression or super */ null && (Setting)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/time.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst time_GameTime = {\r\n    txt: null,\r\n    last10Txt: null,\r\n    last10PrevTime: 11,\r\n    isLast10HasOnceCnt: true,\r\n    isGameTimeEndOnceCnt: true,\r\n    isFirstLast10HasOnceCnt: true,\r\n    standbyTime: 3 * 1000,\r\n    init: 60 * 1000,\r\n    curr: 60 * 1000,\r\n    last10: 10 * 1000,\r\n    increasedTime: 0,\r\n    // anim option\r\n    animIncreaseTimeDuration: 400,\r\n    animTw: null,\r\n    animTwScaleMin: 1,\r\n    animTwScaleMax: 1.4,\r\n    isTwing: false,\r\n    // time scale option\r\n    timeScale: 1,\r\n    showSettingTimeScale: 0.1,\r\n    hideSettingTimeScale: 1,\r\n    sndLast10Voice: function (scene, time) {\r\n        // scene.sound.play('voice' + time);\r\n        audio.playSfx('voice' + time);\r\n        this.last10Txt.setText(time);\r\n    },\r\n    increaseTime: function (time) {\r\n        // last 10 seconds left so increasing time is useless\r\n        if (!this.isFirstLast10HasOnceCnt)\r\n            return;\r\n        this.curr += time;\r\n        this.increasedTime += time;\r\n        return this;\r\n    },\r\n    set2Format: function (milliTime) {\r\n        // separate minute, second each\r\n        const timeSec = milliTime / 1000;\r\n        const secondSplit = timeSec.toFixed(2).split('.');\r\n        let minutes = Math.floor(timeSec / 60);\r\n        let seconds = Math.floor(Number(secondSplit[0]));\r\n        let underPointDigitNum = Number(secondSplit[1]);\r\n        if (minutes < 10)\r\n            minutes = '0' + minutes;\r\n        if (seconds < 10)\r\n            seconds = '0' + seconds;\r\n        if (underPointDigitNum < 10)\r\n            underPointDigitNum = '0' + underPointDigitNum;\r\n        const time = minutes + ':' + seconds + '.' + underPointDigitNum;\r\n        this.txt.setText(time);\r\n    },\r\n    setTimeScale: function (scene, timeScale) {\r\n        scene.matter.world.engine.timing.timeScale = timeScale;\r\n        this.timeScale = timeScale;\r\n    },\r\n    getCurr: function () { return this.curr; },\r\n    updateLast10CntAnim: function (scene) {\r\n        // stop bgm & hide setting btn & time increasing is not possible\r\n        if (this.isFirstLast10HasOnceCnt) {\r\n            this.isFirstLast10HasOnceCnt = false;\r\n            audio.pauseBgm('gameBgm');\r\n            HideSettingBtn(scene);\r\n        }\r\n        this.last10Txt.setVisible(true);\r\n        const time = Math.ceil(this.curr / 1000);\r\n        if (this.last10PrevTime !== time) {\r\n            this.isLast10HasOnceCnt = true;\r\n            this.last10PrevTime = time;\r\n        }\r\n        else\r\n            this.isLast10HasOnceCnt = false;\r\n        if (this.isLast10HasOnceCnt)\r\n            this.sndLast10Voice(scene, time);\r\n    },\r\n    update: function (scene, delta) {\r\n        if (system.getIsGameOver())\r\n            return;\r\n        if (this.curr > 0) {\r\n            this.curr -= delta * this.timeScale;\r\n            this.set2Format(this.curr);\r\n            const isUnder10Sec = this.curr > 0 && this.curr <= 10 * 1000;\r\n            isUnder10Sec && this.updateLast10CntAnim(scene, delta);\r\n            return;\r\n        }\r\n        if (this.isGameTimeEndOnceCnt) {\r\n            this.isGameTimeEndOnceCnt = false;\r\n            system.setIsGameOver(true);\r\n            this.curr = 0;\r\n            this.set2Format(0);\r\n            this.last10Txt.setVisible(false);\r\n            gameover.animTimeOver(scene);\r\n            return;\r\n        }\r\n    },\r\n    initTimeIncrease: function () {\r\n        this.increasedTime = 0;\r\n        return this.increasedTime;\r\n    },\r\n    getTimeIncrease: function () { return this.increasedTime; },\r\n    addTimeIncrease: function (time) {\r\n        this.increasedTime += time;\r\n        return this.increasedTime;\r\n    },\r\n};\r\nconst InitGameTime = () => {\r\n    time_GameTime.last10Txt.setVisible(false);\r\n    time_GameTime.last10PrevTime = 11;\r\n    time_GameTime.isLast10HasOnceCnt = true;\r\n    time_GameTime.isGameTimeEndOnceCnt = true;\r\n    time_GameTime.curr = time_GameTime.init;\r\n    time_GameTime.increasedTime = 0;\r\n    time_GameTime.timeScale = 1;\r\n    time_GameTime.initTimeIncrease();\r\n};\r\nconst CreateGameTimeTxt = (scene) => {\r\n    const initX = TxtMargin - 10;\r\n    const initY = 120;\r\n    time_GameTime.txt = scene.add.text(initX, initY, '');\r\n    time_GameTime.txt.setAlpha(TxtAlpha);\r\n    time_GameTime.txt.setOrigin(0, 0);\r\n    time_GameTime.txt.setFontSize(TxtSize);\r\n    time_GameTime.txt.setBackgroundColor(TxtBackgroundColor);\r\n    time_GameTime.last10Txt = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, '');\r\n    time_GameTime.last10Txt.setAlpha(0.5);\r\n    time_GameTime.last10Txt.setOrigin(0.5, 0.5);\r\n    time_GameTime.last10Txt.setFontSize(userSetting/* View.w */.G7.w / 2);\r\n    time_GameTime.last10Txt.setVisible(false);\r\n    [time_GameTime.txt, time_GameTime.last10Txt].map((txt) => {\r\n        txt.setPadding({ left: TxtPadding, right: TxtPadding, top: TxtPadding / 2, bottom: TxtPadding / 2 });\r\n        txt.setFontFamily(TxtFamily);\r\n        depth_SetDepth(txt, 'txt');\r\n    });\r\n    InitGameTime();\r\n};\r\nconst SetmillieSec2SecTimeFormat = (millieSec) => {\r\n    const sec = (millieSec / 1000).toFixed(2) + ' sec';\r\n    return sec;\r\n};\r\n/* harmony default export */ const ui_time = (time_GameTime);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/score.ts\n// import Phaser from 'phaser';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Score = {\r\n    txt: null,\r\n    txtBackground: null,\r\n    bTxt: null,\r\n    bTxtBackground: null,\r\n    txtNum: 0,\r\n    bTxtNum: 0,\r\n    setFormat: function (score) {\r\n        this.txtNum = score;\r\n        const finalScore = '' + (0,math/* SetNum2CurrencyFormat */.me)(score);\r\n        this.txt.setText(finalScore);\r\n        if (this.txtNum > this.bTxtNum)\r\n            this.setBFormat(score);\r\n        return this;\r\n    },\r\n    setBFormat: function (score) {\r\n        this.bTxtNum = score;\r\n        const finalScore = '' + (0,math/* SetNum2CurrencyFormat */.me)(score);\r\n        this.bTxt.setText(finalScore);\r\n        return this;\r\n    },\r\n    add: function (score) {\r\n        if (system.getIsGameOver())\r\n            return;\r\n        let finalScore = Number(this.txt.text) + score;\r\n        this.setFormat(finalScore);\r\n        return finalScore;\r\n    },\r\n    getScore: function () { return this.txtNum; },\r\n    getBScore: function () { return this.bTxtNum; },\r\n    compareNormalAndBest: function (score) {\r\n        const prevBest = GetLocalStorageItem(storage, 'best');\r\n        if (prevBest < score) {\r\n            this.setBFormat(score);\r\n            SetLocalStorageItem(storage, 'best', score);\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    getBonusTimeScore: function () {\r\n        return Math.floor(ui_time.getTimeIncrease() / 100);\r\n    },\r\n    getFinalScore: function () {\r\n        return Math.floor(Score.getScore() + this.getBonusTimeScore());\r\n    },\r\n};\r\nconst InitScore = () => {\r\n    Score.txtNum = 0;\r\n    Score.bTxtNum = GetLocalStorageItem(storage, 'best');\r\n    Score.setFormat(0);\r\n    Score.setBFormat(Score.bTxtNum);\r\n};\r\nconst TxtGap = 110;\r\nconst CreateScoreTxt = (scene) => {\r\n    Score.bTxt = scene.add.text(TxtMargin / 2, TxtMargin * 2, '');\r\n    Score.bTxtBackground = scene.add.text(Score.bTxt.x + TxtGap, Score.bTxt.y, 'Best');\r\n    Score.txt = scene.add.text(TxtMargin / 2, TxtMargin * 3, '');\r\n    Score.txtBackground = scene.add.text(Score.txt.x + TxtGap, Score.txt.y, 'Score');\r\n    [Score.bTxtBackground, Score.txtBackground].map((txt) => {\r\n        txt.setPadding({ left: TxtPadding, right: TxtPadding, top: TxtPadding / 2, bottom: TxtPadding / 2 });\r\n        txt.setOrigin(1, -0.1);\r\n        txt.setFontSize(TxtSize);\r\n        txt.setFontFamily(TxtFamily);\r\n        txt.setFontStyle('bold italic');\r\n        txt.setAlpha(0.3);\r\n    });\r\n    [Score.bTxt, Score.txt].map((txt) => {\r\n        txt.setPadding({ left: TxtPadding, right: TxtPadding, top: TxtPadding / 2, bottom: TxtPadding / 2 });\r\n        txt.setOrigin(0, 0);\r\n        txt.setFontSize(TxtSize);\r\n        txt.setFontFamily(TxtFamily);\r\n    });\r\n    let bestScore = GetLocalStorageItem(storage, 'best');\r\n    Score.setFormat(0);\r\n    Score.setBFormat(bestScore);\r\n    [Score.bTxtBackground, Score.txtBackground, Score.bTxt, Score.txt].map((txt) => {\r\n        depth_SetDepth(txt, 'txt');\r\n    });\r\n    InitScore();\r\n};\r\n/* harmony default export */ const ui_score = (Score);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/efx/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Efx = {\r\n    bgParticleList: [],\r\n    // timeIncrease: <Phaser.GameObjects.Text[]> [],   // when block cleared, increase time by block's own chance\r\n    // score: <Phaser.GameObjects.Text[]> [],          // when block cleared, increase score\r\n    list: [],\r\n    setConfig: function (particle, config) {\r\n        const finalConfig = Object.assign({ x: 0, y: 0, active: false }, config);\r\n        let emitter;\r\n        const nestedEmitterIdx = this.list.findIndex(emitter => emitter.name === config.name);\r\n        if (nestedEmitterIdx >= 0)\r\n            this.list[nestedEmitterIdx] = particle.createEmitter(finalConfig);\r\n        else {\r\n            emitter = particle.createEmitter(finalConfig);\r\n            this.list.push(emitter);\r\n        }\r\n        return emitter;\r\n    },\r\n    getEmitter: function (name) {\r\n        const targetEmitter = this.list.find(emitter => emitter.name === name);\r\n        if (!targetEmitter) {\r\n            console.warn(`emitter ${name} is not in the particle list`);\r\n            return;\r\n        }\r\n        return targetEmitter;\r\n    },\r\n    activeEmitter(x, y, name) {\r\n        const targetEmitter = this.getEmitter(name);\r\n        if (!targetEmitter)\r\n            return false;\r\n        targetEmitter.active = true;\r\n        targetEmitter.setPosition(x, y);\r\n        return targetEmitter;\r\n    },\r\n    animEmitter: function (x, y, name) {\r\n        const targetEmitter = this.activeEmitter(x, y, name);\r\n        if (!targetEmitter)\r\n            return;\r\n        const instanceExplode = targetEmitter.explode();\r\n        return instanceExplode;\r\n    },\r\n    startEmitter: function (x, y, name) {\r\n        const targetEmitter = this.activeEmitter(x, y, name);\r\n        if (!targetEmitter)\r\n            return;\r\n        const instanceExplode = targetEmitter.start();\r\n        return instanceExplode;\r\n    },\r\n    animScale: function (scene, target) {\r\n        scene.tweens.addCounter({\r\n            from: 1, to: 1.2, duration: 300, yoyo: true,\r\n            onUpdate: (tw, data) => {\r\n                target && target.setScale(data.value);\r\n            },\r\n        });\r\n    },\r\n    animPos: function (scene, target, amount) {\r\n        const targetInitY = target.y;\r\n        scene.tweens.addCounter({\r\n            from: targetInitY, to: targetInitY + amount, duration: 2400,\r\n            onUpdate: (tw, data) => {\r\n                target && target.setPosition(target.x, data.value);\r\n            },\r\n        });\r\n    },\r\n    animTimeIncrease: function (block, chance, value) {\r\n        const { scene } = block;\r\n        const chancePosY = block.y - 100;\r\n        const timeSec = SetmillieSec2SecTimeFormat(value);\r\n        const timeIncreaseOnUiRndPosX = ui_time.txt.x + (ui_time.txt.width * 1.5) - 5 + (0,math/* GetRndNum */.hg)(-3, 3);\r\n        const timeIncreaseOnUiRndPosY = ui_time.txt.y + ui_time.txt.height / 2 + (0,math/* GetRndNum */.hg)(-10, 10);\r\n        const timeIncreaseOnUi = scene.add.text(timeIncreaseOnUiRndPosX, timeIncreaseOnUiRndPosY, '+' + timeSec).setVisible(false);\r\n        const timeIncreaseTxt = scene.add.text(block.x, chancePosY, 'Time Critical!').setVisible(false);\r\n        const timeIncreaseChance = scene.add.text(timeIncreaseTxt.x, timeIncreaseTxt.y + 25, chance.toString() + '%').setVisible(false);\r\n        const timeIncreaseOnBlock = scene.add.text(timeIncreaseChance.x, timeIncreaseChance.y + 25, timeSec).setVisible(false);\r\n        [timeIncreaseOnUi, timeIncreaseTxt, timeIncreaseChance, timeIncreaseOnBlock].map((txt) => {\r\n            font_SetFont2CommonContextStyle(txt);\r\n            depth_SetDepth(txt, 'txt');\r\n            txt.setVisible(true);\r\n            this.animScale(scene, timeIncreaseOnUi);\r\n        });\r\n        const twList = [];\r\n        twList.push({\r\n            from: timeIncreaseOnUiRndPosX, to: timeIncreaseOnUiRndPosX + 10, duration: 2400,\r\n            onStart: () => { scene.tweens.addCounter(twList.shift()); },\r\n            onUpdate: (tw, twData) => { timeIncreaseOnUi.x = twData.value; },\r\n            onComplete: () => { timeIncreaseOnUi.destroy(); }\r\n        });\r\n        twList.push({\r\n            from: 1, to: 0, duration: 2400,\r\n            onUpdate: (tw, twData) => {\r\n                timeIncreaseTxt.setAlpha(twData.value);\r\n                timeIncreaseChance.setAlpha(twData.value);\r\n                timeIncreaseOnBlock.setAlpha(twData.value);\r\n            },\r\n            onComplete: () => {\r\n                timeIncreaseTxt.destroy();\r\n                timeIncreaseChance.destroy();\r\n                timeIncreaseOnBlock.destroy();\r\n            }\r\n        });\r\n        scene.tweens.addCounter(twList.shift());\r\n        this.animPos(scene, timeIncreaseTxt, -30);\r\n        this.animPos(scene, timeIncreaseChance, -30);\r\n        this.animPos(scene, timeIncreaseOnBlock, -30);\r\n        return this;\r\n    },\r\n    animScore: function (block, score) {\r\n        const { scene } = block;\r\n        const scoreTxt = scene.add.text(block.x, block.y, Math.floor(score).toString()).setVisible(false);\r\n        font_SetFont2CommonContextStyle(scoreTxt);\r\n        depth_SetDepth(scoreTxt, 'txt');\r\n        scoreTxt.setFontSize(TxtTitleSize);\r\n        // score particle emit\r\n        const scoreSfxList = ['scoreBlue', 'scoreGreen', 'scoreBrown'];\r\n        const rndIdx = (0,math/* GetRndInt */.dZ)(0, scoreSfxList.length);\r\n        Efx.animEmitter(block.x, block.y, scoreSfxList[rndIdx]);\r\n        // alpha tw\r\n        scene.tweens.addCounter({\r\n            from: 1, to: 0, duration: 2400,\r\n            onStart: () => {\r\n                scoreTxt.setVisible(true);\r\n                audio.playSfx('scoreSfx');\r\n            },\r\n            onUpdate: (tw, data) => { scoreTxt.setAlpha(data.value); },\r\n            onComplete: () => { scoreTxt.destroy(); }\r\n        });\r\n        this.animScale(scene, scoreTxt);\r\n        this.animPos(scene, scoreTxt, -30);\r\n    },\r\n    animNewBest: function () {\r\n        audio.playSfx('voiceHighScore');\r\n        this.bgParticleList.map(key => this.startEmitter(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY - userSetting/* View.h */.G7.h / 4, key));\r\n        this.startEmitter(0, 0, 'newBestScore');\r\n    },\r\n    stopAll: function () {\r\n        this.list.map(emitter => emitter.stop());\r\n    },\r\n};\r\nconst CreateEfx = (scene) => {\r\n    const blockParticle = scene.add.particles('particleSprite');\r\n    const commonTouchConfig = {\r\n        lifespan: { min: 10, max: 350 },\r\n        angle: { start: 0, end: 360, steps: 64 },\r\n        speed: 200,\r\n        quantity: 64,\r\n        scale: { start: 0.3, end: 0.05 },\r\n        blendMode: 'ADD',\r\n    };\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'touchBlue', frame: 'blue' }, commonTouchConfig));\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'touchGreen', frame: 'green' }, commonTouchConfig));\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'touchBrown', frame: 'yellow' }, commonTouchConfig));\r\n    const commonScoreConfig = {\r\n        lifespan: { min: 100, max: 500 },\r\n        angle: { start: 0, end: 360, steps: 64 },\r\n        speed: 350,\r\n        quantity: 64,\r\n        scale: { start: 0.2, end: 0.1 },\r\n        blendMode: 'ADD',\r\n    };\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'scoreBlue', frame: 'blue' }, commonScoreConfig));\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'scoreGreen', frame: 'green' }, commonScoreConfig));\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'scoreBrown', frame: 'yellow' }, commonScoreConfig));\r\n    // touch input\r\n    const touchSfxList = ['touchBlue', 'touchGreen', 'touchBrown'];\r\n    scenes_input.add('down', (ptr, currentlyOver) => {\r\n        audio.playSfx('touchSfx');\r\n        const rndIdx = (0,math/* GetRndInt */.dZ)(0, touchSfxList.length);\r\n        const emitter = Efx.animEmitter(ptr.x, ptr.y, touchSfxList[rndIdx]);\r\n        // scene.cameras.main.shake(200, 0.01, true);\r\n    });\r\n    // scene.input.off('pointerdown');\r\n    // scene.input.on('pointerdown', (ptr) => {\r\n    //     GameAudio.playSfx('touchSfx');\r\n    //     const rndIdx = GetRndInt(0, touchSfxList.length);\r\n    //     const emitter = Efx.animEmitter(ptr.x, ptr.y, touchSfxList[rndIdx]);\r\n    //     // const scoreSfxList = [ 'scoreBlue', 'scoreGreen', 'scoreBrown' ];\r\n    //     // const rndIdx = GetRndInt(0, scoreSfxList.length);\r\n    //     // const scoreInstance = Efx.animEmitter(ptr.x, ptr.y, scoreSfxList[rndIdx]);\r\n    //     // Efx.animEmitter(ptr.x, ptr.y, 'score');\r\n    //     // console.log('rndIdx: ', rndIdx, touchSfxList[rndIdx]);\r\n    //     // console.log('emitter: ', emitter);\r\n    //     // ptr.event.preventDefault();\r\n    //     chckPtrDefault(ptr);\r\n    // });\r\n    depth_SetDepth(blockParticle, 'particle');\r\n    return Efx;\r\n};\r\nconst CreateGameOverEfx = (scene, img) => {\r\n    Efx.bgParticleList = [\r\n        'diamond2', 'diamond3', 'diamond4',\r\n        'ruby1', 'ruby2', 'ruby3', 'ruby4',\r\n        'key1', 'key2', 'key3', 'key4',\r\n    ];\r\n    Efx.bgParticleList.map((particleName) => {\r\n        const particle = scene.add.particles(particleName);\r\n        const duration = 2000;\r\n        Efx.setConfig(particle, {\r\n            name: particleName,\r\n            angle: { min: 100, max: 440 },\r\n            speed: 350,\r\n            gravityY: -200,\r\n            lifespan: duration,\r\n            quantity: 1,\r\n            frequency: 60,\r\n            scale: { min: 0.1, max: 1 },\r\n            rotate: { onEmit: () => (0,math/* GetRndNum */.hg)(0, 360) }\r\n        });\r\n        depth_SetDepth(particle, 'particle');\r\n    });\r\n    const blockParticle = scene.add.particles('particleSprite');\r\n    const width = img.width * gameover.newBestScoreBgScaleW;\r\n    const height = img.height * gameover.newBestScoreBgScaleH;\r\n    const gameOverEmitZone = new Phaser.Geom.Rectangle(img.x - width / 2, img.y - height / 2, width, height);\r\n    Efx.setConfig(blockParticle, {\r\n        name: 'newBestScore',\r\n        frame: 'blue',\r\n        lifespan: 1000,\r\n        gravityY: 10,\r\n        scale: { start: 0, end: 0.25, ease: 'Quad.easeOut' },\r\n        alpha: { start: 1, end: 0, ease: 'Quad.easeIn' },\r\n        blendMode: 'ADD',\r\n        emitZone: { type: 'random', source: gameOverEmitZone },\r\n    });\r\n    depth_SetDepth(blockParticle, 'highest');\r\n    return Efx;\r\n};\r\n/* harmony default export */ const efx = (Efx);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/gameover.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GameOver = {\r\n    overTxt: null,\r\n    layer: null,\r\n    newBestScoreBgScaleW: 2.4,\r\n    newBestScoreBgScaleH: 3.2,\r\n    newBestScoreBg: null,\r\n    newBestScoreTxt: null,\r\n    newBestScoreNum: null,\r\n    data: {\r\n        title: 'Time Over',\r\n        bonusTime: 0,\r\n        score: 0,\r\n        finalScore: 0\r\n    },\r\n    animCommonOver: function (scene, sndKey, txt) {\r\n        system.setIsGameOver(true);\r\n        audio.playSfx(sndKey);\r\n        const overSnd = scene.sound.get(sndKey);\r\n        const overSndTiming = overSnd.duration / 2 * 1000 - 100;\r\n        scene.tweens.addCounter({\r\n            from: 0, to: overSndTiming, duration: overSndTiming,\r\n            onStart: () => {\r\n                this.overTxt.setVisible(true);\r\n                this.overTxt.setText(txt + '\\n');\r\n            },\r\n            onComplete: () => {\r\n                this.overTxt.setText(txt + '\\nOver');\r\n                setTimeout(() => {\r\n                    this.animShow(scene, {\r\n                        title: txt + ' Over',\r\n                        bonusTime: ui_score.getBonusTimeScore(),\r\n                        score: ui_score.getScore(),\r\n                        finalScore: ui_score.getFinalScore()\r\n                    });\r\n                }, 1000);\r\n            }\r\n        });\r\n    },\r\n    animTimeOver: function (scene) { this.animCommonOver(scene, 'voiceTimeOver', 'Time'); },\r\n    animGameOver: function (scene) { this.animCommonOver(scene, 'voiceGameOver', 'Game'); },\r\n    animShow: function (scene, data) {\r\n        // set default data for performance\r\n        this.show({\r\n            title: data.title,\r\n            bonusTime: 0,\r\n            score: 0,\r\n            finalScore: 0\r\n        });\r\n        // anim to bonus time & score\r\n        const prevBestScore = GetLocalStorageItem(storage, 'best');\r\n        const { score, bonusTime, finalScore } = data;\r\n        ui_score.compareNormalAndBest(finalScore); // test\r\n        const twList = [];\r\n        const sfxCommonTwConfig = {\r\n            // updating score sfx\r\n            from: 0, to: score, duration: 100, repeat: 9,\r\n            onStart: () => { scene.tweens.addCounter(twList.shift()); },\r\n            // onRepeat: () => { GameAudio.playSfx('voiceScore'); }\r\n        };\r\n        const scaleCommonTwConfig = {\r\n            from: 1, to: 1.3, duration: 500, yoyo: true, ease: 'Back.easeInOut',\r\n            onStart: () => { scene.tweens.addCounter(twList.shift()); },\r\n        };\r\n        twList.push(sfxCommonTwConfig, Object.assign(Object.assign({}, scaleCommonTwConfig), { onUpdate: (tw, twData) => {\r\n                this.layer.scoreTxt.setScale(twData.value);\r\n            } }));\r\n        twList.push({\r\n            // update score\r\n            from: 0, to: score, duration: 1000,\r\n            onUpdate: (tw, twData) => {\r\n                this.layer.scoreTxt.setText(twData.value.toFixed(0));\r\n            },\r\n            onComplete: () => {\r\n                setTimeout(() => { scene.tweens.addCounter(twList.shift()); }, 200);\r\n            }\r\n        });\r\n        twList.push(sfxCommonTwConfig, Object.assign(Object.assign({}, scaleCommonTwConfig), { onUpdate: (tw, twData) => {\r\n                this.layer.timeTxt.setScale(twData.value);\r\n            } }));\r\n        twList.push({\r\n            // update bonus time\r\n            from: 0, to: bonusTime, duration: 1000,\r\n            onUpdate: (tw, twData) => {\r\n                this.layer.timeTxt.setText(twData.value.toFixed(0));\r\n            },\r\n            onComplete: () => {\r\n                setTimeout(() => { scene.tweens.addCounter(twList.shift()); }, 200);\r\n            }\r\n        });\r\n        twList.push(sfxCommonTwConfig, Object.assign(Object.assign({}, scaleCommonTwConfig), { onUpdate: (tw, twData) => {\r\n                this.layer.scoreTxt.setScale(twData.value);\r\n            } }));\r\n        twList.push({\r\n            // update score via bonus time (final score)\r\n            from: score, to: finalScore, duration: 1000,\r\n            onUpdate: (tw, twData) => {\r\n                this.layer.scoreTxt.setText(twData.value.toFixed(0));\r\n            },\r\n            onComplete: () => {\r\n                // show new best score performance if score is better than prev best one\r\n                if (finalScore > prevBestScore)\r\n                    this.newBestScoreTxt.show(finalScore);\r\n            }\r\n        });\r\n        scene.tweens.addCounter(twList.shift());\r\n    },\r\n    show: function (data) {\r\n        data && this.setTxtData(data);\r\n        this.layer.setVisible(true);\r\n        return this;\r\n    },\r\n    hide: function () {\r\n        this.layer.setVisible(false);\r\n        this.newBestScoreTxt.hide();\r\n        return this;\r\n    },\r\n    setTxtData: function (data) {\r\n        this.data = data;\r\n        const { title, bonusTime, score, finalScore } = this.data;\r\n        this.layer.titleTxt.setText(title);\r\n        this.layer.timeTxt.setText(bonusTime);\r\n        this.layer.scoreTxt.setText(score);\r\n    },\r\n};\r\nconst InitGameOver = () => {\r\n    GameOver.setTxtData({\r\n        title: 'Time Over',\r\n        bonusTime: 0,\r\n        score: 0,\r\n        finalScore: 0\r\n    });\r\n    GameOver.hide();\r\n    GameOver.overTxt.setVisible(false);\r\n};\r\nconst ContextTxtGapH = userSetting/* View.h */.G7.h / 18;\r\nconst BtnGapW = userSetting/* View.w */.G7.w / 6;\r\nconst CreateGameOver = (scene, themeIdx) => {\r\n    const themeColorList = ['Green', 'Brown', 'Blue'];\r\n    const color = themeColorList[themeIdx];\r\n    GameOver.overTxt = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, '').setVisible(false);\r\n    GameOver.layer = scene.add.container(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY);\r\n    const bg = scene.add.image(0, 0, 'blackScreen');\r\n    bg.setDisplaySize(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n    bg.setInteractive();\r\n    bg.setAlpha(0.4);\r\n    const context = scene.add.image(0, 0, 'panel' + color);\r\n    context.setDisplaySize(userSetting/* View.w */.G7.w - font_ContextMarginW, userSetting/* View.h */.G7.h - font_ContextMarginH);\r\n    const titleBg = scene.add.image(0, -userSetting/* View.h */.G7.h / 4, 'btn' + color).setScale(1.8);\r\n    const title = scene.add.text(titleBg.x, titleBg.y, 'Game Over');\r\n    GameOver.layer.titleTxt = title;\r\n    const bonusTime = scene.add.text(0, -ContextTxtGapH, 'Bonus Time');\r\n    const bonusTimeTxt = scene.add.text(0, bonusTime.y + ContextTxtGapH, '0');\r\n    GameOver.layer.timeTxt = bonusTimeTxt;\r\n    const score = scene.add.text(0, ContextTxtGapH, 'Score');\r\n    const scoreTxt = scene.add.text(0, score.y + ContextTxtGapH, 'Score');\r\n    GameOver.layer.scoreTxt = scoreTxt;\r\n    [GameOver.overTxt, title, bonusTime, bonusTimeTxt, score, scoreTxt].map((ele) => {\r\n        font_SetFont2CommonContextStyle(ele);\r\n    });\r\n    GameOver.overTxt.setFontSize(TxtOverHeadSize);\r\n    title.setFontSize(font_TxtTitleHeadSize);\r\n    const titleBtn = scene.add.image(-BtnGapW, userSetting/* View.h */.G7.h / 4, 'overBtnUp' + color).setInteractive().setScale(2);\r\n    const titleBtnImg = scene.add.image(titleBtn.x, titleBtn.y - 4, 'overBack').setInteractive();\r\n    const titleFuncDown = () => {\r\n        titleBtn.setTexture('overBtnDown' + color);\r\n        titleBtnImg.setPosition(titleBtnImg.x, titleBtnImg.y + 4);\r\n    };\r\n    const titleFuncUp = () => {\r\n        titleBtn.setTexture('overBtnUp' + color);\r\n        titleBtnImg.setPosition(titleBtnImg.x, titleBtnImg.y - 4);\r\n        audio.playSfx('gearAnim');\r\n        game_StopGame(scene);\r\n        title_StartTitle(scene);\r\n    };\r\n    const titleFuncOut = (ptr) => {\r\n        titleBtn.setTexture('overBtnUp' + color);\r\n        if (ptr.isDown)\r\n            titleBtnImg.setPosition(titleBtnImg.x, titleBtnImg.y - 4);\r\n    };\r\n    titleBtn.on('pointerdown', () => { titleFuncDown(); });\r\n    titleBtnImg.on('pointerdown', () => { titleFuncDown(); });\r\n    titleBtn.on('pointerup', () => { titleFuncUp(); });\r\n    titleBtnImg.on('pointerup', () => { titleFuncUp(); });\r\n    titleBtn.on('pointerout', (ptr) => { titleFuncOut(ptr); });\r\n    titleBtnImg.on('pointerout', (ptr) => { titleFuncOut(ptr); });\r\n    const retryBtn = scene.add.image(BtnGapW, titleBtn.y, 'overBtnUp' + color).setInteractive().setScale(2);\r\n    const retryBtnImg = scene.add.image(retryBtn.x, retryBtn.y - 4, 'overRetry').setInteractive();\r\n    const retryFuncDown = () => {\r\n        retryBtn.setTexture('overBtnDown' + color);\r\n        retryBtnImg.setPosition(retryBtnImg.x, retryBtnImg.y + 4);\r\n    };\r\n    const retryFuncUp = () => {\r\n        retryBtn.setTexture('overBtnUp' + color);\r\n        retryBtnImg.setPosition(retryBtnImg.x, retryBtnImg.y - 4);\r\n        audio.playSfx('gearAnim');\r\n        RestartGame(scene);\r\n    };\r\n    const retryFuncOut = (ptr) => {\r\n        retryBtn.setTexture('overBtnUp' + color);\r\n        if (ptr.isDown)\r\n            retryBtnImg.setPosition(retryBtnImg.x, retryBtnImg.y - 4);\r\n    };\r\n    retryBtn.on('pointerdown', () => { retryFuncDown(); });\r\n    retryBtnImg.on('pointerdown', () => { retryFuncDown(); });\r\n    retryBtn.on('pointerup', () => { retryFuncUp(); });\r\n    retryBtnImg.on('pointerup', () => { retryFuncUp(); });\r\n    retryBtn.on('pointerout', (ptr) => { retryFuncOut(ptr); });\r\n    retryBtnImg.on('pointerout', (ptr) => { retryFuncOut(ptr); });\r\n    GameOver.layer.add([\r\n        bg,\r\n        context,\r\n        titleBg, title,\r\n        bonusTime, bonusTimeTxt,\r\n        score, scoreTxt,\r\n        titleBtn, titleBtnImg,\r\n        retryBtn, retryBtnImg,\r\n    ]);\r\n    GameOver.newBestScoreBg = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY - userSetting/* View.h */.G7.h / 4, 'btn' + color);\r\n    GameOver.newBestScoreBg.setScale(GameOver.newBestScoreBgScaleW, GameOver.newBestScoreBgScaleH);\r\n    GameOver.newBestScoreTxt = scene.add.text(GameOver.newBestScoreBg.x, GameOver.newBestScoreBg.y - 6, '      New\\nBest Score!');\r\n    font_SetFont2CommonContextStyle(GameOver.newBestScoreTxt);\r\n    GameOver.newBestScoreTxt.setFontSize(font_TxtTitleHeadSize);\r\n    GameOver.newBestScoreTxt.setFontFamily('Arial Black');\r\n    GameOver.newBestScoreTxt.show = () => {\r\n        GameOver.newBestScoreBg.setScale(0.1 * GameOver.newBestScoreBgScaleW, 0.1 * GameOver.newBestScoreBgScaleH);\r\n        GameOver.newBestScoreTxt.setScale(0.1);\r\n        GameOver.newBestScoreBg.setVisible(true);\r\n        GameOver.newBestScoreTxt.setVisible(true);\r\n        // GameAudio.playSfx('gearAnim');\r\n        scene.tweens.addCounter({\r\n            from: 0.1, to: 1, duration: 800, ease: 'Back.easeInOut',\r\n            onUpdate: (tw, twData) => {\r\n                const value = twData.value;\r\n                GameOver.newBestScoreBg.setScale(value * GameOver.newBestScoreBgScaleW, value * GameOver.newBestScoreBgScaleH);\r\n                GameOver.newBestScoreTxt.setScale(value);\r\n            },\r\n            onComplete: () => {\r\n                efx.animNewBest();\r\n            }\r\n        });\r\n    };\r\n    GameOver.newBestScoreTxt.hide = () => {\r\n        GameOver.newBestScoreBg.setVisible(false);\r\n        GameOver.newBestScoreBg.setScale(0.1 * GameOver.newBestScoreBgScaleW, 0.1 * GameOver.newBestScoreBgScaleH);\r\n        GameOver.newBestScoreTxt.setVisible(false);\r\n        GameOver.newBestScoreTxt.setScale(1);\r\n    };\r\n    GameOver.newBestScoreTxt.hide();\r\n    depth_SetDepth(GameOver.overTxt, 'txt');\r\n    depth_SetDepth(GameOver.layer, 'gameOver');\r\n    depth_SetDepth(GameOver.newBestScoreBg, 'newBest');\r\n    depth_SetDepth(GameOver.newBestScoreTxt, 'newBest');\r\n    InitGameOver();\r\n    return GameOver;\r\n};\r\n/* harmony default export */ const gameover = (GameOver);\r\n\r\n\n// EXTERNAL MODULE: ./src/utils/etc.ts\nvar etc = __webpack_require__(663);\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/shape/circle.ts\n\r\n\r\nconst RndCircleImgTexture = ['blueBall', 'greenBall', 'brownBall'];\r\nconst GetCircleShape = () => {\r\n    const RadiusValue = 60;\r\n    const Radius = userSetting/* View.calcRatio */.G7.calcRatio(RadiusValue);\r\n    let bData = {};\r\n    return {\r\n        hitArea: new Phaser.Geom.Circle(Radius / 2, Radius / 2, Radius),\r\n        bData: bData,\r\n        callback: Phaser.Geom.Circle.Contains,\r\n        score: (RadiusValue ** 2) * 3 / 100,\r\n        bodyConfig: {\r\n            type: 'circle',\r\n            radius: Radius,\r\n            offset: { x: Radius / 2, y: Radius / 2 }\r\n        },\r\n        imgTexture: RndCircleImgTexture[(0,math/* GetRndInt */.dZ)(0, RndCircleImgTexture.length)],\r\n        setImgDisplaySize: function (block) {\r\n            block.getShapeImg().setDisplaySize(Radius * 2, Radius * 2);\r\n            block.getPhysicsCon().setCircle(Radius);\r\n            return block;\r\n        }\r\n    };\r\n};\r\n/* harmony default export */ const circle = (GetCircleShape);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/shape/rectangle.ts\n\r\n\r\nconst RndRectImgTexture = ['blueRect', 'greenRect', 'brownRect'];\r\nconst GetRectangleShape = () => {\r\n    const ShortSideValue = 100;\r\n    const LongSideValue = ShortSideValue + ShortSideValue / 2;\r\n    const ShortSide = userSetting/* View.calcRatio */.G7.calcRatio(ShortSideValue);\r\n    const LongSide = userSetting/* View.calcRatio */.G7.calcRatio(LongSideValue);\r\n    let bData = {};\r\n    return {\r\n        hitArea: new Phaser.Geom.Rectangle(ShortSide / 2, LongSide / 2, ShortSide, LongSide),\r\n        bData: bData,\r\n        callback: Phaser.Geom.Rectangle.Contains,\r\n        score: ShortSideValue * LongSideValue / 100,\r\n        bodyConfig: {\r\n            type: 'rectangle',\r\n            width: ShortSide,\r\n            height: LongSide,\r\n            offset: { x: ShortSide / 2, y: LongSide / 2 }\r\n        },\r\n        imgTexture: RndRectImgTexture[(0,math/* GetRndInt */.dZ)(0, RndRectImgTexture.length)],\r\n        setImgDisplaySize: function (block) {\r\n            block.getShapeImg().setDisplaySize(ShortSide, LongSide);\r\n            block.getPhysicsCon().setSize(ShortSide, LongSide);\r\n            // block.input && block.input.hitArea.setTo(ShortSide, LongSide);\r\n            return block;\r\n        }\r\n    };\r\n};\r\n/* harmony default export */ const rectangle = (GetRectangleShape);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/shape/square.ts\n\r\n\r\nconst RndSquareImgTexture = ['blueSquare', 'greenSquare', 'brownSquare'];\r\nconst GetSquareShape = () => {\r\n    const SideValue = 100;\r\n    const Side = userSetting/* View.calcRatio */.G7.calcRatio(SideValue);\r\n    let bData = {};\r\n    return {\r\n        hitArea: new Phaser.Geom.Rectangle(Side / 2, Side / 2, Side, Side),\r\n        bData: bData,\r\n        callback: Phaser.Geom.Rectangle.Contains,\r\n        score: SideValue * SideValue / 100,\r\n        bodyConfig: {\r\n            type: 'rectangle',\r\n            width: Side,\r\n            height: Side,\r\n            offset: { x: Side / 2, y: Side / 2 }\r\n        },\r\n        imgTexture: RndSquareImgTexture[(0,math/* GetRndInt */.dZ)(0, RndSquareImgTexture.length)],\r\n        setImgDisplaySize: function (block) {\r\n            block.getShapeImg().setDisplaySize(Side, Side);\r\n            block.getPhysicsCon().setSize(Side, Side);\r\n            // block.input && block.input.hitArea.setTo(Side, Side);\r\n            return block;\r\n        }\r\n    };\r\n};\r\n/* harmony default export */ const square = (GetSquareShape);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/shape/index.ts\n\r\n\r\n\r\n\r\nconst ShapeTypeNameList = ['ball', 'rect', 'square',];\r\nconst ShapeTypePropertiesList = [\r\n    circle(), rectangle(), square(),\r\n];\r\nconst CommonPtrEvt = {\r\n    ptrDown: function (block) {\r\n        console.log('common ptr down');\r\n    },\r\n    ptrUp: function (block) {\r\n        console.log('common ptr up');\r\n    },\r\n    ptrOut: function (block) {\r\n        console.log('common ptr out');\r\n    },\r\n};\r\nconst PtrEvtList = ['ptrDown', 'ptrUp', 'drag', 'dragEnd'];\r\nconst ShapeTypeList = ShapeTypeNameList.map((ele, idx) => {\r\n    var _a;\r\n    // setting block data with common evt\r\n    let bData = (_a = ShapeTypePropertiesList[idx]) === null || _a === void 0 ? void 0 : _a.bData;\r\n    if (!bData)\r\n        bData = Object.assign({}, CommonPtrEvt);\r\n    else {\r\n        PtrEvtList.map((ptrEvt) => {\r\n            let tmpPrevFunc = bData[ptrEvt];\r\n            if (tmpPrevFunc) {\r\n                ShapeTypePropertiesList[idx].bData[ptrEvt] = (block) => {\r\n                    CommonPtrEvt[ptrEvt](block);\r\n                    tmpPrevFunc(block);\r\n                };\r\n            }\r\n        });\r\n    }\r\n    return Object.assign({ typeName: ele }, ShapeTypePropertiesList[idx]);\r\n});\r\nconst ShapeSystem = {\r\n    getCertainShape: function (shapeTypeName) {\r\n        return ShapeTypeList.find((ele) => ele.typeName === shapeTypeName);\r\n    },\r\n    getRndShape: function () { return (0,etc/* GetRndEleFromArray */.fB)(ShapeTypeList); },\r\n};\r\nconst SetBlockShape = (block, typeName) => {\r\n    if (!typeName)\r\n        block.setShape(ShapeSystem.getRndShape());\r\n    else\r\n        block.setShape(ShapeSystem.getCertainShape(typeName));\r\n    block.setShapeName(block.getShape().typeName);\r\n    block.getPhysicsCon().setBody(block.getShape().bodyConfig);\r\n    block.getShapeImg().setTexture(block.getShape().imgTexture);\r\n    block.getShape().setImgDisplaySize(block);\r\n    if (block.getShape().bData)\r\n        block.addBlockData(block.getShape().bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const shape = ((/* unused pure expression or super */ null && (ShapeSystem)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/system.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst BlockSystem = {\r\n    // manage block list\r\n    onScreenList: [],\r\n    standbyList: [],\r\n    // static postion of block\r\n    standbyPosX: -500,\r\n    standbyPosY: -500,\r\n    leftX: 0,\r\n    rightX: userSetting/* View.w */.G7.w,\r\n    bottomY: 0,\r\n    spawnY: -200,\r\n    getRndSpawnX: function () { return (0,math/* GetRndInt */.dZ)(this.leftX, this.rightX); },\r\n    getRndAngle: function () { return (0,math/* GetRndInt */.dZ)(0, 360); },\r\n    // game over related properties\r\n    overLineY: 0,\r\n    overCnt: 0,\r\n    overCntMax: 8 * 1000,\r\n    overMaxBlock: 8,\r\n    isGameOver: false,\r\n    getIsGameOver: function () { return this.isGameOver; },\r\n    setIsGameOver: function (isOver) { return this.isGameOver = isOver; },\r\n    // responsive spawning block time\r\n    nextSpawnTime: 0,\r\n    spawnDelayBySecList: [800, 950, 1100, 1250, 1400, 1550],\r\n    spawnDelayBySec: 1800,\r\n};\r\nconst InitBlockSystem = () => {\r\n    RemoveAllBlockOnDisplay();\r\n    BlockSystem.setIsGameOver(false);\r\n    BlockSystem.nextSpawnTime = ui_time.init;\r\n    BlockSystem.spawnDelayBySec = BlockSystem.spawnDelayBySecList[5];\r\n};\r\nconst AddCertainBlock = (scene, typeName) => {\r\n    let block;\r\n    // get block from standy list or create new one\r\n    if (BlockSystem.standbyList.length > 0) {\r\n        block = BlockSystem.standbyList.shift();\r\n        if (!block.scene) { // is block scene removed?\r\n            block.destroy();\r\n            block = new basic(scene);\r\n        }\r\n    }\r\n    else\r\n        block = new basic(scene);\r\n    // set block shape & type, push to on screen list & spawn\r\n    SetBlockShape(block);\r\n    Set2TypeBlock(block, typeName);\r\n    BlockSystem.onScreenList.push(block);\r\n    SpawnBlock(block);\r\n    return block;\r\n};\r\nconst AddObstacleBlock = (block) => {\r\n    block.scene.cameras.main.shake(200, 0.02, true);\r\n    audio.playSfx('spawnObstacleSfx');\r\n    AddCertainBlock(block.scene, 'obstacle');\r\n    return block;\r\n};\r\nconst GetRndBlockType = () => {\r\n    // get random block type via spawn chance\r\n    let distributionArr = [];\r\n    BlockUniqueProperties.map((ele) => {\r\n        // ele.spawnChance = ele.spawnChance / SpawnMaxChance;\r\n        if (ele.spawnChance === 0)\r\n            return;\r\n        for (let i = 0; i < ele.spawnChance; i++) {\r\n            distributionArr.push(ele.typeName);\r\n        }\r\n    });\r\n    return distributionArr[(0,math/* GetRndInt */.dZ)(0, distributionArr.length)];\r\n};\r\nconst AddRndBlock = (scene) => {\r\n    const rndType = GetRndBlockType();\r\n    AddCertainBlock(scene, rndType);\r\n};\r\nconst ClearBlock = (block, score) => {\r\n    if (!block)\r\n        return;\r\n    let blockScore = score ? score : block.getScore();\r\n    ui_score.add(blockScore);\r\n    efx.animScore(block, blockScore);\r\n    const { value, chance } = block.getTimeIncrease();\r\n    if (ui_time.curr > ui_time.last10 && chance > (0,math/* GetRndNum */.hg)(0, 100)) {\r\n        ui_time.increaseTime(value);\r\n        efx.animTimeIncrease(block, chance, value);\r\n    }\r\n    RemoveBlock(block);\r\n};\r\nconst RemoveBlock = (block) => {\r\n    // remove from onScreenList\r\n    BlockSystem.onScreenList = BlockSystem.onScreenList.filter(screenBlock => screenBlock.id !== block.id);\r\n    if (!block.scene) {\r\n        block.destroy();\r\n        return;\r\n    }\r\n    // chck is already in standby list\r\n    if (BlockSystem.standbyList.some(standbyBlock => standbyBlock.id === block.id))\r\n        return;\r\n    DeathBlock(block);\r\n    block.setPosition(BlockSystem.standbyPosX, BlockSystem.standbyPosY);\r\n    BlockSystem.standbyList.push(block);\r\n};\r\nconst RemoveAllBlockOnDisplay = () => {\r\n    if (!BlockSystem.onScreenList)\r\n        return;\r\n    BlockSystem.onScreenList.map((block) => { RemoveBlock(block); });\r\n    BlockSystem.onScreenList = [];\r\n    if (!BlockSystem.standbyList)\r\n        return;\r\n    BlockSystem.standbyList = BlockSystem.standbyList.filter((standbyBlock) => {\r\n        if (!standbyBlock.scene) {\r\n            standbyBlock.destroy();\r\n        }\r\n        else\r\n            return standbyBlock;\r\n    });\r\n};\r\nconst UpdateBlockChckIsGameOver = (scene, time, delta) => {\r\n    // chck every block which is game over border line\r\n    const isOverBorderLine = BlockSystem.onScreenList.some((screenBlock) => {\r\n        if (!screenBlock)\r\n            return false;\r\n        return screenBlock.y < BlockSystem.overLineY;\r\n    });\r\n    // block count is over max & at least one block cross game over border line\r\n    if (isOverBorderLine && BlockSystem.onScreenList.length > BlockSystem.overMaxBlock) {\r\n        BlockSystem.overCnt += delta * ui_time.timeScale;\r\n        // game over condition\r\n        if (BlockSystem.overCnt > BlockSystem.overCntMax) {\r\n            BlockSystem.overCnt = 0;\r\n            BlockSystem.setIsGameOver(true);\r\n            gameover.animGameOver(scene);\r\n        }\r\n        else\r\n            BlockSystem.setIsGameOver(false);\r\n    }\r\n    else {\r\n        // init game over warning properties\r\n        BlockSystem.overCnt = 0;\r\n        BlockSystem.setIsGameOver(false);\r\n    }\r\n};\r\nconst UpdateSpawnBlocks = (scene, delta) => {\r\n    // get game time & timeline idx calculate\r\n    const gameTimeCurr = ui_time.getCurr();\r\n    let timelineIdx = parseInt((gameTimeCurr / 1000 / 10).toString());\r\n    if (timelineIdx < 0)\r\n        timelineIdx = 0;\r\n    if (timelineIdx >= BlockSystem.spawnDelayBySecList.length) {\r\n        timelineIdx = BlockSystem.spawnDelayBySecList.length - 1;\r\n    }\r\n    // adjust responsive spawn block time\r\n    BlockSystem.spawnDelayBySec = BlockSystem.spawnDelayBySecList[timelineIdx];\r\n    // spawn block\r\n    BlockSystem.nextSpawnTime += delta * ui_time.timeScale;\r\n    if (BlockSystem.nextSpawnTime > BlockSystem.spawnDelayBySec) {\r\n        BlockSystem.nextSpawnTime = 0;\r\n        AddRndBlock(scene);\r\n    }\r\n    ;\r\n};\r\nconst UpdateAllBlocks = (scene, time, delta) => {\r\n    if (BlockSystem.getIsGameOver())\r\n        return;\r\n    UpdateBlockChckIsGameOver(scene, time, delta);\r\n    BlockSystem.onScreenList.map(block => UpdateBlock(block, time, delta));\r\n    UpdateSpawnBlocks(scene, delta);\r\n};\r\n/* harmony default export */ const system = (BlockSystem);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/index.ts\nconst ContextLayerMargin = 120;\r\nconst ui_SettingGapContextMargin = 50;\r\nconst ui_SettingGapContextMarginLarger = 70;\r\nconst ui_SettingContextMargin = 40;\r\nconst SettingTopContextMargin = 80;\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/popup.ts\n\r\n\r\n\r\nconst PopUp = {\r\n    isOpen: false,\r\n    bottomLayer: null,\r\n    contextLayer: null,\r\n    exitBtn: null,\r\n    sndList: [],\r\n    show: function (block) {\r\n        this.isOpen = true;\r\n        const bData = block.getBlockData();\r\n        if (bData) {\r\n            bData.isPopupOpen = true;\r\n            block.setBlockData(bData);\r\n            if (bData.popUpContext)\r\n                this.contextLayer = bData.popUpContext;\r\n        }\r\n        this.bottomLayer.setVisible(true);\r\n        this.contextLayer.setVisible(true);\r\n        this.exitBtn.setVisible(true);\r\n    },\r\n    hide: function (block) {\r\n        this.isOpen = false;\r\n        if (block) {\r\n            const bData = block.getBlockData();\r\n            bData.isPopupOpen = false;\r\n            block.setBlockData(bData);\r\n        }\r\n        this.bottomLayer.setVisible(false);\r\n        this.contextLayer.setVisible(false);\r\n        this.exitBtn.setVisible(false);\r\n    }\r\n};\r\nconst popup_InitPopUp = () => {\r\n    PopUp.contextLayer.removeAll();\r\n    PopUp.hide();\r\n};\r\nconst CreatePopUp = (scene) => {\r\n    PopUp.bottomLayer = scene.add.graphics();\r\n    PopUp.bottomLayer.fillStyle(0x000000, 0.4);\r\n    PopUp.bottomLayer.fillRect(0, 0, userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n    PopUp.bottomLayer.setInteractive(new Phaser.Geom.Rectangle(0, 0, userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h), Phaser.Geom.Rectangle.Contains);\r\n    PopUp.bottomLayer.on('pointerup', () => { console.log('touching popup bottom layer'); });\r\n    PopUp.contextLayer = scene.add.container(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY);\r\n    PopUp.exitBtn = scene.add.image(userSetting/* View.w */.G7.w - ContextLayerMargin, ContextLayerMargin, 'exitBtn');\r\n    PopUp.exitBtn.setInteractive();\r\n    PopUp.exitBtn.on('pointerup', () => {\r\n        PopUp.hide();\r\n    });\r\n    [PopUp.bottomLayer, PopUp.contextLayer, PopUp.exitBtn].map((ele) => {\r\n        ele.setVisible(false);\r\n        depth_SetDepth(ele, 'popUp');\r\n    });\r\n};\r\n/* harmony default export */ const popup = ((/* unused pure expression or super */ null && (PopUp)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/startCnt.ts\n\r\n\r\n\r\nconst GameStartCnt = {\r\n    isStart: false,\r\n    cntTxt: null,\r\n    cntNum: 3,\r\n    getIsStart: function () { return this.isStart; },\r\n    setIsStart: function (isStart) { this.isStart = isStart; },\r\n    setTxt: function (value) {\r\n        GameStartCnt.cntTxt.setText(value.toString());\r\n    },\r\n    setVisible: function (visible) { GameStartCnt.cntTxt.setVisible(visible); },\r\n    setAlpha: function (alpha) { GameStartCnt.cntTxt.setAlpha(alpha); },\r\n    animFadeOut: function (scene) {\r\n        scene.tweens.addCounter({\r\n            from: 1, to: 0, duration: 400,\r\n            onUpdate: (tw, data) => {\r\n                this.setAlpha(data.value);\r\n            },\r\n            onComplete: () => {\r\n                this.setAlpha(0);\r\n                this.setVisible(false);\r\n                this.setIsStart(true);\r\n            }\r\n        });\r\n    },\r\n    animCnt: function (scene) {\r\n        let cnt = 3;\r\n        scene.tweens.addCounter({\r\n            from: 0, to: 1000, duration: 1000, repeat: 3, delay: 1000,\r\n            onStart: () => {\r\n                this.setVisible(true);\r\n                this.setTxt(3);\r\n                audio.playSfx('voice3');\r\n            },\r\n            onRepeat: () => {\r\n                cnt--;\r\n                if (cnt === 0) {\r\n                    audio.playSfx('voiceGo');\r\n                    this.setTxt('Go!');\r\n                    return;\r\n                }\r\n                this.setTxt(cnt);\r\n                audio.playSfx('voice' + cnt);\r\n            },\r\n            onComplete: () => {\r\n                this.animFadeOut(scene);\r\n            },\r\n        });\r\n    }\r\n};\r\nconst InitGameStartCnt = () => {\r\n    GameStartCnt.setVisible(false);\r\n    GameStartCnt.setAlpha(1);\r\n    GameStartCnt.setIsStart(false);\r\n    GameStartCnt.cntNum = 3;\r\n    GameStartCnt.setTxt(GameStartCnt.cntNum);\r\n};\r\nconst CreateGameStartCnt = (scene) => {\r\n    GameStartCnt.cntTxt = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, '3');\r\n    font_SetFont2CommonContextStyle(GameStartCnt.cntTxt);\r\n    GameStartCnt.cntTxt.setFontSize(font_TxtTitleHeadSize);\r\n    InitGameStartCnt();\r\n    GameStartCnt.animCnt(scene);\r\n    // scene.events.on(\"start\", () => {\r\n    //     console.log('start scene evt');\r\n    //     GameStartCnt.animCnt(scene);\r\n    // });\r\n};\r\n/* harmony default export */ const startCnt = (GameStartCnt);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/warning.ts\n\r\n\r\n\r\n\r\nconst GameWarning = {\r\n    hasOnceShow: true,\r\n    hasOnceHide: true,\r\n    time: 6 * 1000,\r\n    sign: null,\r\n    progressBar: null,\r\n    progressBarLine: null,\r\n    progressAmount: 0,\r\n    shakeValue: 1,\r\n    updateShakeValue: (remainedOverCnt) => {\r\n        GameWarning.shakeValue = (GameWarning.time - remainedOverCnt) / 1000;\r\n    },\r\n    show: () => {\r\n        GameWarning.progressAmount = 0;\r\n        GameWarning.sign.setVisible(true);\r\n        GameWarning.progressBar.setVisible(true);\r\n        GameWarning.progressBarLine.setVisible(true);\r\n        GameWarning.draw();\r\n        return GameWarning;\r\n    },\r\n    hide: () => {\r\n        GameWarning.sign.setVisible(false);\r\n        GameWarning.progressBar.setVisible(false);\r\n        GameWarning.progressBarLine.setVisible(false);\r\n        GameWarning.clear();\r\n        audio.stopSfx('warningSfx');\r\n    },\r\n    arcDegree: () => {\r\n        const startAngle = 270 + (GameWarning.progressAmount) * (-180); // 270 ~ 90\r\n        const endAngle = -90 + (GameWarning.progressAmount) * 180; // -90 ~ 90\r\n        return { startAngle: startAngle, endAngle: endAngle };\r\n    },\r\n    draw: () => {\r\n        GameWarning.clear();\r\n        const r = GameWarning.sign.width * 4 / 5;\r\n        GameWarning.progressBarLine.lineStyle(6, 0xfbff00, 1);\r\n        GameWarning.progressBarLine.strokeCircle(0, 0, r);\r\n        GameWarning.progressBar.fillStyle(0xfbff00, 0.4);\r\n        GameWarning.progressBar.beginPath();\r\n        GameWarning.progressBar.arc(0, 0, r, Phaser.Math.DegToRad(GameWarning.arcDegree().startAngle), Phaser.Math.DegToRad(GameWarning.arcDegree().endAngle), true, 0.01);\r\n        GameWarning.progressBar.fillPath();\r\n        GameWarning.progressBar.closePath();\r\n        return GameWarning;\r\n    },\r\n    clear: () => {\r\n        GameWarning.progressBar.clear();\r\n        GameWarning.progressBarLine.clear();\r\n    },\r\n    update: (scene) => {\r\n        const remainedOverCnt = system.overCntMax - system.overCnt;\r\n        // hide warning\r\n        if (system.getIsGameOver())\r\n            GameWarning.hasOnceHide = true;\r\n        if (system.getIsGameOver() || remainedOverCnt > GameWarning.time) {\r\n            if (GameWarning.hasOnceHide) {\r\n                GameWarning.hasOnceHide = false;\r\n                GameWarning.hasOnceShow = true;\r\n                GameWarning.hide();\r\n            }\r\n            return;\r\n        }\r\n        // show warning\r\n        if (GameWarning.hasOnceShow) {\r\n            GameWarning.hasOnceShow = false;\r\n            GameWarning.hasOnceHide = true;\r\n            GameWarning.show();\r\n            scene.tweens.addCounter({\r\n                from: 1, to: 0, duration: 500, yoyo: true, repeat: -1,\r\n                onStart: () => { audio.playSfx('warningSfx'); },\r\n                onRepeat: () => { audio.playSfx('warningSfx'); },\r\n                onUpdate: (tw, twData) => {\r\n                    if (GameWarning.hasOnceShow) {\r\n                        GameWarning.sign.setAlpha(1);\r\n                        tw.remove();\r\n                        return;\r\n                    }\r\n                    GameWarning.sign.setAlpha(twData.value);\r\n                }\r\n            });\r\n        }\r\n        GameWarning.progressAmount = (GameWarning.time - remainedOverCnt) / GameWarning.time;\r\n        GameWarning.draw();\r\n        GameWarning.updateShakeValue(remainedOverCnt);\r\n        scene.cameras.main.shake(160, 0.001 * GameWarning.shakeValue, false);\r\n    },\r\n};\r\nconst InitGameWarning = () => {\r\n    GameWarning.hide();\r\n    GameWarning.hasOnceShow = true;\r\n    GameWarning.progressAmount = 0;\r\n    return GameWarning;\r\n};\r\nconst CreateGameWarning = (scene) => {\r\n    GameWarning.sign = scene.add.image(0, 0, 'warningSign');\r\n    GameWarning.sign.setPosition(userSetting/* View.centerX */.G7.centerX, GameWarning.sign.height);\r\n    GameWarning.progressBar = scene.add.graphics();\r\n    GameWarning.progressBar.setAlpha(0.9);\r\n    GameWarning.progressBarLine = scene.add.graphics();\r\n    const barX = GameWarning.sign.x;\r\n    const barY = GameWarning.sign.y;\r\n    GameWarning.progressBar.setPosition(barX, barY);\r\n    GameWarning.progressBarLine.setPosition(barX, barY);\r\n    [GameWarning.progressBar, GameWarning.progressBarLine, GameWarning.sign].map(ele => depth_SetDepth(ele, 'warning'));\r\n    InitGameWarning();\r\n    return GameWarning;\r\n};\r\n/* harmony default export */ const warning = (GameWarning);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/game.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst StartGame = (scene) => {\r\n    scene.scene.remove('game');\r\n    scene.scene.add('game', GameScene);\r\n    scene.scene.launch('game');\r\n};\r\nconst RestartGame = (scene) => {\r\n    efx.stopAll();\r\n    scene.scene.restart();\r\n};\r\nconst game_StopGame = (scene) => {\r\n    if (scene.scene.get('game')) {\r\n        scene.scene.setActive(false, 'game');\r\n        scene.scene.setVisible(false, 'game');\r\n        efx.stopAll();\r\n        audio.stopBgm('gameBgm');\r\n        setTimeout(() => {\r\n            if (!scene.scene.get('game'))\r\n                return;\r\n            scene.scene.remove('game');\r\n        }, 1000);\r\n    }\r\n};\r\nclass GameScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: 'game',\r\n            active: false\r\n        });\r\n        this.themeIdx = 0;\r\n        this.wallGap = userSetting/* View.calcRatio */.G7.calcRatio(45);\r\n        this.wallBottomGap = userSetting/* View.calcRatio */.G7.calcRatio(30);\r\n        this.matterStepForce = 0.08; // apply delta to matter force method\r\n    }\r\n    create() {\r\n        this.createWall();\r\n        this.createBgScene();\r\n        // block system\r\n        InitBlockSystem();\r\n        // input\r\n        CreateInput(this);\r\n        // audio\r\n        CreateGameAudio(this, storage);\r\n        audio.playBgm('gameBgm');\r\n        // ui\r\n        CreateGameStartCnt(this);\r\n        CreateScoreTxt(this);\r\n        CreateGameTimeTxt(this);\r\n        CreatePopUp(this);\r\n        CreateGameWarning(this);\r\n        CreateGameOver(this, this.themeIdx);\r\n        CreateEfx(this);\r\n        CreateGameOverEfx(this, gameover.newBestScoreBg);\r\n        // CreateSetting(this);\r\n        this.createExitBtn();\r\n        // common\r\n        CreateGameCommonUI(this);\r\n        // stop passive loading\r\n        StopPassiveLoading();\r\n        // // debugging\r\n        // const inspectorWidth = 255;\r\n        // PGUInspector(this, { right: window.innerWidth - inspectorWidth, top: 48 });\r\n    }\r\n    update(time, delta) {\r\n        if (!startCnt.getIsStart())\r\n            return;\r\n        ui_time.update(this, delta);\r\n        warning.update(this);\r\n        UpdateInput(delta);\r\n        UpdateAllBlocks(this, time, delta);\r\n        this.updateMatterStep(delta);\r\n        UpdateGameCommonUI(delta);\r\n    }\r\n    createWall() {\r\n        // set matter walls\r\n        const wallThickness = this.wallGap * 5;\r\n        this.matter.world.setBounds(this.wallGap, 0, userSetting/* View.w */.G7.w - (this.wallGap * 2), userSetting/* View.h */.G7.h - this.wallGap, wallThickness, true, true, false, true);\r\n        // create block spawn support wall\r\n        const supportLeft = this.matter.add.rectangle(0, -userSetting/* View.h */.G7.h / 2, this.wallGap, userSetting/* View.h */.G7.h, { isStatic: true });\r\n        const supportRight = this.matter.add.rectangle(userSetting/* View.w */.G7.w, -userSetting/* View.h */.G7.h / 2, this.wallGap, userSetting/* View.h */.G7.h, { isStatic: true });\r\n        const bgTextureList = ['bgGreen', 'bgBrown', 'bgBlue'];\r\n        const btnList = ['btnGreen', 'btnBrown', 'btnBlue'];\r\n        this.themeIdx = (0,math/* GetRndInt */.dZ)(0, bgTextureList.length);\r\n        const leftWall = this.add.tileSprite(0, 0, this.wallGap, userSetting/* View.h */.G7.h, bgTextureList[this.themeIdx]).setOrigin(0);\r\n        const rightWall = this.add.tileSprite(userSetting/* View.w */.G7.w - this.wallGap, 0, this.wallGap, userSetting/* View.h */.G7.h, bgTextureList[this.themeIdx]).setOrigin(0);\r\n        const bottomWall = this.add.image(0, userSetting/* View.h */.G7.h - this.wallGap, btnList[this.themeIdx]).setOrigin(0).setDisplaySize(userSetting/* View.w */.G7.w, this.wallGap);\r\n        [leftWall, rightWall, bottomWall].map(wall => depth_SetDepth(wall, 'wall'));\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: 5000, repeat: -1,\r\n            onUpdate: () => {\r\n                leftWall.tilePositionY += 1;\r\n                rightWall.tilePositionY -= 1;\r\n            }\r\n        });\r\n    }\r\n    createBgScene() {\r\n        const bgColor = (0,math/* GetRndColor */.k8)();\r\n        // select bg color\r\n        this.cameras.main.setBackgroundColor(bgColor);\r\n        // select cloud shape\r\n        this.cloudGroup = this.add.group({\r\n            defaultKey: 'cloud',\r\n            maxSize: 15\r\n        });\r\n        this.spawnCloud();\r\n        // select tree shape\r\n        this.treeGroup = this.add.group({\r\n            defaultKey: 'tree',\r\n            maxSize: 15\r\n        });\r\n        this.spawnTree();\r\n        // select mist\r\n        const bgMistIdx = (0,math/* GetRndInt */.dZ)(1, 4);\r\n        const bgMist = this.add.tileSprite(this.wallGap, userSetting/* View.h */.G7.h - this.wallGap, userSetting/* View.w */.G7.w - (this.wallGap * 2), this.wallGap, 'mist' + bgMistIdx);\r\n        bgMist.setOrigin(0, 1);\r\n        bgMist.setAlpha(0.4);\r\n        depth_SetDepth(bgMist, 'mist');\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: 5000, repeat: -1,\r\n            onUpdate: () => {\r\n                bgMist.tilePositionX += 0.5;\r\n            }\r\n        });\r\n    }\r\n    spawnCloud() {\r\n        const duration = (0,math/* GetRndInt */.dZ)(1200, 3000);\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: duration,\r\n            onUpdate: () => {\r\n                this.cloudGroup.children.iterate((cloud) => {\r\n                    // chck deatline\r\n                    if (cloud.x > userSetting/* View.w */.G7.w)\r\n                        this.cloudGroup.killAndHide(cloud);\r\n                    // move clouds\r\n                    cloud.x += cloud.moveGapX;\r\n                });\r\n            },\r\n            onComplete: () => {\r\n                if (!this)\r\n                    return;\r\n                const cloud = this.cloudGroup.get();\r\n                if (!cloud)\r\n                    return;\r\n                cloud.setTexture('cloud' + (0,math/* GetRndInt */.dZ)(1, 10));\r\n                cloud.setPosition(-cloud.width, (0,math/* GetRndInt */.dZ)(userSetting/* View.centerY */.G7.centerY, userSetting/* View.centerY */.G7.centerY - userSetting/* View.centerY */.G7.centerY / 2));\r\n                cloud.setOrigin(0, 0.5);\r\n                cloud.setActive(true);\r\n                cloud.setAlpha(0.4);\r\n                cloud.moveGapX = (0,math/* GetRndNum */.hg)(0.2, 3);\r\n                depth_SetDepth(cloud, 'cloud');\r\n                cloud.setVisible(true);\r\n                this.spawnCloud();\r\n            }\r\n        });\r\n    }\r\n    spawnTree() {\r\n        const duration = (0,math/* GetRndInt */.dZ)(1200, 3000);\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: duration,\r\n            onUpdate: () => {\r\n                this.treeGroup.children.iterate((tree) => {\r\n                    // chck deatline\r\n                    if (tree.x < -tree.width)\r\n                        this.treeGroup.killAndHide(tree);\r\n                    // move clouds\r\n                    tree.x -= 0.5;\r\n                });\r\n            },\r\n            onComplete: () => {\r\n                if (!this)\r\n                    return;\r\n                const tree = this.treeGroup.get();\r\n                if (!tree)\r\n                    return;\r\n                tree.setTexture('tree' + (0,math/* GetRndInt */.dZ)(1, 36));\r\n                tree.setPosition(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h - this.wallGap);\r\n                tree.setOrigin(0, 1);\r\n                tree.setActive(true);\r\n                tree.setAlpha(0.2);\r\n                depth_SetDepth(tree, 'tree');\r\n                tree.setVisible(true);\r\n                this.spawnTree();\r\n            }\r\n        });\r\n    }\r\n    createExitBtn() {\r\n        const { margin } = ui;\r\n        const doorExitBtn = this.add.image(userSetting/* View.w */.G7.w - margin, margin, 'doorExitBtn');\r\n        CreateUIBtnAnim(this, doorExitBtn);\r\n        SetCommonUIProps(doorExitBtn);\r\n        depth_SetDepth(doorExitBtn, 'highest');\r\n        const popContext = this.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 'Go back to title?');\r\n        font_SetFontStyle(popContext);\r\n        popContext.setFontSize(userSetting/* View.w */.G7.w / 14);\r\n        const doorExitPop = CreateBasicPopUp(this, 'doorExit', {}, {\r\n            exitBtn: {\r\n                isExist: true,\r\n                type: 'yesOrNo',\r\n            },\r\n            evt: {\r\n                show: () => { ui_time.setTimeScale(this, ui_time.showSettingTimeScale); },\r\n                hide: () => { ui_time.setTimeScale(this, ui_time.hideSettingTimeScale); },\r\n                up: (ptr) => {\r\n                    if (!this.scene.isActive('title')) {\r\n                        game_StopGame(this);\r\n                        title_StartTitle(this);\r\n                    }\r\n                },\r\n            },\r\n        });\r\n        doorExitPop.add(popContext);\r\n        doorExitBtn.on('pointerup', () => { doorExitPop.show(); });\r\n    }\r\n    updateMatterStep(delta) { this.matter.world.step(delta); }\r\n}\r\n/* harmony default export */ const game = (GameScene);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/title.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst title_StartTitle = (scene) => {\r\n    scene.scene.remove('title');\r\n    scene.scene.add('title', TitleScene);\r\n    scene.scene.launch('title');\r\n};\r\nconst StopTitle = (scene) => {\r\n    if (scene.scene.get('title')) {\r\n        scene.scene.setActive(false, 'title');\r\n        scene.scene.setVisible(false, 'title');\r\n        setTimeout(() => { scene.scene.remove('title'); }, 1000);\r\n    }\r\n};\r\nclass TitleScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: 'title',\r\n            active: false\r\n        });\r\n        this.titleFontSize = 50;\r\n        this.fontSize = 30;\r\n        this.middleGap = 5;\r\n        this.bgRndPos = { x: 0, y: 0 };\r\n    }\r\n    create() {\r\n        this.createBg();\r\n        this.logoBg = this.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY - font_TxtTitleHeightGap, 'btnBlue').setScale(1.8);\r\n        this.logo = this.add.text(this.logoBg.x, this.logoBg.y, 'BlockPang').setFontSize(this.titleFontSize);\r\n        this.startBg = this.add.image(this.logo.x, this.logo.y + (font_TxtTitleHeightGap * 2), 'titleContextBg');\r\n        this.start = this.add.text(this.startBg.x, this.startBg.y, 'start');\r\n        [this.logo, this.start].map((ele) => {\r\n            font_SetFont2CommonContextStyle(ele);\r\n            ele.setFontSize(TxtTitleSize);\r\n            ele.setColor('black');\r\n        });\r\n        [this.logoBg, this.startBg].map((ele) => {\r\n            ele.setInteractive();\r\n        });\r\n        this.logo.setFontSize(font_TxtTitleHeadSize);\r\n        this.logo.setColor('white');\r\n        this.logoBg.on('pointerup', () => {\r\n            audio.playSfx('earthquake');\r\n            this.animRndAngle([this.logoBg, this.logo]);\r\n            this.cameras.main.shake(250, 0.02, true);\r\n            // todo: drop one random block\r\n        });\r\n        this.startBg.on('pointerup', () => {\r\n            audio.playSfx('gearAnim');\r\n            StopTitle(this);\r\n            StartPassiveLoading(this);\r\n            setTimeout(() => {\r\n                StartGame(this);\r\n            }, 50);\r\n        });\r\n        // CreateChannel(this,\r\n        //     '',\r\n        //     (txt) => {\r\n        //         SetFont2CommonContextStyle(txt);\r\n        //         SetDepth(txt, 'txt');\r\n        //     },\r\n        // );\r\n        CreateGameAudio(this, storage);\r\n        CreateEfx(this);\r\n        // CreateSetting(this);\r\n        CreateGameCommonUI(this);\r\n    }\r\n    update(time, delta) {\r\n        UpdateGameCommonUI(delta);\r\n    }\r\n    createBg() {\r\n        const bgTextureList = ['bgGreen', 'bgBrown', 'bgBlue'];\r\n        let bgTextureRndIdx = (0,math/* GetRndInt */.dZ)(0, bgTextureList.length);\r\n        this.bg = this.add.tileSprite(0, 0, userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h, bgTextureList[bgTextureRndIdx]).setOrigin(0);\r\n        this.createBgRndDirection();\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: 3000, repeat: -1,\r\n            onUpdate: () => {\r\n                this.bg.tilePositionX += this.bgRndPos.x;\r\n                this.bg.tilePositionY += this.bgRndPos.y;\r\n            },\r\n            onRepeat: () => {\r\n                bgTextureRndIdx++;\r\n                if (bgTextureRndIdx >= bgTextureList.length)\r\n                    bgTextureRndIdx = 0;\r\n                this.bg.setTexture(bgTextureList[bgTextureRndIdx]);\r\n                this.createBgRndDirection();\r\n            }\r\n        });\r\n    }\r\n    createBgRndDirection() {\r\n        this.bgRndPos.x = (0,math/* GetRndNum */.hg)(-3, 4);\r\n        this.bgRndPos.y = (0,math/* GetRndNum */.hg)(-3, 4);\r\n    }\r\n    animRndAngle(list) {\r\n        audio.playSfx('gearAnim');\r\n        const rndAngle = (0,math/* GetRndNum */.hg)(-30, 31);\r\n        list.map(ele => ele.setAngle(rndAngle));\r\n        this.cameras.main.shake(50, 0.01, true);\r\n    }\r\n}\r\n/* harmony default export */ const title = (TitleScene);\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/sns/index.ts\n\r\n\r\n\r\n\r\nconst ChannelAdvertise = {\r\n    textureList: ['blackScreen', 'channelBtnDown', 'channelBtnUp', 'channelLogo',],\r\n    youtubeBtnLayer: null,\r\n    youtubePopUpLayer: null,\r\n    youtubeShow: () => {\r\n        ChannelAdvertise.youtubePopUpLayer.setVisible(true);\r\n    },\r\n    youtubeHide: () => {\r\n        ChannelAdvertise.youtubePopUpLayer.setVisible(false);\r\n    },\r\n    blogBtnLayer: null,\r\n    blogPopUpLayer: null,\r\n    blogShow: () => {\r\n        ChannelAdvertise.blogPopUpLayer.setVisible(true);\r\n    },\r\n    blogHide: () => {\r\n        ChannelAdvertise.blogPopUpLayer.setVisible(false);\r\n    },\r\n};\r\nconst GetSnsAssets = (exceptionKeys) => {\r\n    const assetList = [\r\n        // youtube\r\n        { key: 'youtubeLogo', url: CommonSns + 'youtubeLogo.png', type: 'image' },\r\n        { key: 'channelLogo', url: CommonSns + 'channelLogo.jpg', type: 'image' },\r\n        // blog\r\n    ];\r\n    return GetAssetFiles(assetList, exceptionKeys);\r\n};\r\nconst InitChannel = () => {\r\n    ChannelAdvertise.youtubeHide();\r\n};\r\nconst CreateChannel = (scene, videoUrl, commonTextStyle, channelData) => {\r\n    var _a, _b, _c, _d;\r\n    const btnW = (_a = channelData === null || channelData === void 0 ? void 0 : channelData.w) !== null && _a !== void 0 ? _a : 60;\r\n    const btnH = (_b = channelData === null || channelData === void 0 ? void 0 : channelData.h) !== null && _b !== void 0 ? _b : 45;\r\n    const btnScaleTime = 1.1;\r\n    const btnBg = scene.add.image((_c = channelData === null || channelData === void 0 ? void 0 : channelData.x) !== null && _c !== void 0 ? _c : View.centerX, (_d = channelData === null || channelData === void 0 ? void 0 : channelData.y) !== null && _d !== void 0 ? _d : UIProps.exitPosY, 'channelBtnUp');\r\n    const btnLogo = scene.add.image(btnBg.x, btnBg.y, 'youtubeLogo');\r\n    btnLogo.setInteractive();\r\n    btnLogo.on('pointerdown', () => {\r\n        btnLogo.setDisplaySize(btnW * btnScaleTime, btnH * btnScaleTime);\r\n        btnBg.setTexture('channelBtnDown');\r\n    });\r\n    btnLogo.on('pointerup', () => {\r\n        btnLogo.setDisplaySize(btnW, btnH);\r\n        btnBg.setTexture('channelBtnUpss');\r\n        ChannelAdvertise.youtubeShow();\r\n    });\r\n    btnLogo.on('pointerout', () => {\r\n        btnLogo.setDisplaySize(btnW, btnH);\r\n        btnBg.setTexture('channelBtnUp');\r\n    });\r\n    btnLogo.setDisplaySize(btnW, btnH);\r\n    ChannelAdvertise.youtubeBtnLayer = scene.add.layer([\r\n        btnBg, btnLogo\r\n    ]);\r\n    const popUpMargin = 70;\r\n    const channelUrl = 'https://www.youtube.com/channel/UCBJnFgIQ9YORTiz10_Mgy_A';\r\n    const videoThumbnail = `https://i1.ytimg.com/vi/${videoUrl.split('=')[1]}/default.jpg`;\r\n    const popUpBg = scene.add.image(View.centerX, View.centerY, 'blackScreen');\r\n    const popUpTitle = scene.add.text(popUpBg.x, View.h / 8, 'My Youtube');\r\n    const popUpTxtList = [];\r\n    const popUpMadeVideo = scene.add.image(popUpBg.x, View.centerY - popUpMargin, '');\r\n    let popUpMadeVideoWIP;\r\n    popUpMadeVideo.setDisplaySize(popUpMargin, popUpMargin);\r\n    if (!videoUrl) {\r\n        popUpMadeVideoWIP = scene.add.text(popUpBg.x, View.centerY - popUpMargin, '         Sorry!\\nWork In Progress');\r\n        popUpTxtList.push(popUpMadeVideoWIP);\r\n    }\r\n    const popUpMadeVideoTxt = scene.add.text(popUpBg.x, popUpMadeVideo.y + popUpMargin, 'Created video');\r\n    const popUpChannel = scene.add.image(popUpBg.x, popUpMadeVideoTxt.y + popUpMargin, 'channelLogo');\r\n    const popUpChannelTxt = scene.add.text(popUpBg.x, popUpChannel.y + popUpMargin, 'This is my channel');\r\n    const popUpExitGuide = scene.add.text(popUpBg.x, GameFont.guideTxtY, 'press anywhere to exit');\r\n    popUpTxtList.push(popUpTitle, popUpMadeVideoTxt, popUpChannelTxt, popUpExitGuide);\r\n    popUpTxtList.map(txt => SetFontStyle(txt));\r\n    popUpTxtList.map(txt => commonTextStyle(txt));\r\n    popUpTitle.setFontSize(View.w / 12);\r\n    popUpExitGuide.setAlpha(UIProps.alpha);\r\n    popUpBg.setAlpha(0.4);\r\n    popUpBg.setDisplaySize(View.w, View.h);\r\n    popUpBg.setInteractive();\r\n    popUpBg.on('pointerup', () => { ChannelAdvertise.youtubeHide(); });\r\n    const openUrlTab = (url) => { window.open(url); };\r\n    [popUpMadeVideo, popUpMadeVideoTxt].map((video) => {\r\n        video.setInteractive();\r\n        video.on('pointerup', () => { openUrlTab(videoUrl); });\r\n    });\r\n    [popUpChannel, popUpChannelTxt].map((channel) => {\r\n        channel.setInteractive();\r\n        channel.on('pointerup', () => { openUrlTab(channelUrl); });\r\n    });\r\n    [popUpChannel, popUpMadeVideo].map((ele) => {\r\n        ele.setDisplaySize(popUpMargin, popUpMargin);\r\n    });\r\n    ChannelAdvertise.youtubePopUpLayer = scene.add.layer([\r\n        popUpBg, popUpMadeVideo, popUpChannel, ...popUpTxtList\r\n    ]);\r\n    InitChannel();\r\n    return ChannelAdvertise;\r\n};\r\nconst InitBlog = () => {\r\n};\r\nconst CreateBlog = (scene, blogUrl, commonTextStyle, channelData) => {\r\n    InitBlog();\r\n};\r\n/* harmony default export */ const sns = ((/* unused pure expression or super */ null && (ChannelAdvertise)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/blockPang.ts\n// import Phaser from 'phaser';\r\n\r\n\r\n\r\n\r\n\r\n\r\nclass MainScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: 'main',\r\n            active: false,\r\n        });\r\n    }\r\n    init() {\r\n        this.game.scene.add('title', title, false);\r\n        this.game.scene.add('game', game, false);\r\n    }\r\n    create() {\r\n        title_StartTitle(this);\r\n    }\r\n}\r\nconst AssetUrl = 'https://silvertree7622.github.io/webgames/blockPang/assets/';\r\nlet Assets = {\r\n    dynamic: [\r\n        async () => {\r\n            let list = [\r\n                // particle\r\n                {\r\n                    key: 'particleSprite',\r\n                    url: await AssetUrl + 'particleSprite.png',\r\n                    json: await __webpack_require__(442),\r\n                    type: 'atlas'\r\n                },\r\n                { key: 'diamond1', url: await AssetUrl + 'diamond1.png', type: 'image' },\r\n                { key: 'diamond2', url: await AssetUrl + 'diamond2.png', type: 'image' },\r\n                { key: 'diamond3', url: await AssetUrl + 'diamond3.png', type: 'image' },\r\n                { key: 'diamond4', url: await AssetUrl + 'diamond4.png', type: 'image' },\r\n                { key: 'key1', url: await AssetUrl + 'key1.png', type: 'image' },\r\n                { key: 'key2', url: await AssetUrl + 'key2.png', type: 'image' },\r\n                { key: 'key3', url: await AssetUrl + 'key3.png', type: 'image' },\r\n                { key: 'key4', url: await AssetUrl + 'key4.png', type: 'image' },\r\n                { key: 'ruby1', url: await AssetUrl + 'ruby1.png', type: 'image' },\r\n                { key: 'ruby2', url: await AssetUrl + 'ruby2.png', type: 'image' },\r\n                { key: 'ruby3', url: await AssetUrl + 'ruby3.png', type: 'image' },\r\n                { key: 'ruby4', url: await AssetUrl + 'ruby4.png', type: 'image' },\r\n                { key: 'heart', url: await AssetUrl + 'heart.png', type: 'image' },\r\n                // ui\r\n                { key: 'bgBlue', url: await AssetUrl + 'bgBlue.png', type: 'image' },\r\n                { key: 'bgBrown', url: await AssetUrl + 'bgBrown.png', type: 'image' },\r\n                { key: 'bgGreen', url: await AssetUrl + 'bgGreen.png', type: 'image' },\r\n                { key: 'btnBlue', url: await AssetUrl + 'btnBlue.png', type: 'image' },\r\n                { key: 'btnBrown', url: await AssetUrl + 'btnBrown.png', type: 'image' },\r\n                { key: 'btnGreen', url: await AssetUrl + 'btnGreen.png', type: 'image' },\r\n                { key: 'panelGreen', url: await AssetUrl + 'panelGreen.png', type: 'image' },\r\n                { key: 'panelBlue', url: await AssetUrl + 'panelBlue.png', type: 'image' },\r\n                { key: 'panelBrown', url: await AssetUrl + 'panelBrown.png', type: 'image' },\r\n                { key: 'overBtnUpBlue', url: await AssetUrl + 'overBtnUpBlue.png', type: 'image' },\r\n                { key: 'overBtnUpBrown', url: await AssetUrl + 'overBtnUpBrown.png', type: 'image' },\r\n                { key: 'overBtnUpGreen', url: await AssetUrl + 'overBtnUpGreen.png', type: 'image' },\r\n                { key: 'overBtnDownBlue', url: await AssetUrl + 'overBtnDownBlue.png', type: 'image' },\r\n                { key: 'overBtnDownBrown', url: await AssetUrl + 'overBtnDownBrown.png', type: 'image' },\r\n                { key: 'overBtnDownGreen', url: await AssetUrl + 'overBtnDownGreen.png', type: 'image' },\r\n                // { key: 'blackScreen', url: await AssetUrl + 'blackScreen.png', type: 'image' },\r\n                // { key: 'exitBtn', url: await AssetUrl + 'exitBtn.png', type: 'image' },\r\n                { key: 'titleContextBg', url: await AssetUrl + 'titleContextBg.png', type: 'image' },\r\n                { key: 'audioOn', url: await AssetUrl + 'audioOn.png', type: 'image' },\r\n                { key: 'audioOff', url: await AssetUrl + 'audioOff.png', type: 'image' },\r\n                { key: 'musicOn', url: await AssetUrl + 'musicOn.png', type: 'image' },\r\n                { key: 'musicOff', url: await AssetUrl + 'musicOff.png', type: 'image' },\r\n                { key: 'colorBackground', url: await AssetUrl + 'colorBackground.png', type: 'image' },\r\n                { key: 'colorHandle', url: await AssetUrl + 'colorHandle.png', type: 'image' },\r\n                { key: 'colorHandleDown', url: await AssetUrl + 'colorHandleDown.png', type: 'image' },\r\n                { key: 'overBack', url: await AssetUrl + 'overBack.png', type: 'image' },\r\n                { key: 'overRetry', url: await AssetUrl + 'overRetry.png', type: 'image' },\r\n                { key: 'settingBtn', url: await AssetUrl + 'settingBtn.png', type: 'image' },\r\n                { key: 'settingPanel', url: await AssetUrl + 'settingPanel.png', type: 'image' },\r\n                { key: 'settingOverBtnUp', url: await AssetUrl + 'settingOverBtnUp.png', type: 'image' },\r\n                { key: 'settingOverBtnDown', url: await AssetUrl + 'settingOverBtnDown.png', type: 'image' },\r\n                { key: 'btnSettingDown', url: await AssetUrl + 'btnSettingDown.png', type: 'image' },\r\n                { key: 'btnSettingUp', url: await AssetUrl + 'btnSettingUp.png', type: 'image' },\r\n                { key: 'screenSmaller', url: await AssetUrl + 'screenSmaller.png', type: 'image' },\r\n                { key: 'screenLarger', url: await AssetUrl + 'screenLarger.png', type: 'image' },\r\n                { key: 'warningSign', url: await AssetUrl + 'warningSign.png', type: 'image' },\r\n                // ui scene\r\n                { key: 'cloud1', url: await AssetUrl + 'cloud1.png', type: 'image' },\r\n                { key: 'cloud2', url: await AssetUrl + 'cloud2.png', type: 'image' },\r\n                { key: 'cloud3', url: await AssetUrl + 'cloud3.png', type: 'image' },\r\n                { key: 'cloud4', url: await AssetUrl + 'cloud4.png', type: 'image' },\r\n                { key: 'cloud5', url: await AssetUrl + 'cloud5.png', type: 'image' },\r\n                { key: 'cloud6', url: await AssetUrl + 'cloud6.png', type: 'image' },\r\n                { key: 'cloud7', url: await AssetUrl + 'cloud7.png', type: 'image' },\r\n                { key: 'cloud8', url: await AssetUrl + 'cloud8.png', type: 'image' },\r\n                { key: 'cloud9', url: await AssetUrl + 'cloud9.png', type: 'image' },\r\n                { key: 'tree1', url: await AssetUrl + 'tree01.png', type: 'image' },\r\n                { key: 'tree2', url: await AssetUrl + 'tree02.png', type: 'image' },\r\n                { key: 'tree3', url: await AssetUrl + 'tree03.png', type: 'image' },\r\n                { key: 'tree4', url: await AssetUrl + 'tree04.png', type: 'image' },\r\n                { key: 'tree5', url: await AssetUrl + 'tree05.png', type: 'image' },\r\n                { key: 'tree6', url: await AssetUrl + 'tree06.png', type: 'image' },\r\n                { key: 'tree7', url: await AssetUrl + 'tree07.png', type: 'image' },\r\n                { key: 'tree8', url: await AssetUrl + 'tree08.png', type: 'image' },\r\n                { key: 'tree9', url: await AssetUrl + 'tree09.png', type: 'image' },\r\n                { key: 'tree10', url: await AssetUrl + 'tree10.png', type: 'image' },\r\n                { key: 'tree11', url: await AssetUrl + 'tree11.png', type: 'image' },\r\n                { key: 'tree12', url: await AssetUrl + 'tree12.png', type: 'image' },\r\n                { key: 'tree13', url: await AssetUrl + 'tree13.png', type: 'image' },\r\n                { key: 'tree14', url: await AssetUrl + 'tree14.png', type: 'image' },\r\n                { key: 'tree15', url: await AssetUrl + 'tree15.png', type: 'image' },\r\n                { key: 'tree16', url: await AssetUrl + 'tree16.png', type: 'image' },\r\n                { key: 'tree17', url: await AssetUrl + 'tree17.png', type: 'image' },\r\n                { key: 'tree18', url: await AssetUrl + 'tree18.png', type: 'image' },\r\n                { key: 'tree19', url: await AssetUrl + 'tree19.png', type: 'image' },\r\n                { key: 'tree20', url: await AssetUrl + 'tree20.png', type: 'image' },\r\n                { key: 'tree21', url: await AssetUrl + 'tree21.png', type: 'image' },\r\n                { key: 'tree22', url: await AssetUrl + 'tree22.png', type: 'image' },\r\n                { key: 'tree23', url: await AssetUrl + 'tree23.png', type: 'image' },\r\n                { key: 'tree24', url: await AssetUrl + 'tree24.png', type: 'image' },\r\n                { key: 'tree25', url: await AssetUrl + 'tree25.png', type: 'image' },\r\n                { key: 'tree26', url: await AssetUrl + 'tree26.png', type: 'image' },\r\n                { key: 'tree27', url: await AssetUrl + 'tree27.png', type: 'image' },\r\n                { key: 'tree28', url: await AssetUrl + 'tree28.png', type: 'image' },\r\n                { key: 'tree29', url: await AssetUrl + 'tree29.png', type: 'image' },\r\n                { key: 'tree30', url: await AssetUrl + 'tree30.png', type: 'image' },\r\n                { key: 'tree31', url: await AssetUrl + 'tree31.png', type: 'image' },\r\n                { key: 'tree32', url: await AssetUrl + 'tree32.png', type: 'image' },\r\n                { key: 'tree33', url: await AssetUrl + 'tree33.png', type: 'image' },\r\n                { key: 'tree34', url: await AssetUrl + 'tree34.png', type: 'image' },\r\n                { key: 'tree35', url: await AssetUrl + 'tree35.png', type: 'image' },\r\n                { key: 'mist1', url: await AssetUrl + 'mist1.png', type: 'image' },\r\n                { key: 'mist2', url: await AssetUrl + 'mist2.png', type: 'image' },\r\n                { key: 'mist3', url: await AssetUrl + 'mist3.png', type: 'image' },\r\n                { key: 'mist4', url: await AssetUrl + 'mist4.png', type: 'image' },\r\n                // shape\r\n                { key: 'blueBall', url: await AssetUrl + 'blueBall.png', type: 'image' },\r\n                { key: 'greenBall', url: await AssetUrl + 'greenBall.png', type: 'image' },\r\n                { key: 'brownBall', url: await AssetUrl + 'brownBall.png', type: 'image' },\r\n                { key: 'obstacleBall', url: await AssetUrl + 'obstacleBall.png', type: 'image' },\r\n                { key: 'blueRect', url: await AssetUrl + 'blueRect.png', type: 'image' },\r\n                { key: 'greenRect', url: await AssetUrl + 'greenRect.png', type: 'image' },\r\n                { key: 'brownRect', url: await AssetUrl + 'brownRect.png', type: 'image' },\r\n                { key: 'obstacleRect', url: await AssetUrl + 'obstacleRect.png', type: 'image' },\r\n                { key: 'blueSquare', url: await AssetUrl + 'blueSquare.png', type: 'image' },\r\n                { key: 'greenSquare', url: await AssetUrl + 'greenSquare.png', type: 'image' },\r\n                { key: 'brownSquare', url: await AssetUrl + 'brownSquare.png', type: 'image' },\r\n                { key: 'obstacleSquare', url: await AssetUrl + 'obstacleSquare.png', type: 'image' },\r\n                { key: 'lockedRectangle', url: await AssetUrl + 'block_locked_large.png', type: 'image' },\r\n                { key: 'locketSquare', url: await AssetUrl + 'block_locked_square.png', type: 'image' },\r\n                { key: 'key', url: await AssetUrl + 'key.png', type: 'image' },\r\n                // type\r\n                { key: 'arrowLeft', url: await AssetUrl + 'arrowLeft.png', type: 'image' },\r\n                { key: 'locked', url: await AssetUrl + 'locked.png', type: 'image' },\r\n                { key: 'pattern', url: await AssetUrl + 'pattern.png', type: 'image' },\r\n                { key: 'power', url: await AssetUrl + 'power.png', type: 'image' },\r\n                { key: 'random', url: await AssetUrl + 'random.png', type: 'image' },\r\n                { key: 'signal1', url: await AssetUrl + 'signal1.png', type: 'image' },\r\n                { key: 'signal2', url: await AssetUrl + 'signal2.png', type: 'image' },\r\n                { key: 'signal3', url: await AssetUrl + 'signal3.png', type: 'image' },\r\n                { key: 'star', url: await AssetUrl + 'star.png', type: 'image' },\r\n                { key: 'swipeLeft', url: await AssetUrl + 'swipeLeft.png', type: 'image' },\r\n                { key: 'touch', url: await AssetUrl + 'touch.png', type: 'image' },\r\n                { key: 'trashcan', url: await AssetUrl + 'trashcan.png', type: 'image' },\r\n                { key: 'trashcanOpen', url: await AssetUrl + 'trashcanOpen.png', type: 'image' },\r\n                { key: 'unlocked', url: await AssetUrl + 'unlocked.png', type: 'image' },\r\n                // common\r\n                ...GetGameCommonUIAssets(),\r\n                ...GetSnsAssets(),\r\n                ...GetGageAssets('yellow'),\r\n                // audio\r\n                ...GetGameAudioAssets([\r\n                    // voice sfx\r\n                    { key: 'voice1', url: await AssetUrl + '1.mp3', type: 'audio' },\r\n                    { key: 'voice2', url: await AssetUrl + '2.mp3', type: 'audio' },\r\n                    { key: 'voice3', url: await AssetUrl + '3.mp3', type: 'audio' },\r\n                    { key: 'voice4', url: await AssetUrl + '4.mp3', type: 'audio' },\r\n                    { key: 'voice5', url: await AssetUrl + '5.mp3', type: 'audio' },\r\n                    { key: 'voice6', url: await AssetUrl + '6.mp3', type: 'audio' },\r\n                    { key: 'voice7', url: await AssetUrl + '7.mp3', type: 'audio' },\r\n                    { key: 'voice8', url: await AssetUrl + '8.mp3', type: 'audio' },\r\n                    { key: 'voice9', url: await AssetUrl + '9.mp3', type: 'audio' },\r\n                    { key: 'voice10', url: await AssetUrl + '10.mp3', type: 'audio' },\r\n                    { key: 'voiceGo', url: await AssetUrl + 'go.mp3', type: 'audio' },\r\n                    { key: 'voiceHighScore', url: await AssetUrl + 'new_highscore.mp3', type: 'audio' },\r\n                    { key: 'voiceTimeOver', url: await AssetUrl + 'time_over.mp3', type: 'audio' },\r\n                    { key: 'voiceGameOver', url: await AssetUrl + 'game_over.mp3', type: 'audio' },\r\n                    // other sfx\r\n                    { key: 'gearAnim', url: await AssetUrl + 'gearAnim.mp3', type: 'audio' },\r\n                    { key: 'earthquake', url: await AssetUrl + 'earthquake.mp3', type: 'audio' },\r\n                    { key: 'touchSfx', url: await AssetUrl + 'touchSfx.mp3', type: 'audio' },\r\n                    { key: 'loadingBlockDone', url: await AssetUrl + 'loadingBlockDone.mp3', type: 'audio' },\r\n                    { key: 'loadingBlockOnProcess', url: await AssetUrl + 'loadingBlockOnProcess.mp3', type: 'audio' },\r\n                    { key: 'powerBlockOn', url: await AssetUrl + 'powerBlockOn.mp3', type: 'audio' },\r\n                    { key: 'powerBlockOff', url: await AssetUrl + 'powerBlockOff.mp3', type: 'audio' },\r\n                    { key: 'spawnObstacleSfx', url: await AssetUrl + 'spawnObstacleSfx.mp3', type: 'audio' },\r\n                    { key: 'timeIncreaseSfx', url: await AssetUrl + 'timeIncreaseSfx.mp3', type: 'audio' },\r\n                    { key: 'scoreSfx', url: await AssetUrl + 'scoreSfx.mp3', type: 'audio' },\r\n                    { key: 'warningSfx', url: await AssetUrl + 'warningSfx.mp3', type: 'audio' },\r\n                ], [\r\n                    { key: 'gameBgm', url: await AssetUrl + 'blockpangbgm.mp3', type: 'audio' },\r\n                ]),\r\n            ];\r\n            return list;\r\n        }\r\n    ],\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiNTMwLmpzIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9zY2VuZXMvcGFzc2l2ZUxvYWRpbmcudHM/MGY1OSIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL291dHNvdXJjaW5nL0Jsb2NrUGFuZy9zY2VuZXMvZm9udC9pbmRleC50cz8zMDc2Iiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy9kZXB0aC9pbmRleC50cz8zMjM4Iiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy9ibG9jay9iYXNpYy50cz8zODkwIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy9ibG9jay90eXBlL2FkLnRzPzFiZmYiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy91dGlscy9zdG9yYWdlLnRzPzc5OWQiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9zY2VuZXMvYXNzZXRVdGlscy50cz8yNDk5Iiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvc2NlbmVzL2F1ZGlvL2luZGV4LnRzPzYzNTEiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL2lucHV0L2luZGV4LnRzPzExYTgiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL2Jsb2NrL3R5cGUvcG93ZXIudHM/NWYyNSIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL291dHNvdXJjaW5nL0Jsb2NrUGFuZy9zY2VuZXMvYmxvY2svdHlwZS9sb2FkaW5nLnRzP2E0OTQiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL2Jsb2NrL3R5cGUvdG91Y2gudHM/ZTMzZCIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL291dHNvdXJjaW5nL0Jsb2NrUGFuZy9zY2VuZXMvYmxvY2svdHlwZS9vYnN0YWNsZS50cz9hOTQ0Iiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy9ibG9jay90eXBlL2luZGV4LnRzPzgxYTYiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc3RvcmFnZS9pbmRleC50cz8xZWNhIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvc2NlbmVzL3VpL2ZvbnQvaW5kZXgudHM/NjkwZSIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL3NjZW5lcy91aS9nYWdlL2luZGV4LnRzPzFlOTgiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9zY2VuZXMvZ2VzdHVyZS9pbmRleC50cz80NjZhIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvc2NlbmVzL2lucHV0L2luZGV4LnRzPzY0YTYiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9zY2VuZXMvZGVwdGgvaW5kZXgudHM/MTJiZSIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL3NjZW5lcy91aS9wb3BVcC9leGl0LnRzP2NkZDEiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9zY2VuZXMvdWkvcG9wVXAvaW5kZXgudHM/YTlhOSIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL3NjZW5lcy91aS9hdWRpby9pbmRleC50cz81ZDhhIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvc2NlbmVzL3VpL3Njcm9sbC9pbmRleC50cz8zYTIxIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvc2NlbmVzL3VpL2Z1bGxTY3JlZW4vaW5kZXgudHM/OGZlMiIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL3NjZW5lcy91aS9pbmRleC50cz8wNDQ4Iiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy91aS9zZXR0aW5nLnRzPzE5MWIiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL3VpL3RpbWUudHM/NGVkYyIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL291dHNvdXJjaW5nL0Jsb2NrUGFuZy9zY2VuZXMvdWkvc2NvcmUudHM/ZmEzYiIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL291dHNvdXJjaW5nL0Jsb2NrUGFuZy9zY2VuZXMvZWZ4L2luZGV4LnRzPzllZGIiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL3VpL2dhbWVvdmVyLnRzPzkwYjgiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL2Jsb2NrL3NoYXBlL2NpcmNsZS50cz81MzkxIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy9ibG9jay9zaGFwZS9yZWN0YW5nbGUudHM/MDBhZiIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL291dHNvdXJjaW5nL0Jsb2NrUGFuZy9zY2VuZXMvYmxvY2svc2hhcGUvc3F1YXJlLnRzPzMyMWIiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL2Jsb2NrL3NoYXBlL2luZGV4LnRzPzQ0NDMiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL2Jsb2NrL3N5c3RlbS50cz9mMGMxIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy91aS9pbmRleC50cz9lNDliIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy91aS9wb3B1cC50cz9kMmEyIiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy91aS9zdGFydENudC50cz9kNWE0Iiwid2VicGFjazovL3BsYXlhYmxlX2FkX3Rlc3QvLi9zcmMvb3V0c291cmNpbmcvQmxvY2tQYW5nL3NjZW5lcy91aS93YXJuaW5nLnRzPzkzNWUiLCJ3ZWJwYWNrOi8vcGxheWFibGVfYWRfdGVzdC8uL3NyYy9vdXRzb3VyY2luZy9CbG9ja1Bhbmcvc2NlbmVzL2dhbWUudHM/NGZiZiIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL291dHNvdXJjaW5nL0Jsb2NrUGFuZy9zY2VuZXMvdGl0bGUudHM/Y2YzYyIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL3NjZW5lcy91aS9zbnMvaW5kZXgudHM/ZWFlMSIsIndlYnBhY2s6Ly9wbGF5YWJsZV9hZF90ZXN0Ly4vc3JjL291dHNvdXJjaW5nL0Jsb2NrUGFuZy9ibG9ja1BhbmcudHM/MjFlNyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnQHNyYy91c2VyU2V0dGluZyc7XHJcbmNvbnN0IFBhc3NpdmVMb2FkaW5nID0ge1xyXG4gICAgc2NlbmU6IG51bGwsXHJcbiAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgb3B0aW9uOiB7fSxcclxufTtcclxuY29uc3QgU3RhcnRQYXNzaXZlTG9hZGluZyA9IChzY2VuZSwgb3B0aW9uKSA9PiB7XHJcbiAgICBQYXNzaXZlTG9hZGluZy5pc0xvYWRpbmcgPSB0cnVlO1xyXG4gICAgLy8gb3B0aW9uXHJcbiAgICBpZiAob3B0aW9uKVxyXG4gICAgICAgIFBhc3NpdmVMb2FkaW5nLm9wdGlvbiA9IE9iamVjdC5hc3NpZ24oe30sIG9wdGlvbik7XHJcbiAgICAvLyBjaGNrIGlzIGV4aXN0IGlmIG5vdCB0aGVuIGFkZCB0byBzY2VuZVxyXG4gICAgY29uc3QgcGFzc2l2ZUxvYWRpbmdJbnN0YW5jZSA9IHNjZW5lLnNjZW5lLmdldCgncGFzc2l2ZUxvYWRpbmcnKTtcclxuICAgIGlmICghcGFzc2l2ZUxvYWRpbmdJbnN0YW5jZSlcclxuICAgICAgICBzY2VuZS5nYW1lLnNjZW5lLmFkZCgncGFzc2l2ZUxvYWRpbmcnLCBQYXNzaXZlTG9hZGluZ1NjZW5lLCBmYWxzZSk7XHJcbiAgICAvLyBsYXVuY2ggbG9hZGluZyBzY2VuZVxyXG4gICAgc2NlbmUuc2NlbmUubGF1bmNoKCdwYXNzaXZlTG9hZGluZycpO1xyXG4gICAgUGFzc2l2ZUxvYWRpbmcuc2NlbmUgPSBzY2VuZS5zY2VuZS5nZXQoJ3Bhc3NpdmVMb2FkaW5nJyk7XHJcbn07XHJcbmNvbnN0IFN0b3BQYXNzaXZlTG9hZGluZyA9IGFzeW5jICgpID0+IHtcclxuICAgIGlmICghUGFzc2l2ZUxvYWRpbmcuc2NlbmUgfHwgIVBhc3NpdmVMb2FkaW5nLmlzTG9hZGluZykge1xyXG4gICAgICAgIGNvbnNvbGUud2FybigncGFzc2l2ZSBsb2FkaW5nIGlzIG5vdCBleGlzdDonLCBQYXNzaXZlTG9hZGluZy5zY2VuZSk7XHJcbiAgICAgICAgUGFzc2l2ZUxvYWRpbmcuc2NlbmUgPSBudWxsO1xyXG4gICAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmIChQYXNzaXZlTG9hZGluZy5vcHRpb24pIHtcclxuICAgICAgICBQYXNzaXZlTG9hZGluZy5vcHRpb24uZmluaXNoRXZ0ICYmIFBhc3NpdmVMb2FkaW5nLm9wdGlvbi5maW5pc2hFdnQoUGFzc2l2ZUxvYWRpbmcuc2NlbmUpO1xyXG4gICAgfVxyXG4gICAgUGFzc2l2ZUxvYWRpbmcuaXNMb2FkaW5nID0gZmFsc2U7XHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXMgPT4gcmVzKFBhc3NpdmVMb2FkaW5nLnNjZW5lLnNjZW5lLnN0b3AoJ3Bhc3NpdmVMb2FkaW5nJykpKTtcclxuICAgIFBhc3NpdmVMb2FkaW5nLnNjZW5lLmxvYWRpbmdFbmRTZWMgPSBhd2FpdCBuZXcgUHJvbWlzZShyZXMgPT4gcmVzKHBlcmZvcm1hbmNlLm5vdygpKSk7XHJcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzKSA9PiB7XHJcbiAgICAgICAgcmVzKGNvbnNvbGUubG9nKGAlYyBQYXNzaXZlIExvYWRpbmcgVGltZTogJHsoKFBhc3NpdmVMb2FkaW5nLnNjZW5lLmxvYWRpbmdFbmRTZWMgLSBQYXNzaXZlTG9hZGluZy5zY2VuZS5sb2FkaW5nU3RhcnRTZWMpIC8gMTAwMCkudG9GaXhlZCg0KX0gc2VjIGAsICdjb2xvcjogYmxhY2s7IGJhY2tncm91bmQ6IHdoaXRlOyBmb25XZWlnaHQ6IGJvbGQ7JykpO1xyXG4gICAgfSk7XHJcbn07XHJcbmNsYXNzIFBhc3NpdmVMb2FkaW5nU2NlbmUgZXh0ZW5kcyBQaGFzZXIuU2NlbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBrZXk6ICdwYXNzaXZlTG9hZGluZycsXHJcbiAgICAgICAgICAgIGFjdGl2ZTogZmFsc2VcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLmxvYWRpbmdTdGFydFNlYyA9IDA7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nRW5kU2VjID0gMDtcclxuICAgICAgICB0aGlzLnBvaW50Rmlyc3QgPSAwO1xyXG4gICAgICAgIHRoaXMucG9pbnRTZWNvbmQgPSAwO1xyXG4gICAgICAgIHRoaXMuZ2FwRmlyc3QgPSAwLjI7XHJcbiAgICAgICAgdGhpcy5nYXBTZWNvbmQgPSAwLjQ7XHJcbiAgICB9XHJcbiAgICBpbml0KCkge1xyXG4gICAgICAgIHRoaXMubG9hZGluZ1N0YXJ0U2VjID0gcGVyZm9ybWFuY2Uubm93KCk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nR3JhcGhpY3MgPSB0aGlzLmFkZC5ncmFwaGljcygpO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlKHRpbWUsIGRlbHRhKSB7XHJcbiAgICAgICAgdGhpcy51cGRhdGVSb3RhdGVMb2dvKGRlbHRhKTtcclxuICAgIH1cclxuICAgIHVwZGF0ZVJvdGF0ZUxvZ28oZGVsdGEpIHtcclxuICAgICAgICB0aGlzLnBvaW50Rmlyc3QgPSAodGhpcy5wb2ludEZpcnN0ICsgKGRlbHRhICogdGhpcy5nYXBGaXJzdCkpICUgMzYwO1xyXG4gICAgICAgIHRoaXMucG9pbnRTZWNvbmQgPSAodGhpcy5wb2ludFNlY29uZCArIChkZWx0YSAqIHRoaXMuZ2FwU2Vjb25kKSkgJSAzNjA7XHJcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ3RoaXMucG9pbnRGaXJzdCwgdGhpcy5wb2ludFNlY29uZDogJywgdGhpcy5wb2ludEZpcnN0LCB0aGlzLnBvaW50U2Vjb25kKTtcclxuICAgICAgICAvLyB0aGlzLnBvaW50Rmlyc3QgPSAodGhpcy5wb2ludEZpcnN0ICsgKGRlbHRhICogdGhpcy5nYXBGaXJzdCkpICUgMzYwO1xyXG4gICAgICAgIC8vIHRoaXMucG9pbnRTZWNvbmQgPSAodGhpcy5wb2ludFNlY29uZCArIChkZWx0YSAqIHRoaXMuZ2FwU2Vjb25kKSk7XHJcbiAgICAgICAgLy8gbGV0IHNob3dDbG9ja3dpc2UgPSB0aGlzLnBvaW50Rmlyc3QgPiB0aGlzLnBvaW50U2Vjb25kID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgIC8vIGxldCBzdGFydEFuZ2xlID0gdGhpcy5wb2ludEZpcnN0ID4gdGhpcy5wb2ludFNlY29uZCA/IHRoaXMucG9pbnRGaXJzdCA6IHRoaXMucG9pbnRTZWNvbmQ7XHJcbiAgICAgICAgLy8gbGV0IGVuZEFuZ2xlID0gdGhpcy5wb2ludEZpcnN0ID4gdGhpcy5wb2ludFNlY29uZCA/IHRoaXMucG9pbnRTZWNvbmQgOiB0aGlzLnBvaW50Rmlyc3Q7XHJcbiAgICAgICAgdGhpcy5sb2FkaW5nR3JhcGhpY3MuY2xlYXIoKTtcclxuICAgICAgICAvLyAgV2l0aG91dCB0aGlzIHRoZSBhcmMgd2lsbCBhcHBlYXIgY2xvc2VkIHdoZW4gc3Ryb2tlZFxyXG4gICAgICAgIHRoaXMubG9hZGluZ0dyYXBoaWNzLmxpbmVTdHlsZSgxMCwgMHhmZjAwZmYsIDIpO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ0dyYXBoaWNzLmJlZ2luUGF0aCgpO1xyXG4gICAgICAgIHRoaXMubG9hZGluZ0dyYXBoaWNzLmFyYyhWaWV3LmNlbnRlclgsIFZpZXcuY2VudGVyWSwgNjAsIFBoYXNlci5NYXRoLkRlZ1RvUmFkKHRoaXMucG9pbnRGaXJzdCksIFBoYXNlci5NYXRoLkRlZ1RvUmFkKHRoaXMucG9pbnRTZWNvbmQpLCB0cnVlKTtcclxuICAgICAgICB0aGlzLmxvYWRpbmdHcmFwaGljcy5zdHJva2VQYXRoKCk7XHJcbiAgICB9XHJcbn1cclxuZXhwb3J0IGRlZmF1bHQgUGFzc2l2ZUxvYWRpbmc7XHJcbmV4cG9ydCB7IFN0YXJ0UGFzc2l2ZUxvYWRpbmcsIFN0b3BQYXNzaXZlTG9hZGluZyB9O1xyXG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBzcmMvdXNlclNldHRpbmdcIjtcclxuY29uc3QgVHh0VGl0bGVIZWFkU2l6ZSA9IDUwO1xyXG5jb25zdCBUeHRUaXRsZVNpemUgPSAzMDtcclxuY29uc3QgVHh0VGl0bGVIZWlnaHRHYXAgPSA2MDtcclxuY29uc3QgVHh0T3ZlckhlYWRTaXplID0gVmlldy53IC8gNDtcclxuY29uc3QgVHh0TWFyZ2luID0gMjY7XHJcbmNvbnN0IFR4dFBhZGRpbmcgPSA4O1xyXG5jb25zdCBUeHRBbHBoYSA9IDAuOTtcclxuY29uc3QgVHh0U2l6ZSA9IDIwO1xyXG5jb25zdCBUeHRGYW1pbHkgPSAnQXJpYWwgQmxhY2snO1xyXG5jb25zdCBUeHRCYWNrZ3JvdW5kQ29sb3IgPSAnIzI0MjQyNCc7XHJcbmNvbnN0IENvbnRleHRNYXJnaW5XID0gVmlldy53IC8gMTI7XHJcbmNvbnN0IENvbnRleHRNYXJnaW5IID0gVmlldy5oIC8gMTI7XHJcbmNvbnN0IFNldEZvbnQyQ29tbW9uQ29udGV4dFN0eWxlID0gKHRleHQpID0+IHtcclxuICAgIHRleHQuc2V0T3JpZ2luKDAuNSwgMC41KTtcclxuICAgIHRleHQuc2V0Rm9udFNpemUoVHh0U2l6ZSk7XHJcbiAgICB0ZXh0LnNldEZvbnRGYW1pbHkoVHh0RmFtaWx5KTtcclxuICAgIHJldHVybiB0ZXh0O1xyXG59O1xyXG5leHBvcnQgeyBUeHRUaXRsZUhlYWRTaXplLCBUeHRUaXRsZVNpemUsIFR4dFRpdGxlSGVpZ2h0R2FwLCBUeHRPdmVySGVhZFNpemUsIFR4dE1hcmdpbiwgVHh0UGFkZGluZywgVHh0QWxwaGEsIFR4dFNpemUsIFR4dEZhbWlseSwgVHh0QmFja2dyb3VuZENvbG9yLCBDb250ZXh0TWFyZ2luVywgQ29udGV4dE1hcmdpbkgsIFNldEZvbnQyQ29tbW9uQ29udGV4dFN0eWxlIH07XHJcbiIsImNvbnN0IERlcHRoID0ge1xyXG4gICAgdHJlZTogOTAsXHJcbiAgICBibG9jazogMTAwLFxyXG4gICAgY2xvdWQ6IDEyMCxcclxuICAgIG1pc3Q6IDEyMCxcclxuICAgIHdhbGw6IDE0MCxcclxuICAgIHR4dDogMTUwLFxyXG4gICAgcG9wVXA6IDQwMCxcclxuICAgIHNldHRpbmc6IDUwMCxcclxuICAgIHdhcm5pbmc6IDYwMCxcclxuICAgIGdhbWVPdmVyOiAxMDAwLFxyXG4gICAgcGFydGljbGU6IDExMDAsXHJcbiAgICBuZXdCZXN0OiAxMjAwLFxyXG4gICAgaGlnaGVzdDogMTUwMCxcclxuICAgIGZ1bGxTY3JlZW46IDE2MDAsXHJcbn07XHJcbmNvbnN0IFNldERlcHRoID0gKHRhcmdldE9iaiwgdHlwZSkgPT4ge1xyXG4gICAgaWYgKCFEZXB0aFt0eXBlXSkge1xyXG4gICAgICAgIGNvbnNvbGUud2FybignU2V0RGVwdGg6IHR5cGUgaXMgbm90IGZvdW5kIGluIHRoZSBkZXB0aCBsaXN0OicsIHRhcmdldE9iaiwgdHlwZSk7XHJcbiAgICAgICAgY29uc29sZS5sb2coJ3RhcmdldE9iaiwgdHlwZTogJywgdGFyZ2V0T2JqLCB0eXBlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBpZiAodGFyZ2V0T2JqLnNldERlcHRoKVxyXG4gICAgICAgIHRhcmdldE9iai5zZXREZXB0aChEZXB0aFt0eXBlXSk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgY29uc29sZS53YXJuKCdTZXREZXB0aDogdGFyZ2V0T2JqIGlzIG5vdCBQaGFzZXIuR2FtZU9iamVjdHMnKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgRGVwdGg7XHJcbmV4cG9ydCB7IFNldERlcHRoIH07XHJcbiIsIi8vIGltcG9ydCBQaGFzZXIgZnJvbSAncGhhc2VyJztcclxuaW1wb3J0IEJsb2NrU3lzdGVtIGZyb20gJy4vc3lzdGVtJztcclxuaW1wb3J0IHsgU2V0Rm9udDJDb21tb25Db250ZXh0U3R5bGUgfSBmcm9tICcuLi9mb250JztcclxuaW1wb3J0IHsgU2V0RGVwdGggfSBmcm9tICcuLi9kZXB0aCc7XHJcbmNsYXNzIEJhc2ljQmxvY2sgZXh0ZW5kcyBQaGFzZXIuR2FtZU9iamVjdHMuQ29udGFpbmVyIHtcclxuICAgIC8vIHB1YmxpYyB0ZXN0T2JqO1xyXG4gICAgY29uc3RydWN0b3Ioc2NlbmUpIHtcclxuICAgICAgICBzdXBlcihzY2VuZSwgMCwgMCk7XHJcbiAgICAgICAgdGhpcy5pc0V2dENyZWF0ZWQgPSBmYWxzZTtcclxuICAgICAgICB0aGlzLnR5cGVOYW1lID0gJyc7XHJcbiAgICAgICAgdGhpcy5zcGF3bkNoYW5jZSA9IDA7XHJcbiAgICAgICAgdGhpcy5zY29yZSA9IDA7XHJcbiAgICAgICAgdGhpcy5iRGF0YSA9IHt9O1xyXG4gICAgICAgIHRoaXMuaXNPblNjcmVlbiA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuaW5pdFBycG9lcnRpZXMoKTtcclxuICAgICAgICB0aGlzLmluaXRDaGlsZHJlbihzY2VuZSk7XHJcbiAgICAgICAgdGhpcy5pbml0UGh5c2ljcyhzY2VuZSk7XHJcbiAgICAgICAgU2V0RGVwdGgodGhpcywgJ2Jsb2NrJyk7XHJcbiAgICAgICAgc2NlbmUuYWRkLmV4aXN0aW5nKHRoaXMpO1xyXG4gICAgfVxyXG4gICAgaW5pdFBycG9lcnRpZXMoKSB7XHJcbiAgICAgICAgdGhpcy5pZCA9IGAke25ldyBEYXRlKCkuZ2V0VGltZSgpfS0ke1BoYXNlci5NYXRoLlJORC51dWlkKCl9YDtcclxuICAgIH1cclxuICAgIGluaXRDaGlsZHJlbihzY2VuZSkge1xyXG4gICAgICAgIHRoaXMuc2hhcGVJbWcgPSBzY2VuZS5hZGQuaW1hZ2UoMCwgMCwgJ2JhbGwnKTtcclxuICAgICAgICB0aGlzLnR5cGVUeHQgPSBzY2VuZS5hZGQudGV4dCgwLCAwLCAnJyk7XHJcbiAgICAgICAgdGhpcy50eXBlSW1nID0gc2NlbmUuYWRkLmltYWdlKDAsIDAsICcnKTtcclxuICAgICAgICBTZXRGb250MkNvbW1vbkNvbnRleHRTdHlsZSh0aGlzLnR5cGVUeHQpO1xyXG4gICAgICAgIHRoaXMuaW5pdFR5cGVUeHQoKTtcclxuICAgICAgICB0aGlzLmFkZChbdGhpcy5zaGFwZUltZywgdGhpcy50eXBlVHh0LCB0aGlzLnR5cGVJbWddKTtcclxuICAgICAgICAvLyB0aGlzLnRlc3RPYmogPSBzY2VuZS5tYXR0ZXIuYWRkLmltYWdlKFZpZXcuY2VudGVyWCwgMCwgJ2JhbGwnKTtcclxuICAgICAgICAvLyB0aGlzLnRlc3RPYmouc2V0Q2lyY2xlKDQwLCA0MCk7XHJcbiAgICAgICAgLy8gdGhpcy50ZXN0T2JqLnNldEJvdW5jZSgxKTtcclxuICAgICAgICAvLyBjb25zb2xlLmxvZygndGhpcy50ZXN0T2JqOiAnLCB0aGlzLnRlc3RPYmopO1xyXG4gICAgfVxyXG4gICAgaW5pdFBoeXNpY3Moc2NlbmUpIHtcclxuICAgICAgICAvLyBudW1iZXIgaXMgbWVhbmluZ2xlc3MganVzdCBkZWZhdWx0IHZhbHVlXHJcbiAgICAgICAgLy8gZm9yIGFkZCBjb250YWluZXIgdG8gbWF0dGVyIGdhbWUgb2JqZWN0XHJcbiAgICAgICAgdGhpcy5zZXRTaXplKDEwMCwgMTAwKTtcclxuICAgICAgICAvLyBhZGQgdG8gbWF0dGVyIGdhbWUgb2JqZWN0XHJcbiAgICAgICAgdGhpcy5waHlzaWNzQ29uID0gc2NlbmUubWF0dGVyLmFkZC5nYW1lT2JqZWN0KHRoaXMpO1xyXG4gICAgICAgIHRoaXMucGh5c2ljc0Nvbi5zZXRGcmljdGlvbigwLjAwNSk7XHJcbiAgICAgICAgdGhpcy5waHlzaWNzQ29uLnNldEJvdW5jZSgxKTtcclxuICAgICAgICB0aGlzLnBoeXNpY3NDb24uc2V0U2Vuc29yKHRydWUpO1xyXG4gICAgfVxyXG4gICAgZ2V0Qm9keSgpIHsgcmV0dXJuIHRoaXMuYm9keTsgfVxyXG4gICAgZ2V0U2hhcGUoKSB7IHJldHVybiB0aGlzLnNoYXBlOyB9XHJcbiAgICBhZGRTaGFwZShzaGFwZSkgeyB0aGlzLnNoYXBlID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLnNoYXBlKSwgc2hhcGUpOyByZXR1cm4gdGhpczsgfVxyXG4gICAgc2V0U2hhcGUoc2hhcGUpIHsgdGhpcy5zaGFwZSA9IHNoYXBlOyByZXR1cm4gdGhpczsgfVxyXG4gICAgZ2V0U2hhcGVOYW1lKCkgeyByZXR1cm4gdGhpcy5zaGFwZU5hbWU7IH1cclxuICAgIHNldFNoYXBlTmFtZShuYW1lKSB7IHRoaXMuc2hhcGVOYW1lID0gbmFtZTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIGdldFNoYXBlSW1nKCkgeyByZXR1cm4gdGhpcy5zaGFwZUltZzsgfVxyXG4gICAgZ2V0U2NvcmUoKSB7IHJldHVybiB0aGlzLnNjb3JlOyB9XHJcbiAgICBzZXRTY29yZShzY29yZSkgeyB0aGlzLnNjb3JlID0gc2NvcmU7IHJldHVybiB0aGlzOyB9XHJcbiAgICBhZGRTY29yZShzY29yZSkgeyB0aGlzLnNjb3JlICs9IHNjb3JlOyByZXR1cm4gdGhpczsgfVxyXG4gICAgZ2V0VGltZUluY3JlYXNlKCkgeyByZXR1cm4gdGhpcy50aW1lSW5jcmVhc2U7IH1cclxuICAgIHNldFRpbWVJbmNyZWFzZShkYXRhKSB7XHJcbiAgICAgICAgdGhpcy50aW1lSW5jcmVhc2UgPSB7XHJcbiAgICAgICAgICAgIGNoYW5jZTogZGF0YS5jaGFuY2UsXHJcbiAgICAgICAgICAgIHZhbHVlOiBkYXRhLnZhbHVlXHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGdldFNwYXduUm5kQ2hhbmNlKCkgeyByZXR1cm4gdGhpcy5zcGF3bkNoYW5jZTsgfVxyXG4gICAgc2V0U3Bhd25SbmRDaGFuY2UoY2hhbmNlTnVtKSB7IHJldHVybiB0aGlzLnNwYXduQ2hhbmNlID0gY2hhbmNlTnVtOyB9XHJcbiAgICBnZXRUeXBlSW1nKCkgeyByZXR1cm4gdGhpcy50eXBlSW1nOyB9XHJcbiAgICBzZXRUeXBlSW1nKHR5cGVUZXh0dXJlKSB7XHJcbiAgICAgICAgaWYgKCF0eXBlVGV4dHVyZSlcclxuICAgICAgICAgICAgdGhpcy50eXBlSW1nLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudHlwZUltZy5zZXRUZXh0dXJlKHR5cGVUZXh0dXJlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIHNldFR5cGVJbWdEaXNwbGF5U2l6ZSh3aWR0aCwgaGVpZ2h0KSB7IHRoaXMudHlwZUltZy5zZXREaXNwbGF5U2l6ZSh3aWR0aCwgaGVpZ2h0KTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIGluaXRUeXBlVHh0KCkge1xyXG4gICAgICAgIHRoaXMuc2V0VHlwZVR4dFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuc2V0VHlwZVR4dCgnJyk7XHJcbiAgICAgICAgdGhpcy50eXBlVHh0LnNldEZvbnRTaXplKDUwKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH1cclxuICAgIGdldFR5cGVUeHQoKSB7IHJldHVybiB0aGlzLnR5cGVUeHQ7IH1cclxuICAgIHNldFR5cGVUeHQodGV4dCkge1xyXG4gICAgICAgIGlmICghdGhpcy50eXBlVHh0LnZpc2libGUpXHJcbiAgICAgICAgICAgIHRoaXMudHlwZVR4dC5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgIGlmICghdGV4dClcclxuICAgICAgICAgICAgdGhpcy50eXBlVHh0LnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIHRoaXMudHlwZVR4dC5zZXRUZXh0KHRleHQpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgc2V0VHlwZVR4dFZpc2libGUodmlzaWJsZSkgeyB0aGlzLnR5cGVUeHQuc2V0VmlzaWJsZSh2aXNpYmxlKTsgcmV0dXJuIHRoaXM7IH1cclxuICAgIGdldFR5cGVOYW1lKCkgeyByZXR1cm4gdGhpcy50eXBlTmFtZTsgfVxyXG4gICAgc2V0VHlwZU5hbWUodHlwZU5hbWUpIHsgcmV0dXJuIHRoaXMudHlwZU5hbWUgPSB0eXBlTmFtZTsgfVxyXG4gICAgZ2V0QmxvY2tEYXRhKCkgeyByZXR1cm4gdGhpcy5iRGF0YTsgfVxyXG4gICAgc2V0QmxvY2tEYXRhKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmJEYXRhID0ge307XHJcbiAgICAgICAgdGhpcy5iRGF0YSA9IGRhdGE7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBhZGRCbG9ja0RhdGEoZGF0YSkgeyB0aGlzLmJEYXRhID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCB0aGlzLmJEYXRhKSwgZGF0YSk7IH1cclxuICAgIGdldFBoeXNpY3NDb24oKSB7IHJldHVybiB0aGlzLnBoeXNpY3NDb247IH1cclxuICAgIGdldFdpZHRoKCkgeyByZXR1cm4gdGhpcy50eXBlSW1nLndpZHRoOyB9XHJcbiAgICBnZXRIZWlnaHQoKSB7IHJldHVybiB0aGlzLnR5cGVJbWcuaGVpZ2h0OyB9XHJcbn1cclxuY29uc3QgU3Bhd25CbG9jayA9IChibG9jaykgPT4ge1xyXG4gICAgU2V0QmxvY2tJbnB1dFNldHRpbmcoYmxvY2spO1xyXG4gICAgYmxvY2suc2V0UG9zaXRpb24oQmxvY2tTeXN0ZW0uZ2V0Um5kU3Bhd25YKCksIEJsb2NrU3lzdGVtLnNwYXduWSk7XHJcbiAgICBibG9jay5zZXRBbmdsZShCbG9ja1N5c3RlbS5nZXRSbmRBbmdsZSgpKTtcclxuICAgIGJsb2NrLnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICBibG9jay5pc09uU2NyZWVuID0gdHJ1ZTtcclxuICAgIGJsb2NrLmdldFBoeXNpY3NDb24oKS5zZXRJZ25vcmVHcmF2aXR5KGZhbHNlKTtcclxuICAgIGJsb2NrLmdldFBoeXNpY3NDb24oKS5zZXRTZW5zb3IoZmFsc2UpO1xyXG4gICAgYmxvY2suZ2V0QmxvY2tEYXRhKCkuc3Bhd24gJiYgYmxvY2suZ2V0QmxvY2tEYXRhKCkuc3Bhd24oKTtcclxuICAgIHJldHVybiBibG9jaztcclxufTtcclxuY29uc3QgU2V0QmxvY2tJbnB1dFNldHRpbmcgPSAoYmxvY2spID0+IHtcclxuICAgIGJsb2NrLnJlbW92ZUFsbExpc3RlbmVycygpO1xyXG4gICAgYmxvY2suc2V0SW50ZXJhY3RpdmUoKTtcclxuICAgIGJsb2NrLnNjZW5lLmlucHV0LnNldERyYWdnYWJsZShibG9jaywgdHJ1ZSk7XHJcbiAgICBibG9jay5vbigncG9pbnRlcmRvd24nLCAocHRyKSA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrLmdldEJsb2NrRGF0YSgpLnB0ckRvd24pXHJcbiAgICAgICAgICAgIGJsb2NrLmdldEJsb2NrRGF0YSgpLnB0ckRvd24oYmxvY2ssIHB0cik7XHJcbiAgICAgICAgYmxvY2suZ2V0UGh5c2ljc0NvbigpLnNldElnbm9yZUdyYXZpdHkodHJ1ZSk7XHJcbiAgICAgICAgYmxvY2suZ2V0UGh5c2ljc0NvbigpLnNldFN0YXRpYyh0cnVlKTtcclxuICAgIH0pO1xyXG4gICAgYmxvY2sub24oJ2RyYWcnLCAocHRyKSA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrLmdldEJsb2NrRGF0YSgpLmRyYWcpXHJcbiAgICAgICAgICAgIGJsb2NrLmdldEJsb2NrRGF0YSgpLmRyYWcoYmxvY2ssIHB0cik7XHJcbiAgICB9KTtcclxuICAgIGJsb2NrLm9uKCdwb2ludGVydXAnLCAocHRyKSA9PiB7XHJcbiAgICAgICAgaWYgKGJsb2NrLmdldEJsb2NrRGF0YSgpLnB0clVwKVxyXG4gICAgICAgICAgICBibG9jay5nZXRCbG9ja0RhdGEoKS5wdHJVcChibG9jaywgcHRyKTtcclxuICAgICAgICBibG9jay5nZXRQaHlzaWNzQ29uKCkuc2V0SWdub3JlR3Jhdml0eShmYWxzZSk7XHJcbiAgICAgICAgYmxvY2suZ2V0UGh5c2ljc0NvbigpLnNldFN0YXRpYyhmYWxzZSk7XHJcbiAgICB9KTtcclxuICAgIGJsb2NrLm9uKCdwb2ludGVyb3V0JywgKCkgPT4ge1xyXG4gICAgICAgIGlmIChibG9jay5nZXRCbG9ja0RhdGEoKS5wdHJPdXQpXHJcbiAgICAgICAgICAgIGJsb2NrLmdldEJsb2NrRGF0YSgpLnB0ck91dChibG9jayk7XHJcbiAgICAgICAgYmxvY2suZ2V0UGh5c2ljc0NvbigpLnNldElnbm9yZUdyYXZpdHkoZmFsc2UpO1xyXG4gICAgICAgIGJsb2NrLmdldFBoeXNpY3NDb24oKS5zZXRTdGF0aWMoZmFsc2UpO1xyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbn07XHJcbmNvbnN0IFNldEJsb2NrVHlwZTJJbml0QmFzaWMgPSAoYmxvY2spID0+IHtcclxuICAgIGJsb2NrLnNldFNjb3JlKDApO1xyXG4gICAgYmxvY2suc2V0VGltZUluY3JlYXNlKHsgY2hhbmNlOiAwLCB2YWx1ZTogMCB9KTtcclxuICAgIGJsb2NrLmdldFR5cGVJbWcoKS5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgYmxvY2suaW5pdFR5cGVUeHQoKTtcclxuICAgIGJsb2NrLnNldEJsb2NrRGF0YSh7fSk7XHJcbiAgICBibG9jay5zZXRBbHBoYSgxKTtcclxuICAgIHRyeSB7XHJcbiAgICAgICAgYmxvY2suZGlzYWJsZUludGVyYWN0aXZlKCk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKGUpO1xyXG4gICAgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICBibG9jay5zY2VuZS5pbnB1dC5zZXREcmFnZ2FibGUoYmxvY2ssIGZhbHNlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlKSB7IH1cclxuICAgIHJldHVybiBibG9jaztcclxufTtcclxuY29uc3QgRGVhdGhCbG9jayA9IChibG9jaykgPT4ge1xyXG4gICAgaWYgKGJsb2NrLmdldEJsb2NrRGF0YSgpLmRlYXRoKVxyXG4gICAgICAgIGJsb2NrLmdldEJsb2NrRGF0YSgpLmRlYXRoKCgpID0+IHsgRGlzYWJsZUJsb2NrKGJsb2NrKTsgfSk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgRGlzYWJsZUJsb2NrKGJsb2NrKTtcclxuICAgIHJldHVybiBibG9jaztcclxufTtcclxuY29uc3QgRGlzYWJsZUJsb2NrID0gKGJsb2NrKSA9PiB7XHJcbiAgICBpZiAoYmxvY2suZ2V0Qm9keSgpKSB7XHJcbiAgICAgICAgYmxvY2suZ2V0UGh5c2ljc0NvbigpLnNldElnbm9yZUdyYXZpdHkodHJ1ZSk7XHJcbiAgICAgICAgYmxvY2suZ2V0UGh5c2ljc0NvbigpLnNldFNlbnNvcih0cnVlKTtcclxuICAgIH1cclxuICAgIGJsb2NrLmlzT25TY3JlZW4gPSBmYWxzZTtcclxuICAgIGJsb2NrLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgU2V0QmxvY2tUeXBlMkluaXRCYXNpYyhibG9jayk7XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbn07XHJcbmNvbnN0IFVwZGF0ZUJsb2NrID0gKGJsb2NrLCB0aW1lLCBkZWx0YSkgPT4ge1xyXG4gICAgaWYgKCFibG9jayB8fCAhYmxvY2suZ2V0QmxvY2tEYXRhKCkpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKGJsb2NrLmdldEJsb2NrRGF0YSgpLnVwZGF0ZSlcclxuICAgICAgICBibG9jay5nZXRCbG9ja0RhdGEoKS51cGRhdGUodGltZSwgZGVsdGEpO1xyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBCYXNpY0Jsb2NrO1xyXG5leHBvcnQgeyBTcGF3bkJsb2NrLCBEZWF0aEJsb2NrLCBEaXNhYmxlQmxvY2ssIFNldEJsb2NrVHlwZTJJbml0QmFzaWMsIFVwZGF0ZUJsb2NrLCB9O1xyXG4iLCJjb25zdCBTZXRCbG9jazJBZCA9IChibG9jaykgPT4ge1xyXG4gICAgbGV0IGJEYXRhID0ge1xyXG4gICAgICAgIHB0ckRvd246IChibG9jaykgPT4ge1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcHRyVXA6IChibG9jaykgPT4ge1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZHJhZzogKGJsb2NrKSA9PiB7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBkcmFnRW5kOiAoYmxvY2spID0+IHtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIGJsb2NrLnNldEJsb2NrRGF0YShiRGF0YSk7XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFNldEJsb2NrMkFkO1xyXG4iLCIvLyBjb21wYXJlIGl0ZW0gaXMgaW4gdGhlIGRhdGEgdGhlbiBcclxuY29uc3QgQ29tcGFyZUNhbGxiYWNrID0gKGRhdGEsIGl0ZW0pID0+IHtcclxuICAgIGNvbnN0IGlzSXRlbUV4aXN0SW5EYXRhID0gZGF0YVtpdGVtXTtcclxuICAgIGlmIChpc0l0ZW1FeGlzdEluRGF0YSAhPT0gdW5kZWZpbmVkIHx8IG51bGwpXHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ2l0ZW0gaXMgbm90IG1hdGNoZWQgdG8gYWN0dWFsIGRhdGEgdHlwZTonLCBpdGVtLCBkYXRhKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IEdhbWVOYW1lID0gZG9jdW1lbnQudGl0bGU7IC8vIGdldCBnYW1lIHRpdGxlIG5hbWVcclxuY29uc3QgR2V0TG9jYWxTdG9yYWdlRGF0YSA9IChkZWZhdWx0RGF0YSkgPT4ge1xyXG4gICAgY29uc3QgZGF0YSA9IHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbShHYW1lTmFtZSk7XHJcbiAgICBpZiAoZGF0YSlcclxuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShkYXRhKTtcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIHdpbmRvdy5sb2NhbFN0b3JhZ2Uuc2V0SXRlbShHYW1lTmFtZSwgSlNPTi5zdHJpbmdpZnkoZGVmYXVsdERhdGEpKTtcclxuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGE7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IEdldExvY2FsU3RvcmFnZUl0ZW0gPSAoZGVmYXVsdERhdGEsIGl0ZW0sIGV4Y2VwdGlvbktleXMpID0+IHtcclxuICAgIGNvbnN0IGdhbWVEYXRhID0gR2V0TG9jYWxTdG9yYWdlRGF0YShkZWZhdWx0RGF0YSk7XHJcbiAgICBsZXQgbGlzdCA9ICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycgPyBbaXRlbV0gOiBbLi4uaXRlbV0pLm1hcCgoZWxlKSA9PiB7XHJcbiAgICAgICAgbGV0IHJldHVybkl0ZW0gPSBnYW1lRGF0YVtlbGVdO1xyXG4gICAgICAgIGlmIChDb21wYXJlQ2FsbGJhY2soZ2FtZURhdGEsIGVsZSkpXHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5JdGVtO1xyXG4gICAgfSk7XHJcbiAgICAvLyBjaGNrIGlzIHRoZXJlIHVuZGVmaW5lZCBkYXRhIGZyb20gbGlzdCB0aGVuIHNldCB0byBkZWZhdWx0IGRhdGFcclxuICAgIGlmIChsaXN0LmZpbHRlcihjaGlsZCA9PiBjaGlsZCA9PT0gdW5kZWZpbmVkKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgQ2xlYXJHYW1lTG9jYWxTdG9yYWdlRGF0YSgpO1xyXG4gICAgICAgIGlmIChleGNlcHRpb25LZXlzKSB7XHJcbiAgICAgICAgICAgICh0eXBlb2YgZXhjZXB0aW9uS2V5cyA9PT0gJ3N0cmluZycgPyBbZXhjZXB0aW9uS2V5c10gOiBbLi4uZXhjZXB0aW9uS2V5c10pLm1hcCgoZXhjZXB0aW9uSXRlbSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGdhbWVEYXRhW2V4Y2VwdGlvbkl0ZW1dID09PSB1bmRlZmluZWQgfHwgZ2FtZURhdGFbZXhjZXB0aW9uSXRlbV0gPT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgU2V0TG9jYWxTdG9yYWdlSXRlbShkZWZhdWx0RGF0YSwgZXhjZXB0aW9uSXRlbSwgZ2FtZURhdGFbZXhjZXB0aW9uSXRlbV0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyByZXR1cm4gc2luZ2xlIGl0ZW1cclxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMSlcclxuICAgICAgICByZXR1cm4gbGlzdFswXTtcclxuICAgIC8vIHJldHVybiBpdGVtIGFycmF5XHJcbiAgICBlbHNlIGlmIChpdGVtLmxlbmd0aCA9PT0gbGlzdC5sZW5ndGgpXHJcbiAgICAgICAgcmV0dXJuIGxpc3Q7XHJcbn07XHJcbmNvbnN0IFNldExvY2FsU3RvcmFnZUl0ZW0gPSAoZGVmYXVsdERhdGEsIGl0ZW0sIHZhbHVlKSA9PiB7XHJcbiAgICBsZXQgZ2FtZURhdGEgPSBHZXRMb2NhbFN0b3JhZ2VEYXRhKGRlZmF1bHREYXRhKTtcclxuICAgIGlmIChnYW1lRGF0YSlcclxuICAgICAgICBnYW1lRGF0YVtpdGVtXSA9IHZhbHVlO1xyXG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5zZXRJdGVtKEdhbWVOYW1lLCBKU09OLnN0cmluZ2lmeShnYW1lRGF0YSkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2dhbWVEYXRhLCBiZXN0OiAnLCBnYW1lRGF0YSwgZ2FtZURhdGEuYmVzdCk7XHJcbiAgICByZXR1cm4gZ2FtZURhdGE7XHJcbn07XHJcbmNvbnN0IFJlbW92ZUxvY2FsU3RvcmFnZUl0ZW0gPSAoZGVmYXVsdERhdGEsIGl0ZW0pID0+IHtcclxuICAgIFNldExvY2FsU3RvcmFnZUl0ZW0oZGVmYXVsdERhdGEsIGl0ZW0sIG51bGwpO1xyXG59O1xyXG5jb25zdCBDbGVhckdhbWVMb2NhbFN0b3JhZ2VEYXRhID0gKCkgPT4ge1xyXG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5yZW1vdmVJdGVtKEdhbWVOYW1lKTtcclxufTtcclxuY29uc3QgQ2xlYXJBbGxMb2NhbFN0b3JhZ2VJdGVtID0gKCkgPT4ge1xyXG4gICAgd2luZG93LmxvY2FsU3RvcmFnZS5jbGVhcigpO1xyXG59O1xyXG5jb25zdCBEZWJ1Z0xvY2FsU3RvcmFnZSA9IChzY2VuZSwgZGVmYXVsdERhdGEsIGl0ZW1zKSA9PiB7XHJcbiAgICBzY2VuZS5pbnB1dC5tb3VzZS5kaXNhYmxlQ29udGV4dE1lbnUoKTtcclxuICAgIHNjZW5lLmlucHV0Lm9uKCdwb2ludGVyZG93bicsIGZ1bmN0aW9uIChwb2ludGVyKSB7XHJcbiAgICAgICAgaWYgKHBvaW50ZXIucmlnaHRCdXR0b25Eb3duKCkpIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coR2V0TG9jYWxTdG9yYWdlRGF0YShkZWZhdWx0RGF0YSkpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChwb2ludGVyLm1pZGRsZUJ1dHRvbkRvd24oKSkge1xyXG4gICAgICAgICAgICBpZiAoaXRlbXMgaW5zdGFuY2VvZiBBcnJheSlcclxuICAgICAgICAgICAgICAgIGl0ZW1zLm1hcChlbGUgPT4gU2V0TG9jYWxTdG9yYWdlSXRlbShkZWZhdWx0RGF0YSwgZWxlLml0ZW0sIGVsZS52YWx1ZSkpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBTZXRMb2NhbFN0b3JhZ2VJdGVtKGRlZmF1bHREYXRhLCBpdGVtcy5pdGVtLCBpdGVtcy52YWx1ZSk7XHJcbiAgICAgICAgICAgIFNldExvY2FsU3RvcmFnZUl0ZW0oZGVmYXVsdERhdGEsICdiZXN0JywgMCk7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0IHsgR2V0TG9jYWxTdG9yYWdlRGF0YSwgR2V0TG9jYWxTdG9yYWdlSXRlbSwgU2V0TG9jYWxTdG9yYWdlSXRlbSwgUmVtb3ZlTG9jYWxTdG9yYWdlSXRlbSwgQ2xlYXJHYW1lTG9jYWxTdG9yYWdlRGF0YSwgQ2xlYXJBbGxMb2NhbFN0b3JhZ2VJdGVtLCBEZWJ1Z0xvY2FsU3RvcmFnZSB9O1xyXG4iLCJjb25zdCBDb21tb25Sb290VXJsID0gJ2h0dHBzOi8vc2lsdmVydHJlZTc2MjIuZ2l0aHViLmlvL3dlYmdhbWVzLyc7XHJcbmNvbnN0IENvbW1vbkFzc2V0cyA9IENvbW1vblJvb3RVcmwgKyAnYXNzZXRzLyc7XHJcbmNvbnN0IENvbW1vblNmeCA9IENvbW1vbkFzc2V0cyArICdhdWRpby9zZngvJztcclxuY29uc3QgQ29tbW9uVUkgPSBDb21tb25Bc3NldHMgKyAndWkvJztcclxuY29uc3QgQ29tbW9uQXVkaW8gPSBDb21tb25VSSArICdhdWRpby8nO1xyXG5jb25zdCBDb21tb25GdWxsU2NyZWVuID0gQ29tbW9uVUkgKyAnZnVsbFNjcmVlbi8nO1xyXG5jb25zdCBDb21tb25TY3JvbGwgPSBDb21tb25VSSArICdzY3JvbGwvJztcclxuY29uc3QgQ29tbW9uR2FnZSA9IENvbW1vblVJICsgJ2dhZ2UvJztcclxuY29uc3QgQ29tbW9uRWZ4ID0gQ29tbW9uVUkgKyAnZWZ4Lyc7XHJcbmNvbnN0IENvbW1vblNucyA9IENvbW1vblJvb3RVcmwgKyAnc25zLyc7XHJcbi8qKiBnZXQgY29tbW9uIGFzc2V0IGZpbGUgd2l0aCBleGNlcHRpb24ga2V5ICh3aGVuIGlmIHUgd29ycnkgYWJvdXQgbmVzdGVkIHRoaW5ncylcclxuICogQHBhcmFtIGFzc2V0TGlzdCBjb21tb24gY3VzdG9tIGFzc2VzdCBsaXN0IGNvbXBvc2Ugb2YgdGhlIGtleSwgdXJsLCBldGNcclxuICogQHBhcmFtIGV4Y2VwdGlvbktleXMgZXhjZXB0aW9uIGtleSB3aGljaCB1IHdvcnJ5IGFib3V0IHRoZSBuZXN0ZWQgdGhpbmdzXHJcbiAqIEByZXR1cm5zIGZpbHRlcmVkIGFzc2V0IGxpc3RcclxuICovXHJcbmNvbnN0IEdldEFzc2V0RmlsZXMgPSAoYXNzZXRMaXN0LCBleGNlcHRpb25LZXlzKSA9PiB7XHJcbiAgICBpZiAoIWV4Y2VwdGlvbktleXMpXHJcbiAgICAgICAgcmV0dXJuIGFzc2V0TGlzdDtcclxuICAgIGxldCBmaWx0ZXJlZExpc3Q7XHJcbiAgICAvLyBvbmUga2V5IHRvIGV4Y2VwdCBmcm9tIGFzc2V0IGxpc3RcclxuICAgIGlmICh0eXBlb2YgZXhjZXB0aW9uS2V5cyA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICBmaWx0ZXJlZExpc3QgPSBhc3NldExpc3QuZmlsdGVyKGFzc2V0ID0+IGFzc2V0LmtleSAhPT0gZXhjZXB0aW9uS2V5cyk7XHJcbiAgICB9XHJcbiAgICAvLyBzZXZlcmFsIGtleSBsaXN0IHRvIGV4Y2VwdCBmcm9tIGFzc2V0IGxpc3RcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGZpbHRlcmVkTGlzdCA9IGFzc2V0TGlzdC5maWx0ZXIoKGFzc2V0KSA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiBleGNlcHRpb25LZXlzLmluZGV4T2YoYXNzZXQua2V5KSA8IDA7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmlsdGVyZWRMaXN0O1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBDb21tb25Sb290VXJsO1xyXG5leHBvcnQgeyBDb21tb25TZngsIENvbW1vblVJLCBDb21tb25BdWRpbywgQ29tbW9uRnVsbFNjcmVlbiwgQ29tbW9uU2Nyb2xsLCBDb21tb25HYWdlLCBDb21tb25FZngsIENvbW1vblNucywgR2V0QXNzZXRGaWxlcywgfTtcclxuIiwiaW1wb3J0IHsgR2V0TG9jYWxTdG9yYWdlSXRlbSwgU2V0TG9jYWxTdG9yYWdlSXRlbSB9IGZyb20gJ0BzcmMvdXRpbHMvc3RvcmFnZSc7XHJcbmltcG9ydCB7IEdldEFzc2V0RmlsZXMgfSBmcm9tICcuLi9hc3NldFV0aWxzJztcclxuY29uc3QgR2FtZUF1ZGlvID0ge1xyXG4gICAgd2hvbGVHYW1lRGF0YToge30sXHJcbiAgICBiZ21MaXN0OiBbXSxcclxuICAgIHNmeExpc3Q6IFtdLFxyXG4gICAgYmdtS2V5TGlzdDogW10sXHJcbiAgICBzZnhLZXlMaXN0OiBbXSxcclxuICAgIGlzQWxsTXV0ZTogZmFsc2UsXHJcbiAgICBpc0JnbU11dGU6IGZhbHNlLFxyXG4gICAgaXNTZnhNdXRlOiBmYWxzZSxcclxuICAgIGFsbFZvbHVtZTogMC41LFxyXG4gICAgYmdtVm9sdW1lOiAwLjUsXHJcbiAgICBzZnhWb2x1bWU6IDAuNSxcclxuICAgIHNldEFsbE11dGU6IGZ1bmN0aW9uIChpc011dGUpIHtcclxuICAgICAgICB0aGlzLmlzQWxsTXV0ZSA9IGlzTXV0ZTtcclxuICAgICAgICB0aGlzLnNldEJnbU11dGUoaXNNdXRlKTtcclxuICAgICAgICB0aGlzLnNldFNmeE11dGUoaXNNdXRlKTtcclxuICAgICAgICBTZXRMb2NhbFN0b3JhZ2VJdGVtKEdhbWVBdWRpby53aG9sZUdhbWVEYXRhLCAnaXNBbGxNdXRlJywgaXNNdXRlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBzZXRCZ21NdXRlOiBmdW5jdGlvbiAoaXNNdXRlKSB7XHJcbiAgICAgICAgdGhpcy5pc0JnbU11dGUgPSBpc011dGU7XHJcbiAgICAgICAgdGhpcy5iZ21MaXN0LmZvckVhY2goYmdtID0+IGJnbS5zZXRNdXRlKGlzTXV0ZSkpO1xyXG4gICAgICAgIGlmIChpc011dGUpXHJcbiAgICAgICAgICAgIHRoaXMuYmdtS2V5TGlzdC5tYXAoa2V5ID0+IHRoaXMucGF1c2VCZ20oa2V5KSk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICB0aGlzLmJnbUtleUxpc3QubWFwKGtleSA9PiB0aGlzLnJlc3VtZUJnbShrZXkpKTtcclxuICAgICAgICBTZXRMb2NhbFN0b3JhZ2VJdGVtKEdhbWVBdWRpby53aG9sZUdhbWVEYXRhLCAnaXNCZ21NdXRlJywgaXNNdXRlKTtcclxuICAgICAgICAvLyBpZiAodGhpcy5pc0JnbU11dGUgPT09IHRoaXMuaXNTZnhNdXRlKSB0aGlzLnNldFNmeE11dGUodGhpcy5pc0JnbU11dGUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIHNldFNmeE11dGU6IGZ1bmN0aW9uIChpc011dGUpIHtcclxuICAgICAgICB0aGlzLmlzU2Z4TXV0ZSA9IGlzTXV0ZTtcclxuICAgICAgICB0aGlzLnNmeExpc3QuZm9yRWFjaChzZnggPT4gc2Z4LnNldE11dGUoaXNNdXRlKSk7XHJcbiAgICAgICAgU2V0TG9jYWxTdG9yYWdlSXRlbShHYW1lQXVkaW8ud2hvbGVHYW1lRGF0YSwgJ2lzU2Z4TXV0ZScsIGlzTXV0ZSk7XHJcbiAgICAgICAgLy8gaWYgKHRoaXMuaXNCZ21NdXRlID09PSB0aGlzLmlzU2Z4TXV0ZSkgdGhpcy5zZXRBbGxNdXRlKHRoaXMuaXNCZ21NdXRlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBzZXRBbGxWb2x1bWU6IGZ1bmN0aW9uICh2b2x1bWUpIHtcclxuICAgICAgICB0aGlzLmFsbFZvbHVtZSA9IHZvbHVtZTtcclxuICAgICAgICB0aGlzLnNldEJnbVZvbHVtZSh2b2x1bWUpO1xyXG4gICAgICAgIHRoaXMuc2V0U2Z4Vm9sdW1lKHZvbHVtZSk7XHJcbiAgICAgICAgU2V0TG9jYWxTdG9yYWdlSXRlbShHYW1lQXVkaW8ud2hvbGVHYW1lRGF0YSwgJ2FsbFZvbHVtZScsIHZvbHVtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgc2V0QmdtVm9sdW1lOiBmdW5jdGlvbiAodm9sdW1lKSB7XHJcbiAgICAgICAgdGhpcy5iZ21Wb2x1bWUgPSB2b2x1bWU7XHJcbiAgICAgICAgdGhpcy5iZ21MaXN0LmZvckVhY2goYmdtID0+IGJnbS5zZXRWb2x1bWUodm9sdW1lKSk7XHJcbiAgICAgICAgU2V0TG9jYWxTdG9yYWdlSXRlbShHYW1lQXVkaW8ud2hvbGVHYW1lRGF0YSwgJ2JnbVZvbHVtZScsIHZvbHVtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgc2V0U2Z4Vm9sdW1lOiBmdW5jdGlvbiAodm9sdW1lKSB7XHJcbiAgICAgICAgdGhpcy5zZnhWb2x1bWUgPSB2b2x1bWU7XHJcbiAgICAgICAgdGhpcy5zZnhMaXN0LmZvckVhY2goc2Z4ID0+IHNmeC5zZXRWb2x1bWUodm9sdW1lKSk7XHJcbiAgICAgICAgU2V0TG9jYWxTdG9yYWdlSXRlbShHYW1lQXVkaW8ud2hvbGVHYW1lRGF0YSwgJ3NmeFZvbHVtZScsIHZvbHVtZSk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgcGxheUJnbTogZnVuY3Rpb24gKGtleSkge1xyXG4gICAgICAgIGNvbnN0IHBsYXlCZ20gPSB0aGlzLmJnbUxpc3QuZmluZChiZ20gPT4gYmdtLmtleSA9PT0ga2V5KTtcclxuICAgICAgICBpZiAocGxheUJnbSlcclxuICAgICAgICAgICAgcGxheUJnbS5wbGF5KCk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYFtBdWRpb10gcGxheUJnbTogJHtrZXl9IG5vdCBmb3VuZGApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIHBhdXNlQmdtOiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgY29uc3QgYmdtID0gdGhpcy5iZ21MaXN0LmZpbmQoYmdtID0+IGJnbS5rZXkgPT09IGtleSk7XHJcbiAgICAgICAgaWYgKGJnbSlcclxuICAgICAgICAgICAgYmdtLnBhdXNlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgcmVzdW1lQmdtOiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgY29uc3QgYmdtID0gdGhpcy5iZ21MaXN0LmZpbmQoYmdtID0+IGJnbS5rZXkgPT09IGtleSk7XHJcbiAgICAgICAgaWYgKGJnbSlcclxuICAgICAgICAgICAgYmdtLnJlc3VtZSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIHN0b3BCZ206IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBjb25zdCBiZ20gPSB0aGlzLmJnbUxpc3QuZmluZChiZ20gPT4gYmdtLmtleSA9PT0ga2V5KTtcclxuICAgICAgICBpZiAoYmdtKVxyXG4gICAgICAgICAgICBiZ20uc3RvcCgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIHBsYXlTZng6IGZ1bmN0aW9uIChrZXkpIHtcclxuICAgICAgICBjb25zdCBwbGF5U2Z4ID0gdGhpcy5zZnhMaXN0LmZpbmQoc2Z4ID0+IHNmeC5rZXkgPT09IGtleSk7XHJcbiAgICAgICAgaWYgKHBsYXlTZngpXHJcbiAgICAgICAgICAgIHBsYXlTZngucGxheSgpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgY29uc29sZS53YXJuKGBbQXVkaW9dIHBsYXlTZng6ICR7a2V5fSBub3QgZm91bmRgKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBzdG9wU2Z4OiBmdW5jdGlvbiAoa2V5KSB7XHJcbiAgICAgICAgY29uc3Qgc2Z4ID0gdGhpcy5zZnhMaXN0LmZpbmQoc2Z4ID0+IHNmeC5rZXkgPT09IGtleSk7XHJcbiAgICAgICAgaWYgKHNmeClcclxuICAgICAgICAgICAgc2Z4LnN0b3AoKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICAvLyBwbGF5ICYgc3RvcCBjb250cm9sIGZvciBpbnN0YW5jZSBhbnkgc2Z4XHJcbiAgICBwbGF5U2Z4SW5zdGFuY2VMb29wOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2Z4S2V5TGlzdC5maW5kKGtleSA9PiBrZXkgPT09IGluc3RhbmNlLmtleSkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpbnN0YW5jZS5wbGF5KHtcclxuICAgICAgICAgICAgbXV0ZTogR2V0TG9jYWxTdG9yYWdlSXRlbShHYW1lQXVkaW8ud2hvbGVHYW1lRGF0YSwgJ2lzU2Z4TXV0ZScpLFxyXG4gICAgICAgICAgICB2b2x1bWU6IEdldExvY2FsU3RvcmFnZUl0ZW0oR2FtZUF1ZGlvLndob2xlR2FtZURhdGEsICdzZnhWb2x1bWUnKSxcclxuICAgICAgICAgICAgbG9vcDogdHJ1ZSxcclxuICAgICAgICB9KTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBzdG9wU2Z4SW5zdGFuY2VMb29wOiBmdW5jdGlvbiAoaW5zdGFuY2UpIHtcclxuICAgICAgICBpZiAoIXRoaXMuc2Z4S2V5TGlzdC5maW5kKGtleSA9PiBrZXkgPT09IGluc3RhbmNlLmtleSkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpbnN0YW5jZS5zdG9wKCk7XHJcbiAgICAgICAgaW5zdGFuY2UucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XHJcbiAgICAgICAgaW5zdGFuY2UuZGVzdHJveSgpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxufTtcclxuY29uc3QgR2FtZUF1ZGlvRGF0YSA9IHtcclxuICAgIGFsbFZvbHVtZTogMC41LFxyXG4gICAgaXNBbGxNdXRlOiBmYWxzZSxcclxuICAgIGJnbVZvbHVtZTogMC41LFxyXG4gICAgaXNCZ21NdXRlOiBmYWxzZSxcclxuICAgIHNmeFZvbHVtZTogMC41LFxyXG4gICAgaXNTZnhNdXRlOiBmYWxzZSxcclxufTtcclxuY29uc3QgR2V0R2FtZUF1ZGlvQXNzZXRzID0gKHNmeEtleUxpc3QsIGJnbUtleUxpc3QsIGV4Y2VwdGlvbktleXMpID0+IHtcclxuICAgIEdhbWVBdWRpby5zZnhLZXlMaXN0ID0gR2V0QXNzZXRGaWxlcyhzZnhLZXlMaXN0LCBleGNlcHRpb25LZXlzKS5tYXAoYXNzZXQgPT4gYXNzZXQua2V5KTtcclxuICAgIGlmIChiZ21LZXlMaXN0KVxyXG4gICAgICAgIEdhbWVBdWRpby5iZ21LZXlMaXN0ID0gR2V0QXNzZXRGaWxlcyhiZ21LZXlMaXN0LCBleGNlcHRpb25LZXlzKS5tYXAoYXNzZXQgPT4gYXNzZXQua2V5KTtcclxuICAgIGVsc2VcclxuICAgICAgICBHYW1lQXVkaW8uYmdtS2V5TGlzdCA9IFtdO1xyXG4gICAgcmV0dXJuIFtcclxuICAgICAgICAuLi5zZnhLZXlMaXN0LFxyXG4gICAgICAgIC4uLmJnbUtleUxpc3QsXHJcbiAgICBdO1xyXG59O1xyXG5jb25zdCBJbml0R2FtZUF1ZGlvID0gKCkgPT4ge1xyXG4gICAgLy8gQ2xlYXJHYW1lTG9jYWxTdG9yYWdlRGF0YSgpO1xyXG4gICAgY29uc3QgW2FsbFZvbHVtZSwgaXNBbGxNdXRlLCBiZ21Wb2x1bWUsIGlzQmdtTXV0ZSwgc2Z4Vm9sdW1lLCBpc1NmeE11dGVdID0gR2V0TG9jYWxTdG9yYWdlSXRlbShHYW1lQXVkaW8ud2hvbGVHYW1lRGF0YSwgW1xyXG4gICAgICAgICdhbGxWb2x1bWUnLFxyXG4gICAgICAgICdpc0FsbE11dGUnLFxyXG4gICAgICAgICdiZ21Wb2x1bWUnLFxyXG4gICAgICAgICdpc0JnbU11dGUnLFxyXG4gICAgICAgICdzZnhWb2x1bWUnLFxyXG4gICAgICAgICdpc1NmeE11dGUnLFxyXG4gICAgXSwgJ2Jlc3QnKTtcclxuICAgIEdhbWVBdWRpby5zZXRBbGxWb2x1bWUoYWxsVm9sdW1lKTtcclxuICAgIEdhbWVBdWRpby5zZXRBbGxNdXRlKGlzQWxsTXV0ZSk7XHJcbiAgICBHYW1lQXVkaW8uc2V0QmdtVm9sdW1lKGJnbVZvbHVtZSk7XHJcbiAgICBHYW1lQXVkaW8uc2V0QmdtTXV0ZShpc0JnbU11dGUpO1xyXG4gICAgR2FtZUF1ZGlvLnNldFNmeFZvbHVtZShzZnhWb2x1bWUpO1xyXG4gICAgR2FtZUF1ZGlvLnNldFNmeE11dGUoaXNTZnhNdXRlKTtcclxuICAgIGNvbnNvbGUubG9nKCdHYW1lQXVkaW86ICcsIEdhbWVBdWRpbyk7XHJcbn07XHJcbmNvbnN0IENyZWF0ZUdhbWVBdWRpbyA9IChzY2VuZSwgZ2FtZURhdGEpID0+IHtcclxuICAgIEdhbWVBdWRpby53aG9sZUdhbWVEYXRhID0gZ2FtZURhdGE7XHJcbiAgICBHYW1lQXVkaW8uYmdtTGlzdCA9IEdhbWVBdWRpby5iZ21LZXlMaXN0ICYmIEdhbWVBdWRpby5iZ21LZXlMaXN0Lm1hcChrZXkgPT4gc2NlbmUuc291bmQuYWRkKGtleSwgeyBsb29wOiB0cnVlIH0pKTtcclxuICAgIEdhbWVBdWRpby5zZnhMaXN0ID0gR2FtZUF1ZGlvLnNmeEtleUxpc3QgJiYgR2FtZUF1ZGlvLnNmeEtleUxpc3QubWFwKGtleSA9PiBzY2VuZS5zb3VuZC5hZGQoa2V5KSk7XHJcbiAgICBJbml0R2FtZUF1ZGlvKCk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVBdWRpbztcclxuZXhwb3J0IHsgR2FtZUF1ZGlvRGF0YSwgR2V0R2FtZUF1ZGlvQXNzZXRzLCBJbml0R2FtZUF1ZGlvLCBDcmVhdGVHYW1lQXVkaW8gfTtcclxuIiwiY29uc3QgSW5wdXQgPSB7XHJcbiAgICB0eXBlOiAnJyxcclxuICAgIHR5cGVIaXN0b3J5OiBbXSxcclxuICAgIGluaXRQb3M6IHsgeDogMCwgeTogMCB9LFxyXG4gICAgaXNIb2xkaW5nRG93bjogZmFsc2UsXHJcbiAgICBob2xkRHVyYXRpb246IDAsXHJcbiAgICBob2xkTWF4RHVyYXRpb246IDEwMDAsXHJcbiAgICBzdGFydEhvbGQ6IGZ1bmN0aW9uICgpIHsgdGhpcy5pc0hvbGRpbmdEb3duID0gdHJ1ZTsgcmV0dXJuIHRoaXM7IH0sXHJcbiAgICByZXNldEhvbGQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB0aGlzLmlzSG9sZGluZ0Rvd24gPSBmYWxzZTtcclxuICAgICAgICB0aGlzLmluaXRQb3MgPSB7IHg6IDAsIHk6IDAgfTtcclxuICAgICAgICB0aGlzLmhvbGREdXJhdGlvbiA9IDA7XHJcbiAgICAgICAgdGhpcy5zZXRUeXBlKCcnKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBnZXRJc0hvbGRpbmdEb3duOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmlzSG9sZGluZ0Rvd247IH0sXHJcbiAgICBnZXRIb2xkRHVyYXRpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuaG9sZER1cmF0aW9uOyB9LFxyXG4gICAgc2V0SG9sZER1cmF0aW9uOiBmdW5jdGlvbiAoZHVyYXRpb24pIHsgdGhpcy5ob2xkRHVyYXRpb24gPSBkdXJhdGlvbjsgcmV0dXJuIHRoaXM7IH0sXHJcbiAgICBzZXRJbml0UG9zOiBmdW5jdGlvbiAoeCwgeSkgeyB0aGlzLmluaXRQb3MgPSB7IHg6IHgsIHk6IHkgfTsgcmV0dXJuIHRoaXM7IH0sXHJcbiAgICBjaGNrSXNIb2xkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuaG9sZER1cmF0aW9uID49IHRoaXMuaG9sZE1heER1cmF0aW9uKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBnZXRUeXBlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLnR5cGU7IH0sXHJcbiAgICBzZXRUeXBlOiBmdW5jdGlvbiAodHlwZSkgeyB0aGlzLnR5cGUgPSB0eXBlOyByZXR1cm4gdGhpczsgfSxcclxuICAgIGluaXRUeXBlSGlzdG9yeTogZnVuY3Rpb24gKCkgeyB0aGlzLnR5cGVIaXN0b3J5ID0gW107IH0sXHJcbiAgICBnZXRUeXBlSGlzdG9yeTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy50eXBlSGlzdG9yeTsgfSxcclxuICAgIGdldExhc3Rlc3RJbnB1dFR5cGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudHlwZUhpc3RvcnlbdGhpcy50eXBlSGlzdG9yeS5sZW5ndGggLSAxXTsgfSxcclxuICAgIHB1c2gyVHlwZUhpc3Rvcnk6IGZ1bmN0aW9uICh0eXBlKSB7XHJcbiAgICAgICAgdGhpcy50eXBlSGlzdG9yeS5wdXNoKHR5cGUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGVIaXN0b3J5O1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBJbml0SW5wdXQgPSAoKSA9PiB7XHJcbiAgICBJbnB1dC5yZXNldEhvbGQoKTtcclxuICAgIElucHV0LmluaXRUeXBlSGlzdG9yeSgpO1xyXG59O1xyXG5jb25zdCBDcmVhdGVJbnB1dCA9IChzY2VuZSkgPT4ge1xyXG4gICAgc2NlbmUuaW5wdXQub24oJ3BvaW50ZXJkb3duJywgKCkgPT4ge1xyXG4gICAgICAgIElucHV0LnN0YXJ0SG9sZCgpO1xyXG4gICAgfSk7XHJcbiAgICBJbml0SW5wdXQoKTtcclxufTtcclxuY29uc3QgVXBkYXRlSW5wdXQgPSAoZGVsdGEpID0+IHtcclxuICAgIGlmIChJbnB1dC5nZXRJc0hvbGRpbmdEb3duKCkpXHJcbiAgICAgICAgSW5wdXQuc2V0SG9sZER1cmF0aW9uKElucHV0LmdldEhvbGREdXJhdGlvbigpICsgZGVsdGEpO1xyXG59O1xyXG5jb25zdCBJbnB1dFB0ckRvd24gPSAocHRyKSA9PiB7XHJcbiAgICBJbnB1dC5zZXRJbml0UG9zKHB0ci54LCBwdHIueSk7XHJcbn07XHJcbmNvbnN0IElucHV0UHRyVXAgPSAocHRyKSA9PiB7XHJcbiAgICByZXR1cm4gU2V0SW5wdXRUeXBlKElucHV0LmluaXRQb3MsIHB0cik7XHJcbn07XHJcbmNvbnN0IElucHV0RHJhZyA9IChwdHIpID0+IHtcclxufTtcclxuY29uc3QgSW5wdXRQdHJPdXQgPSAoKSA9PiB7XHJcbiAgICBJbnB1dC5yZXNldEhvbGQoKTtcclxufTtcclxuY29uc3QgQ2hja1N3aXBlRGlyZWN0aW9uID0gKGluaXRQb3MsIHB0cikgPT4ge1xyXG4gICAgY29uc3QgeCA9IHB0ci54IC0gaW5pdFBvcy54O1xyXG4gICAgY29uc3QgeSA9IHB0ci55IC0gaW5pdFBvcy55O1xyXG4gICAgaWYgKE1hdGguYWJzKHgpID4gTWF0aC5hYnMoeSkpIHtcclxuICAgICAgICBpZiAoeCA+IDApXHJcbiAgICAgICAgICAgIElucHV0LnNldFR5cGUoJ3N3aXBlUmlnaHQnKTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIElucHV0LnNldFR5cGUoJ3N3aXBlTGVmdCcpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgaWYgKHkgPCAwKVxyXG4gICAgICAgICAgICBJbnB1dC5zZXRUeXBlKCdzd2lwZVVwJyk7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBJbnB1dC5zZXRUeXBlKCdzd2lwZURvd24nKTtcclxuICAgIH1cclxufTtcclxuLy8gc2V0IGNvbWZ5IHRvdWNoIHRvIG5vdCBqdWRnZSBhcyBzd2lwZSB3aGVuIHVzZSB3aXRoIGFjdHVhbCBmaW5nZXJcclxuY29uc3QgQ29tZnlHYXBUb3VjaFZhbHVlID0gMTU7XHJcbmNvbnN0IFNldElucHV0VHlwZSA9IChpbml0UG9zLCBwdHIpID0+IHtcclxuICAgIC8vIHN3aXBlIG1vdGlvblxyXG4gICAgY29uc3QgY2hja1Bvc1ggPSBNYXRoLmFicyhpbml0UG9zLnggLSBwdHIueCkgPiBDb21meUdhcFRvdWNoVmFsdWU7XHJcbiAgICBjb25zdCBjaGNrUG9zWSA9IE1hdGguYWJzKGluaXRQb3MueSAtIHB0ci55KSA+IENvbWZ5R2FwVG91Y2hWYWx1ZTtcclxuICAgIGlmIChjaGNrUG9zWCB8fCBjaGNrUG9zWSlcclxuICAgICAgICBDaGNrU3dpcGVEaXJlY3Rpb24oaW5pdFBvcywgcHRyKTtcclxuICAgIC8vIGhvbGQgb3IgdG91Y2hcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIGlmIChJbnB1dC5jaGNrSXNIb2xkKCkpIHtcclxuICAgICAgICAgICAgSW5wdXQuc2V0VHlwZSgnaG9sZCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIElucHV0LnNldFR5cGUoJ3RvdWNoJyk7XHJcbiAgICB9XHJcbiAgICBJbnB1dC5wdXNoMlR5cGVIaXN0b3J5KElucHV0LmdldFR5cGUoKSk7XHJcbiAgICBJbnB1dC5yZXNldEhvbGQoKTtcclxuICAgIHJldHVybiBJbnB1dC5nZXRMYXN0ZXN0SW5wdXRUeXBlKCk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IElucHV0O1xyXG5leHBvcnQgeyBDcmVhdGVJbnB1dCwgVXBkYXRlSW5wdXQsIElucHV0UHRyRG93biwgSW5wdXRQdHJVcCwgSW5wdXREcmFnLCBJbnB1dFB0ck91dCwgU2V0SW5wdXRUeXBlIH07XHJcbiIsImltcG9ydCB7IEdldFJuZE51bSB9IGZyb20gJ0BzcmMvdXRpbHMvbWF0aCc7XHJcbmltcG9ydCBHYW1lQXVkaW8gZnJvbSAnQHNyYy9zY2VuZXMvYXVkaW8nO1xyXG5pbXBvcnQgeyBJbnB1dFB0ckRvd24sIElucHV0UHRyVXAsIElucHV0UHRyT3V0IH0gZnJvbSAnLi4vLi4vaW5wdXQnO1xyXG5pbXBvcnQgeyBBZGRPYnN0YWNsZUJsb2NrLCBDbGVhckJsb2NrIH0gZnJvbSAnLi4vc3lzdGVtJztcclxuaW1wb3J0IHsgQ29tbW9uU2l6ZSB9IGZyb20gJy4nO1xyXG5jb25zdCBTZXRCbG9jazJQb3dlciA9IChibG9jaykgPT4ge1xyXG4gICAgY29uc3QgeyBzY2VuZSB9ID0gYmxvY2s7XHJcbiAgICBjb25zdCBybmREb3duRHVyYXRpb25NYXggPSBHZXRSbmROdW0oMC41LCAxLjUpO1xyXG4gICAgY29uc3QgaW5pdFB0ciA9IChiRGF0YSwgYmxvY2spID0+IHtcclxuICAgICAgICBiRGF0YS5pc1B0ckRvd24gPSBmYWxzZTtcclxuICAgICAgICBiRGF0YS5kb3duRHVyYXRpb24gPSAwO1xyXG4gICAgICAgIGJsb2NrLnNldEFscGhhKDEpO1xyXG4gICAgfTtcclxuICAgIGxldCBiRGF0YSA9IHtcclxuICAgICAgICBpc1B0ckRvd246IGZhbHNlLFxyXG4gICAgICAgIGlzQ29tcGxldGU6IGZhbHNlLFxyXG4gICAgICAgIGRvd25EdXJhdGlvbjogMCxcclxuICAgICAgICBkb3duRHVyYXRpb25NYXg6IE1hdGguZmxvb3Iocm5kRG93bkR1cmF0aW9uTWF4ICogMTAwMCksXHJcbiAgICAgICAgcHRyRG93bjogZnVuY3Rpb24gKGJsb2NrLCBwdHIpIHtcclxuICAgICAgICAgICAgSW5wdXRQdHJEb3duKHB0cik7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzUHRyRG93bikge1xyXG4gICAgICAgICAgICAgICAgQWRkT2JzdGFjbGVCbG9jayhibG9jayk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5pc1B0ckRvd24gPSB0cnVlO1xyXG4gICAgICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgncG93ZXJCbG9ja09uJyk7XHJcbiAgICAgICAgICAgIGJsb2NrLnNldEFscGhhKDAuNSk7XHJcbiAgICAgICAgICAgIGNvbnN0IHR3TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICB0d0xpc3QucHVzaCh7XHJcbiAgICAgICAgICAgICAgICBmcm9tOiAwLCB0bzogdGhpcy5kb3duRHVyYXRpb25NYXgsIGR1cmF0aW9uOiB0aGlzLmRvd25EdXJhdGlvbk1heCxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAodHcpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpZiBrZWVwIHByZXNzIHBvd2VyIGJ0blxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLmlzUHRyRG93bilcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kb3duRHVyYXRpb24gPSB0dy5nZXRWYWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGlmIHJlbGVhc2UgcG93ZXIgYnRuIGJlZm9yZSBkb25lXHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRQdHIodGhpcywgYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0dy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKHR3KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZG9uZSBwb3dlciBidG4gcGxheSBzZnhcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNQdHJEb3duKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR3TGlzdC5zaGlmdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0dy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpbml0UHRyKHRoaXMsIGJsb2NrKTtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlzQ29tcGxldGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIEdhbWVBdWRpby5wbGF5U2Z4KCdwb3dlckJsb2NrT2ZmJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NlbmUudHdlZW5zLmFkZENvdW50ZXIodHdMaXN0LnNoaWZ0KCkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgdHdMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICAgICAgZnJvbTogMSwgdG86IDEuMSwgZHVyYXRpb246IDI1MCwgeW95bzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiAodHcsIGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5zZXRTY2FsZShkYXRhLnZhbHVlKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suc2V0U2NhbGUoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgR2FtZUF1ZGlvLnBsYXlTZngoJ3RvdWNoU2Z4Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgQ2xlYXJCbG9jayhibG9jaywgYmxvY2suZ2V0U2NvcmUoKSAqIHRoaXMuZG93bkR1cmF0aW9uTWF4IC8gMTAwMCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih0d0xpc3Quc2hpZnQoKSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwdHJVcDogZnVuY3Rpb24gKGJsb2NrLCBwdHIpIHtcclxuICAgICAgICAgICAgYmxvY2suc2V0QWxwaGEoMSk7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlzQ29tcGxldGUpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIGlmICghdGhpcy5pc1B0ckRvd24gfHwgSW5wdXRQdHJVcChwdHIpICE9PSAndG91Y2gnKSB7XHJcbiAgICAgICAgICAgICAgICBBZGRPYnN0YWNsZUJsb2NrKGJsb2NrKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBjaGNrIGlzIGtlZXAgcHJlc3MgdW50aWwgZG9uZVxyXG4gICAgICAgICAgICBpbml0UHRyKHRoaXMsIGJsb2NrKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIHB0ck91dDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBJbnB1dFB0ck91dCgpO1xyXG4gICAgICAgICAgICBpbml0UHRyKHRoaXMsIGJsb2NrKTtcclxuICAgICAgICB9LFxyXG4gICAgfTtcclxuICAgIGJsb2NrLmdldFR5cGVJbWcoKS5zZXREaXNwbGF5U2l6ZShDb21tb25TaXplLCBDb21tb25TaXplKTtcclxuICAgIGJsb2NrLnNldEJsb2NrRGF0YShiRGF0YSk7XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFNldEJsb2NrMlBvd2VyO1xyXG4iLCJpbXBvcnQgeyBHZXRSbmRJbnQgfSBmcm9tICdAc3JjL3V0aWxzL21hdGgnO1xyXG5pbXBvcnQgR2FtZUF1ZGlvIGZyb20gJ0BzcmMvc2NlbmVzL2F1ZGlvJztcclxuaW1wb3J0IHsgSW5wdXRQdHJEb3duLCBJbnB1dFB0ck91dCwgSW5wdXRQdHJVcCB9IGZyb20gJy4uLy4uL2lucHV0JztcclxuaW1wb3J0IHsgQWRkT2JzdGFjbGVCbG9jaywgQ2xlYXJCbG9jayB9IGZyb20gJy4uL3N5c3RlbSc7XHJcbmltcG9ydCB7IENvbW1vblNpemUgfSBmcm9tICcuJztcclxuY29uc3QgU2V0QmxvY2syTG9hZGluZyA9IChibG9jaykgPT4ge1xyXG4gICAgYmxvY2suc2V0VHlwZVR4dCgnJScpO1xyXG4gICAgYmxvY2suZ2V0VHlwZVR4dCgpLnNldEZvbnRTaXplKDUwKTtcclxuICAgIGxldCBiRGF0YSA9IHtcclxuICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxyXG4gICAgICAgIHB0ckRvd246IGZ1bmN0aW9uIChibG9jaywgcHRyKSB7IElucHV0UHRyRG93bihwdHIpOyB9LFxyXG4gICAgICAgIHB0clVwOiBmdW5jdGlvbiAoYmxvY2ssIHB0cikge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5pc0xvYWRpbmcgfHwgSW5wdXRQdHJVcChwdHIpICE9PSAndG91Y2gnKSB7XHJcbiAgICAgICAgICAgICAgICBBZGRPYnN0YWNsZUJsb2NrKGJsb2NrKTtcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB0aGlzLmlzTG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgIGNvbnN0IHJuZER1cmF0aW9uID0gR2V0Um5kSW50KDEsIDQpO1xyXG4gICAgICAgICAgICBjb25zdCBwcm9jZXNzU2Z4ID0gYmxvY2suc2NlbmUuc291bmQuYWRkKCdsb2FkaW5nQmxvY2tPblByb2Nlc3MnKTtcclxuICAgICAgICAgICAgR2FtZUF1ZGlvLnBsYXlTZnhJbnN0YW5jZUxvb3AocHJvY2Vzc1NmeCk7XHJcbiAgICAgICAgICAgIGJsb2NrLnNjZW5lLnR3ZWVucy5hZGRDb3VudGVyKHtcclxuICAgICAgICAgICAgICAgIGZyb206IDAsIHRvOiAxMDAsIGR1cmF0aW9uOiBybmREdXJhdGlvbiAqIDEwMDAsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3LCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcGVyY2VudGFnZSA9IGRhdGEudmFsdWUudG9GaXhlZCgwKTtcclxuICAgICAgICAgICAgICAgICAgICBibG9jay5zZXRUeXBlVHh0KHBlcmNlbnRhZ2UgKyAnJScpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBHYW1lQXVkaW8uc3RvcFNmeEluc3RhbmNlTG9vcChwcm9jZXNzU2Z4KTtcclxuICAgICAgICAgICAgICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgnbG9hZGluZ0Jsb2NrRG9uZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaXNMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYmxvY2suc2V0VHlwZVR4dCgnMTAwJScpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgndG91Y2hTZngnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ2xlYXJCbG9jayhibG9jaywgYmxvY2suZ2V0U2NvcmUoKSAqIHJuZER1cmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAxMDAwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwdHJPdXQ6IGZ1bmN0aW9uICgpIHsgSW5wdXRQdHJPdXQoKTsgfSxcclxuICAgIH07XHJcbiAgICBibG9jay5nZXRUeXBlSW1nKCkuc2V0RGlzcGxheVNpemUoQ29tbW9uU2l6ZSwgQ29tbW9uU2l6ZSk7XHJcbiAgICBibG9jay5zZXRCbG9ja0RhdGEoYkRhdGEpO1xyXG4gICAgcmV0dXJuIGJsb2NrO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBTZXRCbG9jazJMb2FkaW5nO1xyXG4iLCJpbXBvcnQgeyBHZXRSbmRJbnQgfSBmcm9tICdAc3JjL3V0aWxzL21hdGgnO1xyXG5pbXBvcnQgeyBBZGRPYnN0YWNsZUJsb2NrLCBDbGVhckJsb2NrIH0gZnJvbSAnLi4vc3lzdGVtJztcclxuaW1wb3J0IHsgSW5wdXRQdHJEb3duLCBJbnB1dFB0clVwLCBJbnB1dFB0ck91dCB9IGZyb20gJy4uLy4uL2lucHV0JztcclxuaW1wb3J0IHsgQ29tbW9uU2l6ZSB9IGZyb20gJy4nO1xyXG5jb25zdCBTZXRCbG9jazJUb3VjaCA9IChibG9jaykgPT4ge1xyXG4gICAgY29uc3Qgcm5kVG91Y2hDbnQgPSBHZXRSbmRJbnQoMiwgNSk7XHJcbiAgICBjb25zdCBkaXNhYmxlVG91Y2hEZWxheVRpbWUgPSAyNDA7XHJcbiAgICBsZXQgYkRhdGEgPSB7XHJcbiAgICAgICAgdG91Y2hDbnQ6IDAsXHJcbiAgICAgICAgbWF4VG91Y2hDbnQ6IHJuZFRvdWNoQ250LFxyXG4gICAgICAgIGlzQWJsZTJUb3VjaDogdHJ1ZSxcclxuICAgICAgICBwdHJEb3duOiBmdW5jdGlvbiAoYmxvY2ssIHB0cikgeyBJbnB1dFB0ckRvd24ocHRyKTsgfSxcclxuICAgICAgICBwdHJVcDogZnVuY3Rpb24gKGJsb2NrLCBwdHIpIHtcclxuICAgICAgICAgICAgaWYgKElucHV0UHRyVXAocHRyKSAhPT0gJ3RvdWNoJykge1xyXG4gICAgICAgICAgICAgICAgQWRkT2JzdGFjbGVCbG9jayhibG9jayk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzQWJsZTJUb3VjaClcclxuICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgdGhpcy50b3VjaENudCsrO1xyXG4gICAgICAgICAgICBpZiAodGhpcy50b3VjaENudCA+PSB0aGlzLm1heFRvdWNoQ250KSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRvdWNoQ250ID0gMDtcclxuICAgICAgICAgICAgICAgIENsZWFyQmxvY2soYmxvY2ssIGJsb2NrLmdldFNjb3JlKCkgKiB0aGlzLm1heFRvdWNoQ250KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vIGRpc2FibGUgY2xpY2ssIHRoZW4gYWJsZSBhZnRlciBkZWxheVxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc0FibGUyVG91Y2ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIGJsb2NrLnNjZW5lLnR3ZWVucy5hZGRDb3VudGVyKHtcclxuICAgICAgICAgICAgICAgICAgICBmcm9tOiAxLCB0bzogMS4xLCBkdXJhdGlvbjogZGlzYWJsZVRvdWNoRGVsYXlUaW1lLCB5b3lvOiB0cnVlLCBlYXNlOiAnQm91bmNlJyxcclxuICAgICAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3LCBkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJsb2NrLnNldFNjYWxlKGRhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBibG9jay5zZXRTY2FsZSgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5pc0FibGUyVG91Y2ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwdHJPdXQ6IGZ1bmN0aW9uICgpIHsgSW5wdXRQdHJPdXQoKTsgfVxyXG4gICAgfTtcclxuICAgIGJsb2NrLmdldFR5cGVJbWcoKS5zZXREaXNwbGF5U2l6ZShDb21tb25TaXplLCBDb21tb25TaXplKTtcclxuICAgIGJsb2NrLnNldEJsb2NrRGF0YShiRGF0YSk7XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFNldEJsb2NrMlRvdWNoO1xyXG4iLCJpbXBvcnQgeyBJbnB1dFB0ckRvd24sIElucHV0UHRyVXAsIElucHV0UHRyT3V0IH0gZnJvbSAnLi4vLi4vaW5wdXQnO1xyXG5pbXBvcnQgeyBBZGRPYnN0YWNsZUJsb2NrIH0gZnJvbSAnLi4vc3lzdGVtJztcclxuY29uc3QgT2JzdGFjbGVUZXh0dXJlTGlzdCA9IFsnb2JzdGFjbGVCYWxsJywgJ29ic3RhY2xlUmVjdCcsICdvYnN0YWNsZVNxdWFyZSddO1xyXG5jb25zdCBTZXRPYnN0YWNsZSA9IChibG9jaykgPT4ge1xyXG4gICAgbGV0IGJEYXRhID0ge1xyXG4gICAgICAgIGlzQWJsZTJUb3VjaDogdHJ1ZSxcclxuICAgICAgICBwdHJEb3duOiBmdW5jdGlvbiAoYmxvY2ssIHB0cikgeyBJbnB1dFB0ckRvd24ocHRyKTsgfSxcclxuICAgICAgICBwdHJVcDogZnVuY3Rpb24gKGJsb2NrLCBwdHIpIHtcclxuICAgICAgICAgICAgY29uc3QgaW5wdXRUeXBlID0gSW5wdXRQdHJVcChwdHIpO1xyXG4gICAgICAgICAgICBpZiAoaW5wdXRUeXBlICE9PSAndG91Y2gnKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNBYmxlMlRvdWNoKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB0aGlzLmlzQWJsZTJUb3VjaCA9IGZhbHNlO1xyXG4gICAgICAgICAgICBBZGRPYnN0YWNsZUJsb2NrKGJsb2NrKTtcclxuICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHRoaXMuaXNBYmxlMlRvdWNoID0gdHJ1ZTsgfSwgMTAwMCk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBwdHJPdXQ6IGZ1bmN0aW9uICgpIHsgSW5wdXRQdHJPdXQoKTsgfVxyXG4gICAgfTtcclxuICAgIGJsb2NrLmFkZEJsb2NrRGF0YShiRGF0YSk7XHJcbiAgICAvLyBzZXQgc2hhcGUgb2JzdGFjbGUgdGV4dHVyZVxyXG4gICAgY29uc3QgbmFtZSA9IGJsb2NrLmdldFNoYXBlTmFtZSgpO1xyXG4gICAgY29uc3QgY2FwaXRhbFNoYXBlID0gbmFtZVswXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSgxKTtcclxuICAgIGNvbnN0IG9ic3RhY2xlU2hhcGUgPSAnb2JzdGFjbGUnICsgY2FwaXRhbFNoYXBlO1xyXG4gICAgYmxvY2suYWRkU2hhcGUoeyBzY29yZTogMCwgaW1nVGV4dHVyZTogb2JzdGFjbGVTaGFwZSB9KTtcclxuICAgIGJsb2NrLmdldFNoYXBlSW1nKCkuc2V0VGV4dHVyZShvYnN0YWNsZVNoYXBlKTtcclxuICAgIHJldHVybiBibG9jaztcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgU2V0T2JzdGFjbGU7XHJcbmV4cG9ydCB7IE9ic3RhY2xlVGV4dHVyZUxpc3QgfTtcclxuIiwiaW1wb3J0IHsgU2V0QmxvY2tUeXBlMkluaXRCYXNpYyB9IGZyb20gXCIuLi9iYXNpY1wiO1xyXG5pbXBvcnQgU2V0QmxvY2syQWQgZnJvbSAnLi9hZCc7XHJcbmltcG9ydCBTZXRCbG9jazJQb3dlciBmcm9tICcuL3Bvd2VyJztcclxuaW1wb3J0IFNldEJsb2NrMkxvYWRpbmcgZnJvbSAnLi9sb2FkaW5nJztcclxuaW1wb3J0IFNldEJsb2NrMlRvdWNoIGZyb20gJy4vdG91Y2gnO1xyXG5pbXBvcnQgU2V0T2JzdGFjbGUgZnJvbSAnLi9vYnN0YWNsZSc7XHJcbmltcG9ydCB7IEdldFJuZEludCB9IGZyb20gJ0BzcmMvdXRpbHMvbWF0aCc7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQHNyYy91c2VyU2V0dGluZ1wiO1xyXG5jb25zdCBDb21tb25TaXplID0gVmlldy5jYWxjUmF0aW8oMTAwKTtcclxuY29uc3QgQmxvY2tVbmlxdWVQcm9wZXJ0aWVzID0gW1xyXG4gICAge1xyXG4gICAgICAgIHR5cGVOYW1lOiAnJyxcclxuICAgICAgICBzcGF3bkNoYW5jZTogMCxcclxuICAgICAgICBzY29yZTogMCxcclxuICAgICAgICBpY29uVGV4dHVyZTogJycsXHJcbiAgICAgICAgaW1nV2lkdGg6IDAsXHJcbiAgICAgICAgaW1nSGVpZ2h0OiAwLFxyXG4gICAgICAgIHRpbWVJbmNyZWFzZUNoYW5jZTogMCxcclxuICAgICAgICB0aW1lSW5jcmVhc2VNaW46IDAsXHJcbiAgICAgICAgdGltZUluY3JlYXNlTWF4OiAwLFxyXG4gICAgICAgIHNldEZ1bmM6IChibG9jaykgPT4geyBTZXRCbG9ja1R5cGUySW5pdEJhc2ljKGJsb2NrKTsgcmV0dXJuIGJsb2NrOyB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGVOYW1lOiAnb2JzdGFjbGUnLFxyXG4gICAgICAgIHNwYXduQ2hhbmNlOiAwLFxyXG4gICAgICAgIHNjb3JlOiAwLFxyXG4gICAgICAgIGljb25UZXh0dXJlOiAnJyxcclxuICAgICAgICBpbWdXaWR0aDogMCxcclxuICAgICAgICBpbWdIZWlnaHQ6IDAsXHJcbiAgICAgICAgdGltZUluY3JlYXNlQ2hhbmNlOiAwLFxyXG4gICAgICAgIHRpbWVJbmNyZWFzZU1pbjogMCxcclxuICAgICAgICB0aW1lSW5jcmVhc2VNYXg6IDAsXHJcbiAgICAgICAgc2V0RnVuYzogKGJsb2NrKSA9PiB7IFNldE9ic3RhY2xlKGJsb2NrKTsgcmV0dXJuIGJsb2NrOyB9XHJcbiAgICB9LFxyXG4gICAge1xyXG4gICAgICAgIHR5cGVOYW1lOiAnYWQnLFxyXG4gICAgICAgIC8vIHNwYXduQ2hhbmNlOiAxLFxyXG4gICAgICAgIHNwYXduQ2hhbmNlOiAwLFxyXG4gICAgICAgIHNjb3JlOiA5MCxcclxuICAgICAgICBpY29uVGV4dHVyZTogJycsXHJcbiAgICAgICAgaW1nV2lkdGg6IDEwMCxcclxuICAgICAgICBpbWdIZWlnaHQ6IDEwMCxcclxuICAgICAgICB0aW1lSW5jcmVhc2VDaGFuY2U6IDEwMCxcclxuICAgICAgICB0aW1lSW5jcmVhc2VNaW46IDMgKiAxMDAwLFxyXG4gICAgICAgIHRpbWVJbmNyZWFzZU1heDogNSAqIDEwMDAsXHJcbiAgICAgICAgc2V0RnVuYzogKGJsb2NrKSA9PiB7IHJldHVybiBTZXRCbG9jazJBZChibG9jayk7IH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZU5hbWU6ICdwb3dlcicsXHJcbiAgICAgICAgc3Bhd25DaGFuY2U6IDEsXHJcbiAgICAgICAgc2NvcmU6IDYwLFxyXG4gICAgICAgIGljb25UZXh0dXJlOiAncG93ZXInLFxyXG4gICAgICAgIGltZ1dpZHRoOiAxMDAsXHJcbiAgICAgICAgaW1nSGVpZ2h0OiAxMDAsXHJcbiAgICAgICAgdGltZUluY3JlYXNlQ2hhbmNlOiA1MCxcclxuICAgICAgICB0aW1lSW5jcmVhc2VNaW46IDEgKiAxMDAwLFxyXG4gICAgICAgIHRpbWVJbmNyZWFzZU1heDogMiAqIDEwMDAsXHJcbiAgICAgICAgc2V0RnVuYzogKGJsb2NrKSA9PiB7IHJldHVybiBTZXRCbG9jazJQb3dlcihibG9jayk7IH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZU5hbWU6ICdsb2FkaW5nJyxcclxuICAgICAgICBzcGF3bkNoYW5jZTogMSxcclxuICAgICAgICBzY29yZTogNSxcclxuICAgICAgICBpY29uVGV4dHVyZTogJycsXHJcbiAgICAgICAgaW1nV2lkdGg6IDEwMCxcclxuICAgICAgICBpbWdIZWlnaHQ6IDEwMCxcclxuICAgICAgICB0aW1lSW5jcmVhc2VDaGFuY2U6IDMwLFxyXG4gICAgICAgIHRpbWVJbmNyZWFzZU1pbjogMC41ICogMTAwMCxcclxuICAgICAgICB0aW1lSW5jcmVhc2VNYXg6IDEgKiAxMDAwLFxyXG4gICAgICAgIHNldEZ1bmM6IChibG9jaykgPT4geyByZXR1cm4gU2V0QmxvY2syTG9hZGluZyhibG9jayk7IH1cclxuICAgIH0sXHJcbiAgICB7XHJcbiAgICAgICAgdHlwZU5hbWU6ICd0b3VjaCcsXHJcbiAgICAgICAgc3Bhd25DaGFuY2U6IDEsXHJcbiAgICAgICAgc2NvcmU6IDEwLFxyXG4gICAgICAgIGljb25UZXh0dXJlOiAndG91Y2gnLFxyXG4gICAgICAgIGltZ1dpZHRoOiAxMDAsXHJcbiAgICAgICAgaW1nSGVpZ2h0OiAxMDAsXHJcbiAgICAgICAgdGltZUluY3JlYXNlQ2hhbmNlOiAzMCxcclxuICAgICAgICB0aW1lSW5jcmVhc2VNaW46IDIgKiAxMDAwLFxyXG4gICAgICAgIHRpbWVJbmNyZWFzZU1heDogNCAqIDEwMDAsXHJcbiAgICAgICAgc2V0RnVuYzogKGJsb2NrKSA9PiB7IHJldHVybiBTZXRCbG9jazJUb3VjaChibG9jayk7IH1cclxuICAgIH0sXHJcbl07XHJcbmNvbnN0IFRCbG9ja1R5cGVMaXN0ID0gQmxvY2tVbmlxdWVQcm9wZXJ0aWVzLm1hcChlbGUgPT4geyBpZiAoZWxlLnR5cGVOYW1lICE9PSAnJylcclxuICAgIHJldHVybiBlbGUudHlwZU5hbWU7IH0pO1xyXG5jb25zdCBTcGF3bk1heENoYW5jZSA9IEJsb2NrVW5pcXVlUHJvcGVydGllcy5tYXAoZWxlID0+IGVsZS5zcGF3bkNoYW5jZSkucmVkdWNlKChwcmV2VmFsdWUsIGN1cnJWYWx1ZSkgPT4ge1xyXG4gICAgcmV0dXJuIHByZXZWYWx1ZSArIGN1cnJWYWx1ZTtcclxufSwgMCk7XHJcbmNvbnN0IFNldDJUeXBlQmxvY2sgPSAoYmxvY2ssIHR5cGVOYW1lKSA9PiB7XHJcbiAgICBsZXQgZmlsdGVyZWRUeXBlID0gQmxvY2tVbmlxdWVQcm9wZXJ0aWVzLmZpbmQoZWxlID0+IGVsZS50eXBlTmFtZSA9PT0gdHlwZU5hbWUpO1xyXG4gICAgaWYgKGZpbHRlcmVkVHlwZSkge1xyXG4gICAgICAgIFNldEJsb2NrVHlwZTJJbml0QmFzaWMoYmxvY2spO1xyXG4gICAgICAgIGJsb2NrLnNldFR5cGVOYW1lKHR5cGVOYW1lKTtcclxuICAgICAgICBibG9jay5zZXRUeXBlSW1nKGZpbHRlcmVkVHlwZS5pY29uVGV4dHVyZSk7XHJcbiAgICAgICAgYmxvY2suc2V0VHlwZUltZ0Rpc3BsYXlTaXplKGZpbHRlcmVkVHlwZS5pbWdXaWR0aCwgZmlsdGVyZWRUeXBlLmltZ0hlaWdodCk7XHJcbiAgICAgICAgYmxvY2suYWRkU2NvcmUoZmlsdGVyZWRUeXBlLnNjb3JlKTtcclxuICAgICAgICBibG9jay5zZXRUaW1lSW5jcmVhc2Uoe1xyXG4gICAgICAgICAgICBjaGFuY2U6IGZpbHRlcmVkVHlwZS50aW1lSW5jcmVhc2VDaGFuY2UsXHJcbiAgICAgICAgICAgIHZhbHVlOiBHZXRSbmRJbnQoZmlsdGVyZWRUeXBlLnRpbWVJbmNyZWFzZU1pbiwgZmlsdGVyZWRUeXBlLnRpbWVJbmNyZWFzZU1heClcclxuICAgICAgICB9KTtcclxuICAgICAgICBmaWx0ZXJlZFR5cGUuc2V0RnVuYyhibG9jayk7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgY29uc29sZS5sb2coJ1NldDJUeXBlQmxvY2s6IHR5cGVOYW1lIGlzIG5vdCBmb3VuZCBpbiB0aGUgYmxvY2sgdHlwZSBsaXN0Jyk7XHJcbn07XHJcbmV4cG9ydCB7IEJsb2NrVW5pcXVlUHJvcGVydGllcywgQ29tbW9uU2l6ZSwgVEJsb2NrVHlwZUxpc3QsIFNwYXduTWF4Q2hhbmNlLCBTZXQyVHlwZUJsb2NrLCB9O1xyXG4iLCJpbXBvcnQgeyBHYW1lQXVkaW9EYXRhIH0gZnJvbSAnQHNyYy9zY2VuZXMvYXVkaW8nO1xyXG5jb25zdCBHYW1lRGF0YSA9IE9iamVjdC5hc3NpZ24oeyBiZXN0OiAwIH0sIEdhbWVBdWRpb0RhdGEpO1xyXG4vLyBleHBvcnQgZGVmYXVsdCBUR2FtZURhdGE7XHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVEYXRhO1xyXG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBzcmMvdXNlclNldHRpbmdcIjtcclxuY29uc3QgR2FtZUZvbnQgPSB7XHJcbiAgICBndWlkZVR4dFk6IFZpZXcuaCAtIDgwLFxyXG59O1xyXG5jb25zdCBJbml0Rm9udCA9ICgpID0+IHtcclxufTtcclxuY29uc3QgQ3JlYXRlRm9udCA9ICgpID0+IHtcclxufTtcclxuY29uc3QgU2V0Rm9udFN0eWxlID0gKHR4dCkgPT4ge1xyXG4gICAgdHh0LnNldEZvbnRTdHlsZSgnYm9sZCcpO1xyXG4gICAgdHh0LnNldEZvbnRGYW1pbHkoJ0FyaWFsIEJsYWNrJyk7XHJcbiAgICB0eHQuc2V0T3JpZ2luKDAuNSk7XHJcbiAgICByZXR1cm4gdHh0O1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBHYW1lRm9udDtcclxuZXhwb3J0IHsgSW5pdEZvbnQsIENyZWF0ZUZvbnQsIFNldEZvbnRTdHlsZSB9O1xyXG4iLCJpbXBvcnQgeyBDb21tb25HYWdlLCBHZXRBc3NldEZpbGVzIH0gZnJvbSBcIkBzcmMvc2NlbmVzL2Fzc2V0VXRpbHNcIjtcclxuaW1wb3J0IHsgVmlldyB9IGZyb20gXCJAc3JjL3VzZXJTZXR0aW5nXCI7XHJcbmltcG9ydCB7IFNldEZvbnRTdHlsZSB9IGZyb20gXCIuLi9mb250XCI7XHJcbmNvbnN0IEdhbWVHYWdlQ29sb3JMaXN0ID0gWydibHVlJywgJ3JlZCcsICd5ZWxsb3cnXTtcclxuY29uc3QgR2FtZUdhZ2UgPSB7XHJcbiAgICBoZWlnaHQ6IDIwLFxyXG4gICAgdHh0TWFyZ2luOiAzMCxcclxuICAgIGdhZ2VzOiBbXSxcclxuICAgIGNvbG9yOiAnYmx1ZScsXHJcbn07XHJcbmNvbnN0IEdldEdhZ2VBc3NldHMgPSAoY29sb3IsIGV4Y2VwdGlvbktleXMpID0+IHtcclxuICAgIGxldCBhc3NldExpc3QgPSBbXTtcclxuICAgIGlmIChjb2xvcikge1xyXG4gICAgICAgIEdhbWVHYWdlLmNvbG9yID0gY29sb3I7XHJcbiAgICAgICAgYXNzZXRMaXN0ID0gW1xyXG4gICAgICAgICAgICB7IGtleTogY29sb3IgKyAnQmcnLCB1cmw6IENvbW1vbkdhZ2UgKyBjb2xvciArICdCZy5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgIHsga2V5OiBjb2xvciArICdCdG4nLCB1cmw6IENvbW1vbkdhZ2UgKyBjb2xvciArICdCdG4ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICB7IGtleTogY29sb3IgKyAnSGFuZGxlRG93bicsIHVybDogQ29tbW9uR2FnZSArIGNvbG9yICsgJ0hhbmRsZURvd24ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICB7IGtleTogY29sb3IgKyAnSGFuZGxlVXAnLCB1cmw6IENvbW1vbkdhZ2UgKyBjb2xvciArICdIYW5kbGVVcC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgXTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgIEdhbWVHYWdlQ29sb3JMaXN0Lm1hcCgoZ2FnZUNvbG9yKSA9PiB7XHJcbiAgICAgICAgICAgIGFzc2V0TGlzdC5wdXNoKHsga2V5OiBnYWdlQ29sb3IgKyAnQmcnLCB1cmw6IENvbW1vbkdhZ2UgKyBnYWdlQ29sb3IgKyAnQmcucG5nJywgdHlwZTogJ2ltYWdlJyB9LCB7IGtleTogZ2FnZUNvbG9yICsgJ0J0bicsIHVybDogQ29tbW9uR2FnZSArIGdhZ2VDb2xvciArICdCdG4ucG5nJywgdHlwZTogJ2ltYWdlJyB9LCB7IGtleTogZ2FnZUNvbG9yICsgJ0hhbmRsZURvd24nLCB1cmw6IENvbW1vbkdhZ2UgKyBnYWdlQ29sb3IgKyAnSGFuZGxlRG93bi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sIHsga2V5OiBnYWdlQ29sb3IgKyAnSGFuZGxlVXAnLCB1cmw6IENvbW1vbkdhZ2UgKyBnYWdlQ29sb3IgKyAnSGFuZGxlVXAucG5nJywgdHlwZTogJ2ltYWdlJyB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBHZXRBc3NldEZpbGVzKGFzc2V0TGlzdCwgZXhjZXB0aW9uS2V5cyk7XHJcbn07XHJcbmNvbnN0IEluaXRHYWdlID0gKG5hbWUpID0+IHtcclxuICAgIGNvbnN0IGdhZ2VMYXllciA9IEdhbWVHYWdlLmdhZ2VzLmZpbmQoZ2FnZSA9PiBnYWdlLm5hbWUgPT09IG5hbWUpO1xyXG4gICAgaWYgKGdhZ2VMYXllcikge1xyXG4gICAgICAgIC8vIG5hbWVkR2FnZVxyXG4gICAgfVxyXG59O1xyXG5jb25zdCBDcmVhdGVHYWdlQmFyID0gKHNjZW5lLCB4LCB5LCBlbmRNb3ZlQ2FsbGJhY2ssIGRhdGEpID0+IHtcclxuICAgIHZhciBfYSwgX2IsIF9jLCBfZCwgX2UsIF9mLCBfZywgX2gsIF9qLCBfaywgX2wsIF9tLCBfbywgX3AsIF9xLCBfcjtcclxuICAgIGNvbnN0IGxheWVyID0gc2NlbmUuYWRkLmxheWVyKCk7XHJcbiAgICAvLyBzZXR0aW5nIHBhcmFtZXRlciBpbml0IGRhdGFcclxuICAgIGxheWVyLnggPSB4O1xyXG4gICAgbGF5ZXIueSA9IHk7XHJcbiAgICBsYXllci5nYWdlTnVtTWluID0gKF9hID0gZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLm51bU1pbikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogMDtcclxuICAgIGxheWVyLmdhZ2VOdW1NYXggPSAoX2IgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEubnVtTWluKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiAxMDA7XHJcbiAgICBsYXllci5nYWdlTnVtID0gKGxheWVyLmdhZ2VOdW1NaW4gKyBsYXllci5nYWdlTnVtTWF4KSAvIDI7XHJcbiAgICBsYXllci5pc0FibGUgPSAoX2MgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuaXNBYmxlKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiB0cnVlO1xyXG4gICAgY29uc3QgY29sb3IgPSAoX2QgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuY29sb3IpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IEdhbWVHYWdlLmNvbG9yO1xyXG4gICAgY29uc3QgdyA9IChfZSA9IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS53aWR0aCkgIT09IG51bGwgJiYgX2UgIT09IHZvaWQgMCA/IF9lIDogVmlldy5jZW50ZXJYO1xyXG4gICAgY29uc3QgaCA9IChfZiA9IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5oZWlnaHQpICE9PSBudWxsICYmIF9mICE9PSB2b2lkIDAgPyBfZiA6IEdhbWVHYWdlLmhlaWdodDtcclxuICAgIGNvbnN0IGJnVGV4dHVyZSA9IChfZyA9IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5iZ1R4dHVyZSkgIT09IG51bGwgJiYgX2cgIT09IHZvaWQgMCA/IF9nIDogY29sb3IgKyAnQmcnO1xyXG4gICAgY29uc3QgYnRuVGV4dHVyZSA9IChfaCA9IGRhdGEgPT09IG51bGwgfHwgZGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGF0YS5idG5UZXh0dXJlKSAhPT0gbnVsbCAmJiBfaCAhPT0gdm9pZCAwID8gX2ggOiBjb2xvciArICdCdG4nO1xyXG4gICAgY29uc3QgaGFuZGxlVXBUZXh0dXJlID0gKF9rID0gKF9qID0gZGF0YSA9PT0gbnVsbCB8fCBkYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkYXRhLmhhbmRsZSkgPT09IG51bGwgfHwgX2ogPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9qLnVwVGV4dHVyZSkgIT09IG51bGwgJiYgX2sgIT09IHZvaWQgMCA/IF9rIDogY29sb3IgKyAnSGFuZGxlVXAnO1xyXG4gICAgY29uc3QgaGFuZGxlRG93blRleHR1cmUgPSAoX20gPSAoX2wgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEuaGFuZGxlKSA9PT0gbnVsbCB8fCBfbCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2wudXBUZXh0dXJlKSAhPT0gbnVsbCAmJiBfbSAhPT0gdm9pZCAwID8gX20gOiBjb2xvciArICdIYW5kbGVEb3duJztcclxuICAgIGNvbnN0IHR4dFggPSAoX3AgPSAoX28gPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEudHh0KSA9PT0gbnVsbCB8fCBfbyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX28ueCkgIT09IG51bGwgJiYgX3AgIT09IHZvaWQgMCA/IF9wIDogVmlldy5jZW50ZXJYIC8gMiArIEdhbWVHYWdlLnR4dE1hcmdpbjtcclxuICAgIGNvbnN0IHR4dFkgPSAoX3IgPSAoX3EgPSBkYXRhID09PSBudWxsIHx8IGRhdGEgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRhdGEudHh0KSA9PT0gbnVsbCB8fCBfcSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3EueSkgIT09IG51bGwgJiYgX3IgIT09IHZvaWQgMCA/IF9yIDogMDtcclxuICAgIGNvbnN0IGdhZ2VCZyA9IHNjZW5lLmFkZC5pbWFnZSgwLCAwLCBiZ1RleHR1cmUpO1xyXG4gICAgZ2FnZUJnLnNldERpc3BsYXlTaXplKHcsIGgpO1xyXG4gICAgY29uc3QgZ2FnZUJhciA9IHNjZW5lLmFkZC5pbWFnZSgwLCAwLCBidG5UZXh0dXJlKTtcclxuICAgIGdhZ2VCYXIuc2V0RGlzcGxheVNpemUoVmlldy5jZW50ZXJYIC8gMiwgR2FtZUdhZ2UuaGVpZ2h0KTtcclxuICAgIGdhZ2VCYXIuc2V0T3JpZ2luKDAsIDAuNSk7XHJcbiAgICBnYWdlQmFyLnNldFBvc2l0aW9uKC1WaWV3LmNlbnRlclggLyAyLCAwKTtcclxuICAgIGNvbnN0IGdhZ2VCYXJIYW5kbGUgPSBzY2VuZS5hZGQuaW1hZ2UoMCwgMCwgaGFuZGxlVXBUZXh0dXJlKTtcclxuICAgIGNvbnN0IGdhZ2VUeHQgPSBzY2VuZS5hZGQudGV4dCgwLCAtR2FtZUdhZ2UuaGVpZ2h0LCBsYXllci5nYWdlTnVtLnRvU3RyaW5nKCkpO1xyXG4gICAgZ2FnZVR4dC5zZXRQb3NpdGlvbih0eHRYLCB0eHRZKTtcclxuICAgIFNldEZvbnRTdHlsZShnYWdlVHh0KTtcclxuICAgIGxheWVyLmdhZ2VQb3NYID0gMDsgLy8gZGVmYXVsdCBtaWRkbGUgdmFsdWVcclxuICAgIGxheWVyLmdhZ2VQb3NYTWluID0gLWdhZ2VCZy53aWR0aCAvIDIgKyBnYWdlQmFySGFuZGxlLndpZHRoIC8gMjtcclxuICAgIGxheWVyLmdhZ2VQb3NYTWF4ID0gZ2FnZUJnLndpZHRoIC8gMjtcclxuICAgIGxheWVyLmdhZ2VQb3NYTGVuZ3RoID0gZ2FnZUJnLndpZHRoIC0gZ2FnZUJhckhhbmRsZS53aWR0aCAvIDI7XHJcbiAgICBsYXllci5zZXRHYWdlSGFuZGxlRnJhbWUgPSAoaXNEb3duKSA9PiB7XHJcbiAgICAgICAgZ2FnZUJhckhhbmRsZS5zZXRUZXh0dXJlKGlzRG93biA/IGhhbmRsZURvd25UZXh0dXJlIDogaGFuZGxlVXBUZXh0dXJlKTtcclxuICAgIH07XHJcbiAgICBsYXllci5zZXRHYWdlQmFyU2l6ZSA9IChnYWdlUG9zKSA9PiB7XHJcbiAgICAgICAgbGV0IGdhZ2VQb3NYID0gZ2FnZVBvcyAtIGxheWVyLng7XHJcbiAgICAgICAgaWYgKGdhZ2VQb3NYIDw9IGxheWVyLmdhZ2VQb3NYTWluKVxyXG4gICAgICAgICAgICBnYWdlUG9zWCA9IGxheWVyLmdhZ2VQb3NYTWluO1xyXG4gICAgICAgIGVsc2UgaWYgKGdhZ2VQb3NYID49IGxheWVyLmdhZ2VQb3NYTWF4KVxyXG4gICAgICAgICAgICBnYWdlUG9zWCA9IGxheWVyLmdhZ2VQb3NYTWF4O1xyXG4gICAgICAgIGxheWVyLmdhZ2VQb3NYID0gZ2FnZVBvc1g7XHJcbiAgICAgICAgbGF5ZXIuZ2FnZU51bSA9IE1hdGguZmxvb3IoKGxheWVyLmdhZ2VOdW1NYXggLSBsYXllci5nYWdlTnVtTWluKSAqIE1hdGguYWJzKGdhZ2VQb3NYIC0gbGF5ZXIuZ2FnZVBvc1hNaW4pIC8gbGF5ZXIuZ2FnZVBvc1hMZW5ndGgpO1xyXG4gICAgICAgIGxheWVyLnVwZGF0ZUdhZ2UoKTtcclxuICAgIH07XHJcbiAgICBsYXllci5zZXRHYWdlTnVtID0gKGdhZ2VOdW0pID0+IHtcclxuICAgICAgICBsZXQgZ2FnZU51bWJlciA9IGdhZ2VOdW07XHJcbiAgICAgICAgaWYgKGdhZ2VOdW1iZXIgPCBsYXllci5nYWdlTnVtTWluKVxyXG4gICAgICAgICAgICBnYWdlTnVtYmVyID0gbGF5ZXIuZ2FnZU51bU1pbjtcclxuICAgICAgICBlbHNlIGlmIChnYWdlTnVtYmVyID4gbGF5ZXIuZ2FnZU51bU1heClcclxuICAgICAgICAgICAgZ2FnZU51bWJlciA9IGxheWVyLmdhZ2VOdW1NYXg7XHJcbiAgICAgICAgbGF5ZXIuZ2FnZU51bSA9IGdhZ2VOdW1iZXI7XHJcbiAgICAgICAgbGF5ZXIuZ2FnZVBvc1ggPSBsYXllci5nYWdlUG9zWE1pbiArIChsYXllci5nYWdlTnVtIC8gKGxheWVyLmdhZ2VOdW1NYXggLSBsYXllci5nYWdlTnVtTWluKSAqIGxheWVyLmdhZ2VQb3NYTGVuZ3RoKTtcclxuICAgICAgICBsYXllci51cGRhdGVHYWdlKCk7XHJcbiAgICB9O1xyXG4gICAgbGF5ZXIudXBkYXRlR2FnZSA9ICgpID0+IHtcclxuICAgICAgICBnYWdlQmFyLnNldERpc3BsYXlTaXplKGxheWVyLmdhZ2VQb3NYICsgZ2FnZUJhci53aWR0aCAvIDIsIEdhbWVHYWdlLmhlaWdodCk7XHJcbiAgICAgICAgZ2FnZUJhckhhbmRsZS54ID0gbGF5ZXIuZ2FnZVBvc1ggKyBnYWdlQmFyLndpZHRoIC0gZ2FnZUJhckhhbmRsZS53aWR0aCAvIDI7XHJcbiAgICAgICAgZ2FnZVR4dC5zZXRUZXh0KGxheWVyLmdhZ2VOdW0udG9GaXhlZCgwKSk7XHJcbiAgICB9O1xyXG4gICAgbGF5ZXIuc2V0QWJsZSA9IChpc0FibGUpID0+IHtcclxuICAgICAgICBsYXllci5pc0FibGUgPSBpc0FibGU7XHJcbiAgICAgICAgbGF5ZXIuaXNBYmxlID8gbGF5ZXIuc2V0QWxwaGEoMSkgOiBsYXllci5zZXRBbHBoYSgwLjUpO1xyXG4gICAgICAgIHJldHVybiBsYXllci5pc0FibGU7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZHJhZ1N0YXJ0ID0gKCkgPT4ge1xyXG4gICAgICAgIGxheWVyLmlzQWJsZSAmJiBsYXllci5zZXRHYWdlSGFuZGxlRnJhbWUodHJ1ZSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgZHJhZ2dpbmcgPSAoZHJhZ1gpID0+IHtcclxuICAgICAgICBsYXllci5pc0FibGUgJiYgbGF5ZXIuc2V0R2FnZUJhclNpemUoZHJhZ1gpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGRyYWdFbmQgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKGxheWVyLmlzQWJsZSkge1xyXG4gICAgICAgICAgICBsYXllci5zZXRHYWdlSGFuZGxlRnJhbWUoZmFsc2UpO1xyXG4gICAgICAgICAgICBlbmRNb3ZlQ2FsbGJhY2sgJiYgZW5kTW92ZUNhbGxiYWNrKGxheWVyLmdhZ2VOdW1NaW4sIGxheWVyLmdhZ2VOdW1NYXgsIGxheWVyLmdhZ2VOdW0pO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBbZ2FnZUJnLCBnYWdlQmFyXS5tYXAoKGJhcikgPT4ge1xyXG4gICAgICAgIGJhci5zZXRJbnRlcmFjdGl2ZSh7IGRyYWdnYWJsZTogdHJ1ZSB9KTtcclxuICAgICAgICBiYXIub24oJ2RyYWdzdGFydCcsIChwdHIpID0+IHtcclxuICAgICAgICAgICAgZHJhZ1N0YXJ0KCk7XHJcbiAgICAgICAgICAgIGRyYWdnaW5nKHB0ci54KTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBiYXIub24oJ2RyYWcnLCAocHRyLCBkcmFnWCkgPT4geyBkcmFnZ2luZyhwdHIueCk7IH0pO1xyXG4gICAgICAgIGJhci5vbignZHJhZ2VuZCcsIChwdHIpID0+IHsgZHJhZ0VuZCgpOyB9KTtcclxuICAgIH0pO1xyXG4gICAgZ2FnZUJhckhhbmRsZS5zZXRJbnRlcmFjdGl2ZSh7IGRyYWdnYWJsZTogdHJ1ZSB9KTtcclxuICAgIGdhZ2VCYXJIYW5kbGUub24oJ2RyYWdzdGFydCcsICgpID0+IHsgZHJhZ1N0YXJ0KCk7IH0pO1xyXG4gICAgZ2FnZUJhckhhbmRsZS5vbignZHJhZycsIChwdHIsIGRyYWdYKSA9PiB7IGRyYWdnaW5nKGRyYWdYKTsgfSk7XHJcbiAgICBnYWdlQmFySGFuZGxlLm9uKCdkcmFnZW5kJywgKCkgPT4geyBkcmFnRW5kKCk7IH0pO1xyXG4gICAgbGF5ZXIuc2V0QWJsZShsYXllci5pc0FibGUpO1xyXG4gICAgW2dhZ2VCZywgZ2FnZUJhciwgZ2FnZUJhckhhbmRsZSwgZ2FnZVR4dF0ubWFwKChjaGlsZCkgPT4ge1xyXG4gICAgICAgIGNoaWxkLnNldFBvc2l0aW9uKGNoaWxkLnggKyB4LCBjaGlsZC55ICsgeSk7XHJcbiAgICAgICAgbGF5ZXIuYWRkKGNoaWxkKTtcclxuICAgIH0pO1xyXG4gICAgR2FtZUdhZ2UuZ2FnZXMucHVzaChsYXllcik7XHJcbiAgICBJbml0R2FnZShsYXllci5uYW1lKTtcclxuICAgIHJldHVybiBsYXllcjtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgR2FtZUdhZ2U7XHJcbmV4cG9ydCB7IEdldEdhZ2VBc3NldHMsIEluaXRHYWdlLCBDcmVhdGVHYWdlQmFyLCB9O1xyXG4iLCJjb25zdCBHYW1lR2VzdHVyZSA9IHtcclxuICAgIHR5cGU6ICcnLFxyXG4gICAgdHlwZUhpc3Rvcnk6IFtdLFxyXG4gICAgaW5pdFBvczogeyB4OiAwLCB5OiAwIH0sXHJcbiAgICBpc0hvbGRpbmdEb3duOiBmYWxzZSxcclxuICAgIGhvbGREdXJhdGlvbjogMCxcclxuICAgIGhvbGRNYXhEdXJhdGlvbjogMTAwMCxcclxuICAgIGNvbWZ5R2FwVG91Y2hWYWx1ZTogMTUsXHJcbiAgICBzdGFydEhvbGQ6ICgpID0+IHsgR2FtZUdlc3R1cmUuaXNIb2xkaW5nRG93biA9IHRydWU7IHJldHVybiBHYW1lR2VzdHVyZTsgfSxcclxuICAgIHJlc2V0SG9sZDogKCkgPT4ge1xyXG4gICAgICAgIEdhbWVHZXN0dXJlLmlzSG9sZGluZ0Rvd24gPSBmYWxzZTtcclxuICAgICAgICBHYW1lR2VzdHVyZS5pbml0UG9zID0geyB4OiAwLCB5OiAwIH07XHJcbiAgICAgICAgR2FtZUdlc3R1cmUuaG9sZER1cmF0aW9uID0gMDtcclxuICAgICAgICBHYW1lR2VzdHVyZS5zZXRUeXBlKCcnKTtcclxuICAgICAgICByZXR1cm4gR2FtZUdlc3R1cmU7XHJcbiAgICB9LFxyXG4gICAgc2V0SG9sZER1cmF0aW9uOiBmdW5jdGlvbiAoZHVyYXRpb24pIHsgR2FtZUdlc3R1cmUuaG9sZER1cmF0aW9uID0gZHVyYXRpb247IHJldHVybiBHYW1lR2VzdHVyZTsgfSxcclxuICAgIHNldEluaXRQb3M6IGZ1bmN0aW9uICh4LCB5KSB7IEdhbWVHZXN0dXJlLmluaXRQb3MgPSB7IHg6IHgsIHk6IHkgfTsgcmV0dXJuIEdhbWVHZXN0dXJlOyB9LFxyXG4gICAgY2hja0lzSG9sZDogKCkgPT4ge1xyXG4gICAgICAgIGlmIChHYW1lR2VzdHVyZS5ob2xkRHVyYXRpb24gPj0gR2FtZUdlc3R1cmUuaG9sZE1heER1cmF0aW9uKVxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH0sXHJcbiAgICBnZXRUeXBlOiAoKSA9PiB7IHJldHVybiBHYW1lR2VzdHVyZS50eXBlOyB9LFxyXG4gICAgc2V0VHlwZTogZnVuY3Rpb24gKHR5cGUpIHsgR2FtZUdlc3R1cmUudHlwZSA9IHR5cGU7IHJldHVybiBHYW1lR2VzdHVyZTsgfSxcclxuICAgIGluaXRUeXBlSGlzdG9yeTogKCkgPT4geyBHYW1lR2VzdHVyZS50eXBlSGlzdG9yeSA9IFtdOyB9LFxyXG4gICAgZ2V0VHlwZUhpc3Rvcnk6ICgpID0+IHsgcmV0dXJuIEdhbWVHZXN0dXJlLnR5cGVIaXN0b3J5OyB9LFxyXG4gICAgZ2V0TGFzdGVzdElucHV0VHlwZTogKCkgPT4geyByZXR1cm4gR2FtZUdlc3R1cmUudHlwZUhpc3RvcnlbR2FtZUdlc3R1cmUudHlwZUhpc3RvcnkubGVuZ3RoIC0gMV07IH0sXHJcbiAgICBwdXNoMlR5cGVIaXN0b3J5OiBmdW5jdGlvbiAoZ2VzdHVyZUVsZSkge1xyXG4gICAgICAgIEdhbWVHZXN0dXJlLnR5cGVIaXN0b3J5LnB1c2goZ2VzdHVyZUVsZSk7XHJcbiAgICAgICAgcmV0dXJuIEdhbWVHZXN0dXJlLnR5cGVIaXN0b3J5O1xyXG4gICAgfSxcclxufTtcclxuY29uc3QgSW5pdEdhbWVHZXN0dXJlID0gKCkgPT4ge1xyXG4gICAgR2FtZUdlc3R1cmUucmVzZXRIb2xkKCk7XHJcbiAgICBHYW1lR2VzdHVyZS5pbml0VHlwZUhpc3RvcnkoKTtcclxufTtcclxuY29uc3QgQ3JlYXRlR2FtZUdlc3R1cmUgPSAoc2NlbmUpID0+IHtcclxuICAgIHNjZW5lLmlucHV0Lm9mZigncG9pbnRlcmRvd24nLCBQdHJEb3duR2FtZUdlc3R1cmUpO1xyXG4gICAgc2NlbmUuaW5wdXQub24oJ3BvaW50ZXJkb3duJywgUHRyRG93bkdhbWVHZXN0dXJlKTtcclxuICAgIHNjZW5lLmlucHV0Lm9mZigncG9pbnRlcm1vdmUnLCBQdHJNb3ZlR2FtZUdlc3R1cmUpO1xyXG4gICAgc2NlbmUuaW5wdXQub24oJ3BvaW50ZXJtb3ZlJywgUHRyTW92ZUdhbWVHZXN0dXJlKTtcclxuICAgIHNjZW5lLmlucHV0Lm9mZigncG9pbnRlcnVwJywgUHRyVXBHYW1lR2VzdHVyZSk7XHJcbiAgICBzY2VuZS5pbnB1dC5vbigncG9pbnRlcnVwJywgUHRyVXBHYW1lR2VzdHVyZSk7XHJcbiAgICBJbml0R2FtZUdlc3R1cmUoKTtcclxuICAgIHJldHVybiBHYW1lR2VzdHVyZTtcclxufTtcclxuY29uc3QgVXBkYXRlR2FtZUdlc3R1cmUgPSAoZGVsdGEpID0+IHtcclxuICAgIGlmIChHYW1lR2VzdHVyZS5pc0hvbGRpbmdEb3duKVxyXG4gICAgICAgIEdhbWVHZXN0dXJlLnNldEhvbGREdXJhdGlvbihHYW1lR2VzdHVyZS5ob2xkRHVyYXRpb24gKyBkZWx0YSk7XHJcbn07XHJcbmNvbnN0IFB0ckRvd25HYW1lR2VzdHVyZSA9IChwdHIpID0+IHtcclxuICAgIEdhbWVHZXN0dXJlLnNldEluaXRQb3MocHRyLngsIHB0ci55KTtcclxuICAgIEdhbWVHZXN0dXJlLnN0YXJ0SG9sZCgpO1xyXG59O1xyXG5jb25zdCBQdHJNb3ZlR2FtZUdlc3R1cmUgPSAocHRyKSA9PiB7XHJcbiAgICBpZiAoIXB0ci5pc0Rvd24pXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgaWYgKCFDaGNrU3dpcGVEaXJlY3Rpb24oR2FtZUdlc3R1cmUuaW5pdFBvcywgcHRyKSkge1xyXG4gICAgICAgIENoY2tIb2xkT3JUb3VjaCgpO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc3QgZ2VzdHVyZUVsZSA9IHtcclxuICAgIC8vICAgICB0eXBlOiBHYW1lR2VzdHVyZS5nZXRUeXBlKCksXHJcbiAgICAvLyAgICAgaW5pdFBvczogR2FtZUdlc3R1cmUuaW5pdFBvcyxcclxuICAgIC8vICAgICBsYXN0UG9zOiB7IHg6IHB0ci54LCB5OiBwdHIueSB9XHJcbiAgICAvLyB9O1xyXG59O1xyXG5jb25zdCBQdHJVcEdhbWVHZXN0dXJlID0gKHB0cikgPT4ge1xyXG4gICAgcmV0dXJuIFNldEdhbWVHZXN0dXJlVHlwZShHYW1lR2VzdHVyZS5pbml0UG9zLCBwdHIpO1xyXG59O1xyXG5jb25zdCBQdHJPdXRHYW1lR2VzdHVyZSA9ICgpID0+IHtcclxuICAgIEdhbWVHZXN0dXJlLnJlc2V0SG9sZCgpO1xyXG59O1xyXG5jb25zdCBDaGNrU3dpcGVEaXJlY3Rpb24gPSAoaW5pdFBvcywgcHRyKSA9PiB7XHJcbiAgICBjb25zdCBjaGNrUG9zWCA9IE1hdGguYWJzKGluaXRQb3MueCAtIHB0ci54KSA+IEdhbWVHZXN0dXJlLmNvbWZ5R2FwVG91Y2hWYWx1ZTtcclxuICAgIGNvbnN0IGNoY2tQb3NZID0gTWF0aC5hYnMoaW5pdFBvcy55IC0gcHRyLnkpID4gR2FtZUdlc3R1cmUuY29tZnlHYXBUb3VjaFZhbHVlO1xyXG4gICAgaWYgKGNoY2tQb3NYIHx8IGNoY2tQb3NZKSB7XHJcbiAgICAgICAgY29uc3QgeCA9IHB0ci54IC0gaW5pdFBvcy54O1xyXG4gICAgICAgIGNvbnN0IHkgPSBwdHIueSAtIGluaXRQb3MueTtcclxuICAgICAgICBpZiAoTWF0aC5hYnMoeCkgPiBNYXRoLmFicyh5KSkge1xyXG4gICAgICAgICAgICBpZiAoeCA+IDApXHJcbiAgICAgICAgICAgICAgICBHYW1lR2VzdHVyZS5zZXRUeXBlKCdzd2lwZVJpZ2h0Jyk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgIEdhbWVHZXN0dXJlLnNldFR5cGUoJ3N3aXBlTGVmdCcpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKHkgPCAwKVxyXG4gICAgICAgICAgICAgICAgR2FtZUdlc3R1cmUuc2V0VHlwZSgnc3dpcGVVcCcpO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICBHYW1lR2VzdHVyZS5zZXRUeXBlKCdzd2lwZURvd24nKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9XHJcbiAgICBlbHNlXHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG59O1xyXG5jb25zdCBDaGNrSG9sZE9yVG91Y2ggPSAoKSA9PiB7XHJcbiAgICBpZiAoR2FtZUdlc3R1cmUuY2hja0lzSG9sZCgpKSB7XHJcbiAgICAgICAgR2FtZUdlc3R1cmUuc2V0VHlwZSgnaG9sZCcpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgR2FtZUdlc3R1cmUuc2V0VHlwZSgndG91Y2gnKTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn07XHJcbi8vIHNldCBjb21meSB0b3VjaCB0byBub3QganVkZ2UgYXMgc3dpcGUgd2hlbiB1c2Ugd2l0aCBhY3R1YWwgZmluZ2VyXHJcbmNvbnN0IFNldEdhbWVHZXN0dXJlVHlwZSA9IChpbml0UG9zLCBwdHIpID0+IHtcclxuICAgIC8vIHN3aXBlIG1vdGlvblxyXG4gICAgaWYgKCFDaGNrU3dpcGVEaXJlY3Rpb24oaW5pdFBvcywgcHRyKSkge1xyXG4gICAgICAgIC8vIGhvbGQgb3IgdG91Y2hcclxuICAgICAgICBDaGNrSG9sZE9yVG91Y2goKTtcclxuICAgIH1cclxuICAgIGNvbnN0IGdlc3R1cmVFbGUgPSB7XHJcbiAgICAgICAgdHlwZTogR2FtZUdlc3R1cmUuZ2V0VHlwZSgpLFxyXG4gICAgICAgIGluaXRQb3M6IGluaXRQb3MsXHJcbiAgICAgICAgbGFzdFBvczogeyB4OiBwdHIueCwgeTogcHRyLnkgfVxyXG4gICAgfTtcclxuICAgIEdhbWVHZXN0dXJlLnB1c2gyVHlwZUhpc3RvcnkoZ2VzdHVyZUVsZSk7XHJcbiAgICBHYW1lR2VzdHVyZS5yZXNldEhvbGQoKTtcclxuICAgIHJldHVybiBHYW1lR2VzdHVyZS5nZXRMYXN0ZXN0SW5wdXRUeXBlKCk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVHZXN0dXJlO1xyXG5leHBvcnQgeyBJbml0R2FtZUdlc3R1cmUsIENyZWF0ZUdhbWVHZXN0dXJlLCBVcGRhdGVHYW1lR2VzdHVyZSwgUHRyRG93bkdhbWVHZXN0dXJlLCBQdHJVcEdhbWVHZXN0dXJlLCBQdHJPdXRHYW1lR2VzdHVyZSwgU2V0R2FtZUdlc3R1cmVUeXBlLCB9O1xyXG4iLCJjb25zdCBHYW1lSW5wdXQgPSB7XHJcbiAgICBkb3duOiBbXSxcclxuICAgIG1vdmU6IFtdLFxyXG4gICAgdXA6IFtdLFxyXG4gICAgYWRkOiAoY21kLCBldnQpID0+IHtcclxuICAgICAgICBHYW1lSW5wdXRbY21kXS5wdXNoKGV2dCk7XHJcbiAgICAgICAgcmV0dXJuIEdhbWVJbnB1dDtcclxuICAgIH0sXHJcbn07XHJcbmNvbnN0IEluaXRHYW1lSW5wdXQgPSAoKSA9PiB7XHJcbn07XHJcbmNvbnN0IENyZWF0ZUdhbWVJbnB1dCA9IChzY2VuZSkgPT4ge1xyXG4gICAgY29uc3QgaW5wdXREb3duRXZ0ID0gKHB0ciwgY3VycmVudGx5T3ZlcikgPT4ge1xyXG4gICAgICAgIEdhbWVJbnB1dC5kb3duICYmIEdhbWVJbnB1dC5kb3duLm1hcChkb3duRXZ0ID0+IGRvd25FdnQocHRyLCBjdXJyZW50bHlPdmVyKSk7XHJcbiAgICB9O1xyXG4gICAgc2NlbmUuaW5wdXQub2ZmKCdwb2ludGVyZG93bicsIGlucHV0RG93bkV2dCk7XHJcbiAgICBzY2VuZS5pbnB1dC5vbigncG9pbnRlcmRvd24nLCBpbnB1dERvd25FdnQpO1xyXG4gICAgY29uc3QgaW5wdXRNb3ZlRXZ0ID0gKHB0ciwgY3VycmVudGx5T3ZlcikgPT4ge1xyXG4gICAgICAgIEdhbWVJbnB1dC5tb3ZlICYmIEdhbWVJbnB1dC5tb3ZlLm1hcChtb3ZlRXZ0ID0+IG1vdmVFdnQocHRyLCBjdXJyZW50bHlPdmVyKSk7XHJcbiAgICB9O1xyXG4gICAgc2NlbmUuaW5wdXQub2ZmKCdwb2ludGVybW92ZScsIGlucHV0TW92ZUV2dCk7XHJcbiAgICBzY2VuZS5pbnB1dC5vbigncG9pbnRlcm1vdmUnLCBpbnB1dE1vdmVFdnQpO1xyXG4gICAgY29uc3QgaW5wdXRVcEV2dCA9IChwdHIsIGN1cnJlbnRseU92ZXIpID0+IHtcclxuICAgICAgICBHYW1lSW5wdXQudXAgJiYgR2FtZUlucHV0LnVwLm1hcCh1cEV2dCA9PiB1cEV2dChwdHIsIGN1cnJlbnRseU92ZXIpKTtcclxuICAgIH07XHJcbiAgICBzY2VuZS5pbnB1dC5vZmYoJ3BvaW50ZXJ1cCcsIGlucHV0VXBFdnQpO1xyXG4gICAgc2NlbmUuaW5wdXQub24oJ3BvaW50ZXJ1cCcsIGlucHV0VXBFdnQpO1xyXG4gICAgSW5pdEdhbWVJbnB1dCgpO1xyXG4gICAgcmV0dXJuIEdhbWVJbnB1dDtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgR2FtZUlucHV0O1xyXG5leHBvcnQgeyBJbml0R2FtZUlucHV0LCBDcmVhdGVHYW1lSW5wdXQgfTtcclxuIiwiY29uc3QgR2FtZURlcHRoID0ge1xyXG4gICAgbGlzdDoge1xyXG4gICAgICAgIGRlZmF1bHQ6IDAsXHJcbiAgICAgICAgaGlnaGVzdDogOTk5OSxcclxuICAgIH0sXHJcbiAgICBhZGQ6IChrZXksIGRlcHRoKSA9PiB7XHJcbiAgICAgICAgaWYgKGRlcHRoIDwgR2FtZURlcHRoLmxpc3QuZGVmYXVsdCkge1xyXG4gICAgICAgICAgICBjb25zb2xlLndhcm4oYGFkZGluZyBkZXB0aCAke2tleX0ga2V5IGhhcyBhIGxvd2VyIGRlcHRoIHZhbHVlKCR7ZGVwdGh9KSB0aGFuIGRlZmF1bHRgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoZGVwdGggPiBHYW1lRGVwdGgubGlzdC5oaWdoZXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgYWRkaW5nIGRlcHRoICR7a2V5fSBrZXkgaGFzIGEgbGFyZ2VyIGRlcHRoIHZhbHVlKCR7ZGVwdGh9KSB0aGFuIGRlZmF1bHRgKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBHYW1lRGVwdGhba2V5XSA9IGRlcHRoO1xyXG4gICAgICAgIHJldHVybiBHYW1lRGVwdGg7XHJcbiAgICB9LFxyXG59O1xyXG5jb25zdCBTZXREZXB0aCA9ICh0YXJnZXRPYmosIHR5cGUsIGFkZERlcHRoVmFsdWUpID0+IHtcclxuICAgIGlmICghR2FtZURlcHRoLmxpc3RbdHlwZV0pIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ1NldERlcHRoOiB0eXBlIGlzIG5vdCBmb3VuZCBpbiB0aGUgZGVwdGggbGlzdDonLCB0YXJnZXRPYmosIHR5cGUpO1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCd0YXJnZXRPYmosIHR5cGU6ICcsIHRhcmdldE9iaiwgdHlwZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgY29uc3QgZXh0cmFEZXRwaCA9IGFkZERlcHRoVmFsdWUgIT09IG51bGwgJiYgYWRkRGVwdGhWYWx1ZSAhPT0gdm9pZCAwID8gYWRkRGVwdGhWYWx1ZSA6IDA7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnZXh0cmFEZXRwaDogJywgZXh0cmFEZXRwaCwgR2FtZURlcHRoLmxpc3QsIEdhbWVEZXB0aC5saXN0W3R5cGVdLCBHYW1lRGVwdGgubGlzdFt0eXBlXSBhcyBudW1iZXIgKyBleHRyYURldHBoKTtcclxuICAgIGlmICh0YXJnZXRPYmouc2V0RGVwdGgpXHJcbiAgICAgICAgdGFyZ2V0T2JqLnNldERlcHRoKEdhbWVEZXB0aC5saXN0W3R5cGVdICsgZXh0cmFEZXRwaCk7XHJcbiAgICBlbHNlXHJcbiAgICAgICAgY29uc29sZS53YXJuKCdTZXREZXB0aDogdGFyZ2V0T2JqIGlzIG5vdCBQaGFzZXIuR2FtZU9iamVjdHMnKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgR2FtZURlcHRoO1xyXG5leHBvcnQgeyBTZXREZXB0aCwgfTtcclxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gXCJAc3JjL3VzZXJTZXR0aW5nXCI7XHJcbmltcG9ydCBVSVByb3BzLCB7IENyZWF0ZVVJQnRuQW5pbSwgU2V0Q29tbW9uVUlQcm9wcyB9IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgR2FtZUZvbnQsIHsgU2V0Rm9udFN0eWxlIH0gZnJvbSBcIi4uL2ZvbnRcIjtcclxuY29uc3QgQ3JlYXRlQmFzaWNQb3BVcEV4aXRUeXBlID0gKHNjZW5lLCBwb3BMYXllckJnLCBwb3BVcExheWVyLCBidG4sIHBvcCwgb3B0aW9uKSA9PiB7XHJcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XHJcbiAgICBjb25zdCBleGl0SXNFeGlzdCA9IChfYiA9IChfYSA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5leGl0QnRuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaXNFeGlzdCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogZmFsc2U7XHJcbiAgICBjb25zdCBleGl0VHlwZSA9IChfZCA9IChfYyA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5leGl0QnRuKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2MudHlwZSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogJ2FueXdoZXJlJztcclxuICAgIGNvbnN0IHBvcExheWVyTGlzdCA9IFtdO1xyXG4gICAgLy8gZXhpdCBidG4gJiBiZyBvcHRpb24gc2V0dGluZ1xyXG4gICAgaWYgKGV4aXRJc0V4aXN0KSB7XHJcbiAgICAgICAgc3dpdGNoIChleGl0VHlwZSkge1xyXG4gICAgICAgICAgICBjYXNlICdhbnl3aGVyZSc6XHJcbiAgICAgICAgICAgICAgICBwb3BMYXllckxpc3QucHVzaCguLi5DcmVhdGVFeGl0QW55d2hlcmUoc2NlbmUsIHBvcExheWVyQmcsIHBvcFVwTGF5ZXIsIHBvcCkpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgJ2J0bic6XHJcbiAgICAgICAgICAgICAgICBwb3BMYXllckxpc3QucHVzaCguLi5DcmVhdGVFeGl0QnRuKHNjZW5lLCBwb3BVcExheWVyLCBwb3ApKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlICd5ZXNPck5vJzpcclxuICAgICAgICAgICAgICAgIHBvcExheWVyTGlzdC5wdXNoKC4uLkNyZWF0ZUV4aXRZZXNPck5vKHNjZW5lLCBwb3BVcExheWVyLCBwb3ApKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICBwb3BMYXllckxpc3QucHVzaCguLi5DcmVhdGVFeGl0QW55d2hlcmUoc2NlbmUsIHBvcExheWVyQmcsIHBvcFVwTGF5ZXIsIHBvcCkpO1xyXG4gICAgcmV0dXJuIHBvcExheWVyTGlzdDtcclxufTtcclxuY29uc3QgQ3JlYXRlRXhpdEJ0biA9IChzY2VuZSwgcG9wVXBMYXllciwgcG9wKSA9PiB7XHJcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XHJcbiAgICBjb25zdCBleGl0QnRuWCA9IChfYiA9IChfYSA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5leGl0QnRuKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EueCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogVmlldy5jZW50ZXJYO1xyXG4gICAgY29uc3QgZXhpdEJ0blkgPSAoX2QgPSAoX2MgPSBwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXhpdEJ0bikgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnkpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IFVJUHJvcHMuZXhpdFBvc1k7XHJcbiAgICBjb25zdCBleGl0QmdCdG5IZWlnaHQgPSAoVmlldy5oIC0gZXhpdEJ0blkpICogMjtcclxuICAgIGNvbnN0IHBvcExheWVyTGlzdCA9IFtdO1xyXG4gICAgY29uc3QgZXhpdEJ0bkJnID0gc2NlbmUuYWRkLmltYWdlKGV4aXRCdG5YLCBleGl0QnRuWSwgJ3doaXRlU2NyZWVuJyk7XHJcbiAgICBjb25zdCBleGl0QnRuID0gc2NlbmUuYWRkLmltYWdlKGV4aXRCdG5YLCBleGl0QnRuWSwgJ2V4aXRCdG4nKTtcclxuICAgIGNvbnN0IGV4aXRQdHJEb3duID0gKGJ0bikgPT4ge1xyXG4gICAgICAgIGJ0bi5kb3duRXZ0KCk7XHJcbiAgICAgICAgZXhpdEJ0bkJnLnNldEFscGhhKDAuMyk7XHJcbiAgICAgICAgZXhpdEJ0bi5zZXRBbHBoYSgxKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBleGl0UHRyVXAgPSAoYnRuKSA9PiB7XHJcbiAgICAgICAgYnRuLnVwRXZ0KCk7XHJcbiAgICAgICAgZXhpdEJ0bkJnLnNldEFscGhhKDAuMSk7XHJcbiAgICAgICAgZXhpdEJ0bi5zZXRBbHBoYShVSVByb3BzLmFscGhhKTtcclxuICAgICAgICBwb3BVcExheWVyLmhpZGUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCBleGl0UHRyT3V0ID0gKGJ0bikgPT4ge1xyXG4gICAgICAgIGJ0bi51cEV2dCgpO1xyXG4gICAgICAgIGV4aXRCdG5CZy5zZXRBbHBoYSgwLjEpO1xyXG4gICAgICAgIGV4aXRCdG4uc2V0QWxwaGEoVUlQcm9wcy5hbHBoYSk7XHJcbiAgICB9O1xyXG4gICAgU2V0Q29tbW9uVUlQcm9wcyhleGl0QnRuQmcpO1xyXG4gICAgQ3JlYXRlVUlCdG5BbmltKHNjZW5lLCBleGl0QnRuQmcpO1xyXG4gICAgZXhpdEJ0bkJnLnNldEFscGhhKDAuMSk7XHJcbiAgICBleGl0QnRuQmcuc2V0SW50ZXJhY3RpdmUoKTtcclxuICAgIGV4aXRCdG5CZy5vbigncG9pbnRlcmRvd24nLCAoKSA9PiB7IGV4aXRQdHJEb3duKGV4aXRCdG4pOyB9KTtcclxuICAgIGV4aXRCdG5CZy5vbigncG9pbnRlcnVwJywgKCkgPT4geyBleGl0UHRyVXAoZXhpdEJ0bik7IH0pO1xyXG4gICAgZXhpdEJ0bkJnLm9uKCdwb2ludGVyb3V0JywgKCkgPT4geyBleGl0UHRyT3V0KGV4aXRCdG4pOyB9KTtcclxuICAgIGV4aXRCdG5CZy5zZXREaXNwbGF5U2l6ZShWaWV3LncsIGV4aXRCZ0J0bkhlaWdodCk7XHJcbiAgICBwb3BMYXllckxpc3QucHVzaChleGl0QnRuQmcpO1xyXG4gICAgU2V0Q29tbW9uVUlQcm9wcyhleGl0QnRuKTtcclxuICAgIENyZWF0ZVVJQnRuQW5pbShzY2VuZSwgZXhpdEJ0bik7XHJcbiAgICBleGl0QnRuLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICBleGl0QnRuLm9uKCdwb2ludGVyZG93bicsICgpID0+IHsgZXhpdFB0ckRvd24oZXhpdEJ0bkJnKTsgfSk7XHJcbiAgICBleGl0QnRuLm9uKCdwb2ludGVydXAnLCAoKSA9PiB7IGV4aXRQdHJVcChleGl0QnRuQmcpOyB9KTtcclxuICAgIGV4aXRCdG4ub24oJ3BvaW50ZXJvdXQnLCAoKSA9PiB7IGV4aXRQdHJPdXQoZXhpdEJ0bkJnKTsgfSk7XHJcbiAgICBwb3BMYXllckxpc3QucHVzaChleGl0QnRuKTtcclxuICAgIHJldHVybiBwb3BMYXllckxpc3Q7XHJcbn07XHJcbmNvbnN0IENyZWF0ZUV4aXRBbnl3aGVyZSA9IChzY2VuZSwgcG9wTGF5ZXJCZywgcG9wVXBMYXllciwgcG9wKSA9PiB7XHJcbiAgICB2YXIgX2EsIF9iLCBfYywgX2Q7XHJcbiAgICBjb25zdCBwb3BMYXllckxpc3QgPSBbXTtcclxuICAgIGNvbnN0IGd1aWRlVHh0WCA9IChfYiA9IChfYSA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5ndWlkZVR4dCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLngpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFZpZXcuY2VudGVyWDtcclxuICAgIGNvbnN0IGd1aWRlVHh0WSA9IChfZCA9IChfYyA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5ndWlkZVR4dCkgPT09IG51bGwgfHwgX2MgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9jLnkpICE9PSBudWxsICYmIF9kICE9PSB2b2lkIDAgPyBfZCA6IEdhbWVGb250Lmd1aWRlVHh0WTtcclxuICAgIHBvcExheWVyQmcub24oJ3BvaW50ZXJ1cCcsIChwdHIpID0+IHtcclxuICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgIHBvcFVwTGF5ZXIuaGlkZSgpO1xyXG4gICAgICAgICgoX2EgPSBwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXZ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXApICYmICgoX2IgPSBwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXZ0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudXAocHRyKSk7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IHBvcEd1aWRlVHh0ID0gc2NlbmUuYWRkLnRleHQoZ3VpZGVUeHRYLCBndWlkZVR4dFksICdwcmVzcyBhbnl3aGVyZSB0byBleGl0Jyk7XHJcbiAgICBwb3BHdWlkZVR4dC5zZXRBbHBoYShVSVByb3BzLmFscGhhKTtcclxuICAgIFNldEZvbnRTdHlsZShwb3BHdWlkZVR4dCk7XHJcbiAgICBwb3BMYXllckxpc3QucHVzaChwb3BHdWlkZVR4dCk7XHJcbiAgICByZXR1cm4gcG9wTGF5ZXJMaXN0O1xyXG59O1xyXG5jb25zdCBDcmVhdGVFeGl0WWVzT3JObyA9IChzY2VuZSwgcG9wVXBMYXllciwgcG9wKSA9PiB7XHJcbiAgICB2YXIgX2EsIF9iO1xyXG4gICAgY29uc3QgZXhpdEJ0blkgPSAoX2IgPSAoX2EgPSBwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXhpdEJ0bikgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLnkpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFVJUHJvcHMuZXhpdFBvc1k7XHJcbiAgICBjb25zdCBiZ0FscGhhRG93biA9IDAuNTtcclxuICAgIGNvbnN0IGJnQWxwaGFVcCA9IDAuMTtcclxuICAgIGNvbnN0IHR4dEFscGhhRG93biA9IDE7XHJcbiAgICBjb25zdCB0eHRBbHBoYVVwID0gMC44O1xyXG4gICAgY29uc3QgZXhpdEJnQnRuSGVpZ2h0ID0gKFZpZXcuaCAtIGV4aXRCdG5ZKSAqIDI7XHJcbiAgICBjb25zdCBwb3BMYXllckxpc3QgPSBbXTtcclxuICAgIGNvbnN0IGxlZnROb0JnID0gc2NlbmUuYWRkLmltYWdlKFZpZXcudyAvIDQsIGV4aXRCdG5ZLCAnd2hpdGVTY3JlZW4nKTtcclxuICAgIGNvbnN0IGxlZnROb1R4dCA9IHNjZW5lLmFkZC50ZXh0KGxlZnROb0JnLngsIGxlZnROb0JnLnksICdObycpO1xyXG4gICAgY29uc3QgbGVmdFB0ckRvd24gPSAoaW1nT3JUeHQpID0+IHtcclxuICAgICAgICBpbWdPclR4dC5kb3duRXZ0KCk7XHJcbiAgICAgICAgbGVmdE5vQmcuc2V0QWxwaGEoYmdBbHBoYURvd24pO1xyXG4gICAgICAgIGxlZnROb1R4dC5zZXRBbHBoYSh0eHRBbHBoYURvd24pO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGxlZnRQdHJVcCA9IChpbWdPclR4dCkgPT4ge1xyXG4gICAgICAgIGltZ09yVHh0LnVwRXZ0KCk7XHJcbiAgICAgICAgbGVmdFB0ck91dCgpO1xyXG4gICAgICAgIHBvcFVwTGF5ZXIuaGlkZSgpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IGxlZnRQdHJPdXQgPSAoKSA9PiB7XHJcbiAgICAgICAgbGVmdE5vQmcuc2V0QWxwaGEoYmdBbHBoYVVwKTtcclxuICAgICAgICBsZWZ0Tm9UeHQuc2V0QWxwaGEodHh0QWxwaGFVcCk7XHJcbiAgICB9O1xyXG4gICAgU2V0Q29tbW9uVUlQcm9wcyhsZWZ0Tm9CZyk7XHJcbiAgICBDcmVhdGVVSUJ0bkFuaW0oc2NlbmUsIGxlZnROb0JnKTtcclxuICAgIGxlZnROb0JnLnNldEFscGhhKGJnQWxwaGFVcCk7XHJcbiAgICBsZWZ0Tm9CZy5zZXREaXNwbGF5U2l6ZShWaWV3LmNlbnRlclgsIGV4aXRCZ0J0bkhlaWdodCk7XHJcbiAgICBsZWZ0Tm9CZy5vbigncG9pbnRlcmRvd24nLCAoKSA9PiB7IGxlZnRQdHJEb3duKGxlZnROb1R4dCk7IH0pO1xyXG4gICAgbGVmdE5vQmcub24oJ3BvaW50ZXJ1cCcsICgpID0+IHsgbGVmdFB0clVwKGxlZnROb1R4dCk7IH0pO1xyXG4gICAgbGVmdE5vQmcub24oJ3BvaW50ZXJvdXQnLCAoKSA9PiB7IGxlZnRQdHJPdXQoKTsgfSk7XHJcbiAgICBDcmVhdGVVSUJ0bkFuaW0oc2NlbmUsIGxlZnROb1R4dCk7XHJcbiAgICBTZXRGb250U3R5bGUobGVmdE5vVHh0KTtcclxuICAgIGxlZnROb1R4dC5zZXRBbHBoYSh0eHRBbHBoYVVwKTtcclxuICAgIGxlZnROb1R4dC5zZXRGb250U2l6ZShWaWV3LncgLyAxNCk7XHJcbiAgICBsZWZ0Tm9UeHQub24oJ3BvaW50ZXJkb3duJywgKCkgPT4geyBsZWZ0UHRyRG93bihsZWZ0Tm9CZyk7IH0pO1xyXG4gICAgbGVmdE5vVHh0Lm9uKCdwb2ludGVydXAnLCAoKSA9PiB7IGxlZnRQdHJVcChsZWZ0Tm9CZyk7IH0pO1xyXG4gICAgbGVmdE5vVHh0Lm9uKCdwb2ludGVyb3V0JywgKCkgPT4geyBsZWZ0UHRyT3V0KCk7IH0pO1xyXG4gICAgcG9wTGF5ZXJMaXN0LnB1c2gobGVmdE5vQmcsIGxlZnROb1R4dCk7XHJcbiAgICBjb25zdCByaWdodE5vQmcgPSBzY2VuZS5hZGQuaW1hZ2UoVmlldy53ICogMyAvIDQsIGV4aXRCdG5ZLCAnd2hpdGVTY3JlZW4nKTtcclxuICAgIGNvbnN0IHJpZ2h0Tm9UeHQgPSBzY2VuZS5hZGQudGV4dChyaWdodE5vQmcueCwgcmlnaHROb0JnLnksICdZZXMnKTtcclxuICAgIGNvbnN0IHJpZ2h0UHRyRG93biA9IChpbWdPclR4dCkgPT4ge1xyXG4gICAgICAgIGltZ09yVHh0LmRvd25FdnQoKTtcclxuICAgICAgICByaWdodE5vQmcuc2V0QWxwaGEoYmdBbHBoYURvd24pO1xyXG4gICAgICAgIHJpZ2h0Tm9UeHQuc2V0QWxwaGEodHh0QWxwaGFEb3duKTtcclxuICAgIH07XHJcbiAgICBjb25zdCByaWdodFB0clVwID0gKGltZ09yVHh0LCBwdHIpID0+IHtcclxuICAgICAgICB2YXIgX2E7XHJcbiAgICAgICAgaW1nT3JUeHQudXBFdnQoKTtcclxuICAgICAgICByaWdodFB0ck91dCgpO1xyXG4gICAgICAgICgoX2EgPSBwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXZ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXApICYmIHBvcC5ldnQudXAocHRyKTtcclxuICAgICAgICBwb3BVcExheWVyLmhpZGUoKTtcclxuICAgIH07XHJcbiAgICBjb25zdCByaWdodFB0ck91dCA9ICgpID0+IHtcclxuICAgICAgICByaWdodE5vQmcuc2V0QWxwaGEoYmdBbHBoYVVwKTtcclxuICAgICAgICByaWdodE5vVHh0LnNldEFscGhhKHR4dEFscGhhVXApO1xyXG4gICAgfTtcclxuICAgIFNldENvbW1vblVJUHJvcHMocmlnaHROb0JnKTtcclxuICAgIENyZWF0ZVVJQnRuQW5pbShzY2VuZSwgcmlnaHROb0JnKTtcclxuICAgIHJpZ2h0Tm9CZy5zZXRBbHBoYShiZ0FscGhhVXApO1xyXG4gICAgcmlnaHROb0JnLnNldERpc3BsYXlTaXplKFZpZXcuY2VudGVyWCwgZXhpdEJnQnRuSGVpZ2h0KTtcclxuICAgIHJpZ2h0Tm9CZy5vbigncG9pbnRlcmRvd24nLCAoKSA9PiB7IHJpZ2h0UHRyRG93bihyaWdodE5vVHh0KTsgfSk7XHJcbiAgICByaWdodE5vQmcub24oJ3BvaW50ZXJ1cCcsIChwdHIpID0+IHsgcmlnaHRQdHJVcChyaWdodE5vVHh0LCBwdHIpOyB9KTtcclxuICAgIHJpZ2h0Tm9CZy5vbigncG9pbnRlcm91dCcsICgpID0+IHsgcmlnaHRQdHJPdXQoKTsgfSk7XHJcbiAgICBDcmVhdGVVSUJ0bkFuaW0oc2NlbmUsIHJpZ2h0Tm9UeHQpO1xyXG4gICAgU2V0Rm9udFN0eWxlKHJpZ2h0Tm9UeHQpO1xyXG4gICAgcmlnaHROb1R4dC5zZXRBbHBoYSh0eHRBbHBoYVVwKTtcclxuICAgIHJpZ2h0Tm9UeHQuc2V0Rm9udFNpemUoVmlldy53IC8gMTQpO1xyXG4gICAgcmlnaHROb1R4dC5vbigncG9pbnRlcmRvd24nLCAoKSA9PiB7IHJpZ2h0UHRyRG93bihyaWdodE5vQmcpOyB9KTtcclxuICAgIHJpZ2h0Tm9UeHQub24oJ3BvaW50ZXJ1cCcsIChwdHIpID0+IHsgcmlnaHRQdHJVcChyaWdodE5vQmcsIHB0cik7IH0pO1xyXG4gICAgcmlnaHROb1R4dC5vbigncG9pbnRlcm91dCcsICgpID0+IHsgcmlnaHRQdHJPdXQoKTsgfSk7XHJcbiAgICBwb3BMYXllckxpc3QucHVzaChyaWdodE5vQmcsIHJpZ2h0Tm9UeHQpO1xyXG4gICAgcmV0dXJuIHBvcExheWVyTGlzdDtcclxufTtcclxuZXhwb3J0IHsgQ3JlYXRlQmFzaWNQb3BVcEV4aXRUeXBlLCB9O1xyXG4iLCJpbXBvcnQgeyBHZXRBc3NldEZpbGVzIH0gZnJvbSAnQHNyYy9zY2VuZXMvYXNzZXRVdGlscyc7XHJcbmltcG9ydCB7IENvbW1vblVJIH0gZnJvbSAnQHNyYy9zY2VuZXMvYXNzZXRVdGlscyc7XHJcbmltcG9ydCB7IFNldERlcHRoIH0gZnJvbSAnQHNyYy9zY2VuZXMvZGVwdGgnO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnQHNyYy91c2VyU2V0dGluZyc7XHJcbmltcG9ydCB7IENyZWF0ZUJhc2ljUG9wVXBFeGl0VHlwZSB9IGZyb20gJy4vZXhpdCc7XHJcbmNvbnN0IEdhbWVQb3BVcCA9IHtcclxuICAgIGNvbW1vbkxheWVyOiBudWxsLFxyXG4gICAgbGlzdDogW10sXHJcbiAgICBwb3BBbHBoYTogMC42LFxyXG4gICAgZGVmYXVsdE9wdDoge1xyXG4gICAgICAgIGNtZEtleTogJ0VzY2FwZScsXHJcbiAgICB9LFxyXG4gICAgb3B0aW9uOiB7fSxcclxufTtcclxuY29uc3QgR2V0UG9wVXBBc3NldHMgPSAoZXhjZXB0aW9uS2V5cykgPT4ge1xyXG4gICAgbGV0IGFzc2V0TGlzdCA9IFtcclxuICAgICAgICB7IGtleTogJ3doaXRlU2NyZWVuJywgdXJsOiBDb21tb25VSSArICd3aGl0ZVNjcmVlbi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgeyBrZXk6ICdibGFja1NjcmVlbicsIHVybDogQ29tbW9uVUkgKyAnYmxhY2tTY3JlZW4ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgIHsga2V5OiAnZXhpdEJ0bicsIHVybDogQ29tbW9uVUkgKyAnZXhpdEJ0bi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgeyBrZXk6ICdkb29yRXhpdEJ0bicsIHVybDogQ29tbW9uVUkgKyAnZG9vckV4aXRCdG4ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgXTtcclxuICAgIHJldHVybiBHZXRBc3NldEZpbGVzKGFzc2V0TGlzdCwgZXhjZXB0aW9uS2V5cyk7XHJcbn07XHJcbmNvbnN0IEluaXRQb3BVcCA9IChwb3BVcExheWVyKSA9PiB7XHJcbiAgICBwb3BVcExheWVyLmhpZGUoKTtcclxufTtcclxuY29uc3QgQ3JlYXRlQmFzaWNQb3BVcCA9IChzY2VuZSwgbmFtZSwgYnRuLCBwb3AsIG9wdGlvbikgPT4ge1xyXG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xyXG4gICAgLy8gYnRuIGxheWVyIHNldHRpbmdcclxuICAgIGNvbnN0IGlzQmdCbGFjayA9IChfYSA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5pc0JnQmxhY2spICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWU7XHJcbiAgICBjb25zdCBidG5YID0gKF9iID0gYnRuID09PSBudWxsIHx8IGJ0biA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnRuLngpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IFZpZXcuY2VudGVyWDtcclxuICAgIGNvbnN0IGJ0blkgPSAoX2MgPSBidG4gPT09IG51bGwgfHwgYnRuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidG4ueSkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogVmlldy5jZW50ZXJZO1xyXG4gICAgY29uc3QgaXNCdG5FeGlzdCA9IChfZCA9IGJ0biA9PT0gbnVsbCB8fCBidG4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ0bi5pc0V4aXN0KSAhPT0gbnVsbCAmJiBfZCAhPT0gdm9pZCAwID8gX2QgOiBmYWxzZTtcclxuICAgIEdhbWVQb3BVcC5vcHRpb24gPSBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIEdhbWVQb3BVcC5kZWZhdWx0T3B0KSwgb3B0aW9uKTtcclxuICAgIC8vIGNvbnN0IHsgY21kS2V5IH0gPSBHYW1lUG9wVXAub3B0aW9uO1xyXG4gICAgbGV0IGJ0bkxheWVyO1xyXG4gICAgaWYgKGlzQnRuRXhpc3QpIHtcclxuICAgICAgICBidG5MYXllciA9IHNjZW5lLmFkZC5sYXllcigpO1xyXG4gICAgICAgIGJ0bkxheWVyLm5hbWUgPSBuYW1lO1xyXG4gICAgICAgIChidG4gPT09IG51bGwgfHwgYnRuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidG4uZGVwdGgpICYmIGJ0bkxheWVyLnNldERlcHRoKGJ0bi5kZXB0aCk7XHJcbiAgICAgICAgaWYgKGJ0biA9PT0gbnVsbCB8fCBidG4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ0bi5saXN0KSB7XHJcbiAgICAgICAgICAgIGJ0bi5saXN0Lm1hcCgoYnRuQ2hpbGQpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ0bkNoaWxkLnNldFBvc2l0aW9uKGJ0blgsIGJ0blkpO1xyXG4gICAgICAgICAgICAgICAgYnRuTGF5ZXIuYWRkKGJ0bkNoaWxkKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBkZWZhdWx0QnRuID0gc2NlbmUuYWRkLnRleHQoYnRuWCwgYnRuWSwgbmFtZSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHRCdG4uc2V0T3JpZ2luKDAuNSk7XHJcbiAgICAgICAgICAgIGRlZmF1bHRCdG4uc2V0Rm9udFN0eWxlKCdib2xkJyk7XHJcbiAgICAgICAgICAgIGRlZmF1bHRCdG4uc2V0Rm9udEZhbWlseSgnQXJpYWwgQmxhY2snKTtcclxuICAgICAgICAgICAgYnRuTGF5ZXIuYWRkKGRlZmF1bHRCdG4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBidG5MYXllci5nZXRDaGlsZHJlbigpLm1hcCgoY2hpbGQpID0+IHtcclxuICAgICAgICAgICAgY2hpbGQuc2V0SW50ZXJhY3RpdmUoKTtcclxuICAgICAgICAgICAgY2hpbGQub24oJ3BvaW50ZXJkb3duJywgKHB0cikgPT4ge1xyXG4gICAgICAgICAgICAgICAgdmFyIF9hLCBfYjtcclxuICAgICAgICAgICAgICAgICgoX2EgPSBidG4gPT09IG51bGwgfHwgYnRuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidG4uZXZ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZG93bikgJiYgKChfYiA9IGJ0biA9PT0gbnVsbCB8fCBidG4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ0bi5ldnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kb3duKHB0cikpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgY2hpbGQub24oJ3BvaW50ZXJ1cCcsIChwdHIpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgICAgICAgICBwb3BVcExheWVyLnNob3coKTtcclxuICAgICAgICAgICAgICAgICgoX2EgPSBidG4gPT09IG51bGwgfHwgYnRuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidG4uZXZ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EudXApICYmICgoX2IgPSBidG4gPT09IG51bGwgfHwgYnRuID09PSB2b2lkIDAgPyB2b2lkIDAgOiBidG4uZXZ0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IudXAocHRyKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBjaGlsZC5vbigncG9pbnRlcm91dCcsIChwdHIpID0+IHtcclxuICAgICAgICAgICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgICAgICAgICAoKF9hID0gYnRuID09PSBudWxsIHx8IGJ0biA9PT0gdm9pZCAwID8gdm9pZCAwIDogYnRuLmV2dCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm91dCkgJiYgKChfYiA9IGJ0biA9PT0gbnVsbCB8fCBidG4gPT09IHZvaWQgMCA/IHZvaWQgMCA6IGJ0bi5ldnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5vdXQocHRyKSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgLy8gcG9wIGxheWVyIHNldHRpbmdcclxuICAgIGNvbnN0IHBvcExheWVyID0gc2NlbmUuYWRkLmxheWVyKCk7XHJcbiAgICBjb25zdCBwb3BMYXllckxpc3QgPSBbXTtcclxuICAgIHBvcExheWVyLm5hbWUgPSBuYW1lO1xyXG4gICAgKHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5kZXB0aCkgJiYgcG9wTGF5ZXIuc2V0RGVwdGgocG9wLmRlcHRoKTtcclxuICAgIGNvbnN0IHBvcExheWVyQmcgPSBzY2VuZS5hZGQuaW1hZ2UoVmlldy5jZW50ZXJYLCBWaWV3LmNlbnRlclksIGlzQmdCbGFjayA/ICdibGFja1NjcmVlbicgOiAnd2hpdGVTY3JlZW4nKTtcclxuICAgIHBvcExheWVyQmcuc2V0QWxwaGEoR2FtZVBvcFVwLnBvcEFscGhhKTtcclxuICAgIHBvcExheWVyQmcuc2V0RGlzcGxheVNpemUoVmlldy53LCBWaWV3LmgpO1xyXG4gICAgcG9wTGF5ZXJCZy5zZXRJbnRlcmFjdGl2ZSgpO1xyXG4gICAgcG9wTGF5ZXJCZy5vbigncG9pbnRlcmRvd24nLCAocHRyKSA9PiB7IHZhciBfYSwgX2I7ICgoX2EgPSBwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXZ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuZG93bikgJiYgKChfYiA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5ldnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5kb3duKHB0cikpOyB9KTtcclxuICAgIHBvcExheWVyQmcub24oJ3BvaW50ZXJtb3ZlJywgKHB0cikgPT4geyB2YXIgX2EsIF9iOyAoKF9hID0gcG9wID09PSBudWxsIHx8IHBvcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9wLmV2dCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLm1vdmUpICYmICgoX2IgPSBwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXZ0KSA9PT0gbnVsbCB8fCBfYiA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2IubW92ZShwdHIpKTsgfSk7XHJcbiAgICBwb3BMYXllckxpc3QucHVzaChwb3BMYXllckJnKTtcclxuICAgIGNvbnN0IHBvcFVwTGF5ZXIgPSB7XHJcbiAgICAgICAgbmFtZTogbmFtZSxcclxuICAgICAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgICAgIGJ0bjogYnRuTGF5ZXIsXHJcbiAgICAgICAgcG9wOiBwb3BMYXllcixcclxuICAgICAgICBhZGQ6IChjaGlsZCkgPT4ge1xyXG4gICAgICAgICAgICBwb3BMYXllci5hZGQoY2hpbGQpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2hvdzogKCkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgICAgICBwb3BVcExheWVyLmlzT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgIHBvcFVwTGF5ZXIucG9wLnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICgoX2EgPSBwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXZ0KSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2hvdykgJiYgKChfYiA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5ldnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5zaG93KCkpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaGlkZTogKCkgPT4ge1xyXG4gICAgICAgICAgICB2YXIgX2EsIF9iO1xyXG4gICAgICAgICAgICBwb3BVcExheWVyLmlzT3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICBjb25zdCBpc0FsbFBvcExheWVyQ2xvc2VkID0gR2FtZVBvcFVwLmxpc3QuZmlsdGVyKHBvcFVwTGF5ZXIgPT4gcG9wVXBMYXllci5pc09wZW4gPT09IHRydWUpLmxlbmd0aCA9PT0gMDtcclxuICAgICAgICAgICAgaXNBbGxQb3BMYXllckNsb3NlZCAmJiBwb3BVcExheWVyLnBvcC5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICAgICAgKChfYSA9IHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5ldnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5oaWRlKSAmJiAoKF9iID0gcG9wID09PSBudWxsIHx8IHBvcCA9PT0gdm9pZCAwID8gdm9pZCAwIDogcG9wLmV2dCkgPT09IG51bGwgfHwgX2IgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9iLmhpZGUoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIGlmIChwb3AgPT09IG51bGwgfHwgcG9wID09PSB2b2lkIDAgPyB2b2lkIDAgOiBwb3AuZXhpdEJ0bikge1xyXG4gICAgICAgIHBvcExheWVyTGlzdC5wdXNoKC4uLkNyZWF0ZUJhc2ljUG9wVXBFeGl0VHlwZShzY2VuZSwgcG9wTGF5ZXJCZywgcG9wVXBMYXllciwgYnRuLCBwb3AsIG9wdGlvbikpO1xyXG4gICAgfVxyXG4gICAgLy8gYWRkIGNoaWxkIHRvIHBvcHVwIGxheWVyXHJcbiAgICBwb3BMYXllckxpc3QubWFwKHBvcENoaWxkID0+IHBvcExheWVyLmFkZChwb3BDaGlsZCkpO1xyXG4gICAgKHBvcCA9PT0gbnVsbCB8fCBwb3AgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvcC5saXN0KSAmJiBwb3AubGlzdC5tYXAocG9wQ2hpbGQgPT4gcG9wTGF5ZXIuYWRkKHBvcENoaWxkKSk7XHJcbiAgICBTZXREZXB0aChwb3BMYXllciwgJ2hpZ2hlc3QnKTtcclxuICAgIC8vIGNoY2sgbmVzdGVkIHBvcCB1cCBsYXllclxyXG4gICAgbGV0IG5lc3RlZFBvcFVwTGF5ZXIgPSBHYW1lUG9wVXAubGlzdC5maW5kKHBvcFVwID0+IHBvcFVwLm5hbWUgPT09IG5hbWUpO1xyXG4gICAgaWYgKG5lc3RlZFBvcFVwTGF5ZXIpIHtcclxuICAgICAgICAvLyBjb25zb2xlLndhcm4oYHBvcCB1cCBuYW1lIG5lc3RlZDogJHtuYW1lfSAvLyBzbyBsYXkgb3ZlciBpdGApO1xyXG4gICAgICAgIG5lc3RlZFBvcFVwTGF5ZXIgPSBwb3BVcExheWVyO1xyXG4gICAgfVxyXG4gICAgZWxzZVxyXG4gICAgICAgIEdhbWVQb3BVcC5saXN0LnB1c2gocG9wVXBMYXllcik7XHJcbiAgICBJbml0UG9wVXAocG9wVXBMYXllcik7XHJcbiAgICByZXR1cm4gcG9wVXBMYXllcjtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgR2FtZVBvcFVwO1xyXG5leHBvcnQgeyBHZXRQb3BVcEFzc2V0cywgSW5pdFBvcFVwLCBDcmVhdGVCYXNpY1BvcFVwLCB9O1xyXG4iLCJpbXBvcnQgeyBDb21tb25BdWRpbywgR2V0QXNzZXRGaWxlcyB9IGZyb20gJ0BzcmMvc2NlbmVzL2Fzc2V0VXRpbHMnO1xyXG5pbXBvcnQgeyBTZXREZXB0aCB9IGZyb20gJ0BzcmMvc2NlbmVzL2RlcHRoJztcclxuaW1wb3J0IFVJUHJvcHMsIHsgQ3JlYXRlVUlCdG5BbmltLCBTZXRDb21tb25VSVByb3BzLCBTZXRFbGVtZW50SW5NaWRkbGUgfSBmcm9tICcuLic7XHJcbmltcG9ydCBHYW1lQXVkaW8gZnJvbSAnQHNyYy9zY2VuZXMvYXVkaW8nO1xyXG5pbXBvcnQgeyBDcmVhdGVCYXNpY1BvcFVwIH0gZnJvbSAnLi4vcG9wVXAnO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSAnQHNyYy91c2VyU2V0dGluZyc7XHJcbmltcG9ydCB7IENyZWF0ZUdhZ2VCYXIgfSBmcm9tICcuLi9nYWdlJztcclxuaW1wb3J0IHsgU2V0Rm9udFN0eWxlIH0gZnJvbSAnLi4vZm9udCc7XHJcbmltcG9ydCBXaW5kb3dMb2JieSBmcm9tICdAc3JjL3dpbmRvdyc7XHJcbmNvbnN0IEdhbWVBdWRpb1VJID0ge1xyXG4gICAgYnRuOiBudWxsLFxyXG4gICAgY29udGV4dDogW10sXHJcbiAgICBwb3A6IG51bGwsXHJcbiAgICBob2xkRHVyYXRpb246IDEwMDAsXHJcbiAgICBlbGVHYXBWYWx1ZTogMTAwLFxyXG4gICAgdG9nZ2xlTXV0ZTogKCkgPT4ge1xyXG4gICAgICAgIEdhbWVBdWRpby5zZXRBbGxNdXRlKCFHYW1lQXVkaW8uaXNBbGxNdXRlKTtcclxuICAgICAgICBHYW1lQXVkaW9VSS5idG4uc2V0VGV4dHVyZShHYW1lQXVkaW8uaXNBbGxNdXRlID8gJ3NmeE9mZicgOiAnc2Z4T24nKTtcclxuICAgIH0sXHJcbiAgICBzaG93OiAoKSA9PiB7XHJcbiAgICAgICAgR2FtZUF1ZGlvVUkuY29udGV4dCAmJiBHYW1lQXVkaW9VSS5jb250ZXh0Lm1hcCgoY29udGV4dENoaWxkKSA9PiB7XHJcbiAgICAgICAgICAgIGNvbnRleHRDaGlsZC5zZXRWaXNpYmxlICYmIGNvbnRleHRDaGlsZC5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGhpZGU6ICgpID0+IHtcclxuICAgICAgICBHYW1lQXVkaW9VSS5jb250ZXh0ICYmIEdhbWVBdWRpb1VJLmNvbnRleHQubWFwKChjb250ZXh0Q2hpbGQpID0+IHtcclxuICAgICAgICAgICAgY29udGV4dENoaWxkLnNldFZpc2libGUgJiYgY29udGV4dENoaWxkLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSxcclxuICAgIGRlZmF1bHRPcHQ6IHtcclxuICAgICAgICBjbWRLZXk6ICdtJ1xyXG4gICAgfSxcclxuICAgIG9wdGlvbjoge30sXHJcbn07XHJcbmNvbnN0IEdldEdhbWVBdWRpb1VJQXNzZXRzID0gKGV4Y2VwdGlvbktleXMpID0+IHtcclxuICAgIGNvbnN0IGF1ZGlvVUlBc3NldHMgPSBbXHJcbiAgICAgICAgeyBrZXk6ICdzZnhPZmYnLCB1cmw6IENvbW1vbkF1ZGlvICsgJ3NmeE9mZi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgeyBrZXk6ICdzZnhPbicsIHVybDogQ29tbW9uQXVkaW8gKyAnc2Z4T24ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgIHsga2V5OiAnYmdtT2ZmJywgdXJsOiBDb21tb25BdWRpbyArICdiZ21PZmYucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgIHsga2V5OiAnYmdtT24nLCB1cmw6IENvbW1vbkF1ZGlvICsgJ2JnbU9uLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgIF07XHJcbiAgICByZXR1cm4gR2V0QXNzZXRGaWxlcyhhdWRpb1VJQXNzZXRzLCBleGNlcHRpb25LZXlzKTtcclxufTtcclxuY29uc3QgSW5pdEdhbWVBdWRpb1VJID0gKCkgPT4ge1xyXG4gICAgR2FtZUF1ZGlvVUkuYnRuLnNldFRleHR1cmUoR2FtZUF1ZGlvLmlzQWxsTXV0ZSA/ICdzZnhPZmYnIDogJ3NmeE9uJyk7XHJcbiAgICBHYW1lQXVkaW9VSS5oaWRlKCk7XHJcbn07XHJcbmNvbnN0IENyZWF0ZUdhbWVBdWRpb1VJID0gKHNjZW5lLCBvcHRpb24pID0+IHtcclxuICAgIEdhbWVBdWRpb1VJLm9wdGlvbiA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBHYW1lQXVkaW9VSS5kZWZhdWx0T3B0KSwgeyB4OiBVSVByb3BzLm1hcmdpbiAqIDQuNSAqIFVJUHJvcHMuc2NhbGUsIHk6IFVJUHJvcHMubWFyZ2luIH0pLCBvcHRpb24pO1xyXG4gICAgY29uc3QgeyB4LCB5LCBjbWRLZXkgfSA9IEdhbWVBdWRpb1VJLm9wdGlvbjtcclxuICAgIC8vIGJ0biAoc2ltcGxlIHRvdWNoIG1lYW5zIHRvZ2dsaW5nIG11dGUgb3IgMC41IHZvbHVtZSlcclxuICAgIEdhbWVBdWRpb1VJLmJ0biA9IHNjZW5lLmFkZC5pbWFnZSh4LCB5LCBHYW1lQXVkaW8uaXNBbGxNdXRlID8gJ3NmeE9mZicgOiAnc2Z4T24nKTtcclxuICAgIFNldENvbW1vblVJUHJvcHMoR2FtZUF1ZGlvVUkuYnRuKTtcclxuICAgIENyZWF0ZVVJQnRuQW5pbShzY2VuZSwgR2FtZUF1ZGlvVUkuYnRuKTtcclxuICAgIEdhbWVBdWRpb1VJLmJ0bi5vbigncG9pbnRlcmRvd24nLCAocHRyKSA9PiB7XHJcbiAgICAgICAgc2NlbmUudHdlZW5zLmFkZENvdW50ZXIoe1xyXG4gICAgICAgICAgICBkdXJhdGlvbjogR2FtZUF1ZGlvVUkuaG9sZER1cmF0aW9uLFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKHR3KSA9PiB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXB0ci5pc0Rvd24pIHtcclxuICAgICAgICAgICAgICAgICAgICB0dy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHsgR2FtZUF1ZGlvVUkucG9wLnNob3coKTsgfSxcclxuICAgICAgICB9KTtcclxuICAgIH0pO1xyXG4gICAgR2FtZUF1ZGlvVUkuYnRuLm9uKCdwb2ludGVydXAnLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKEdhbWVBdWRpb1VJLnBvcC5pc09wZW4pXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBHYW1lQXVkaW9VSS50b2dnbGVNdXRlKCk7XHJcbiAgICB9KTtcclxuICAgIC8vIGNvbnRleHQgZ2FnZSAoYWxsLCBzZngsIGJnbSBpY29uICYgZ2FnZSlcclxuICAgIGNvbnN0IGFsbEljb24gPSBzY2VuZS5hZGQudGV4dChWaWV3LmNlbnRlclgsIFZpZXcuY2VudGVyWSwgR2FtZUF1ZGlvLmlzQWxsTXV0ZSA/ICdNdXRlIEFsbCcgOiAnQWxsJyk7XHJcbiAgICBjb25zdCBzZnhJY29uID0gc2NlbmUuYWRkLmltYWdlKFZpZXcuY2VudGVyWCwgYWxsSWNvbi55ICsgR2FtZUF1ZGlvVUkuZWxlR2FwVmFsdWUsIEdhbWVBdWRpby5pc1NmeE11dGUgPyAnc2Z4T2ZmJyA6ICdzZnhPbicpO1xyXG4gICAgU2V0Q29tbW9uVUlQcm9wcyhzZnhJY29uKTtcclxuICAgIENyZWF0ZVVJQnRuQW5pbShzY2VuZSwgc2Z4SWNvbik7XHJcbiAgICBjb25zdCBzZnhHYWdlID0gQ3JlYXRlR2FnZUJhcihzY2VuZSwgc2Z4SWNvbi54LCBzZnhJY29uLnkgKyBzZnhJY29uLmhlaWdodCAvIDEuNSwgKG1pbiwgbWF4LCBjdXJyKSA9PiB7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnNldFNmeFZvbHVtZShjdXJyIC8gMTAwKTtcclxuICAgIH0sIHsgY29sb3I6ICdibHVlJyB9KTtcclxuICAgIHNmeEdhZ2Uuc2V0R2FnZU51bShHYW1lQXVkaW8uYmdtVm9sdW1lICogMTAwKTtcclxuICAgIHNmeEdhZ2Uuc2V0QWJsZSghR2FtZUF1ZGlvLmlzU2Z4TXV0ZSk7XHJcbiAgICBzZnhJY29uLm9uKCdwb2ludGVydXAnLCAoKSA9PiB7XHJcbiAgICAgICAgY29uc3QgaXNPbiA9IHNmeEljb24udGV4dHVyZS5rZXkgPT09ICdzZnhPbic7XHJcbiAgICAgICAgc2Z4R2FnZS5zZXRBYmxlKCFpc09uKTtcclxuICAgICAgICBzZnhJY29uLnNldFRleHR1cmUoaXNPbiA/ICdzZnhPZmYnIDogJ3NmeE9uJyk7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnNldFNmeE11dGUoaXNPbik7XHJcbiAgICB9KTtcclxuICAgIGNvbnN0IGJnbUljb24gPSBzY2VuZS5hZGQuaW1hZ2Uoc2Z4SWNvbi54LCBzZnhJY29uLnkgKyBHYW1lQXVkaW9VSS5lbGVHYXBWYWx1ZSwgR2FtZUF1ZGlvLmlzQmdtTXV0ZSA/ICdiZ21PZmYnIDogJ2JnbU9uJyk7XHJcbiAgICBTZXRDb21tb25VSVByb3BzKGJnbUljb24pO1xyXG4gICAgQ3JlYXRlVUlCdG5BbmltKHNjZW5lLCBiZ21JY29uKTtcclxuICAgIGNvbnN0IGJnbUdhZ2UgPSBDcmVhdGVHYWdlQmFyKHNjZW5lLCBiZ21JY29uLngsIGJnbUljb24ueSArIGJnbUljb24uaGVpZ2h0IC8gMS41LCAobWluLCBtYXgsIGN1cnIpID0+IHtcclxuICAgICAgICBHYW1lQXVkaW8uc2V0QmdtVm9sdW1lKGN1cnIgLyAxMDApO1xyXG4gICAgfSwgeyBjb2xvcjogJ2JsdWUnIH0pO1xyXG4gICAgYmdtR2FnZS5zZXRHYWdlTnVtKEdhbWVBdWRpby5iZ21Wb2x1bWUgKiAxMDApO1xyXG4gICAgYmdtR2FnZS5zZXRBYmxlKCFHYW1lQXVkaW8uaXNCZ21NdXRlKTtcclxuICAgIGJnbUljb24ub24oJ3BvaW50ZXJ1cCcsICgpID0+IHtcclxuICAgICAgICBjb25zdCBpc09uID0gYmdtSWNvbi50ZXh0dXJlLmtleSA9PT0gJ2JnbU9uJztcclxuICAgICAgICBiZ21HYWdlLnNldEFibGUoIWlzT24pO1xyXG4gICAgICAgIGJnbUljb24uc2V0VGV4dHVyZShpc09uID8gJ2JnbU9mZicgOiAnYmdtT24nKTtcclxuICAgICAgICBHYW1lQXVkaW8uc2V0QmdtTXV0ZShpc09uKTtcclxuICAgIH0pO1xyXG4gICAgU2V0Rm9udFN0eWxlKGFsbEljb24pO1xyXG4gICAgYWxsSWNvbi5zZXRGb250U2l6ZSg2NCk7XHJcbiAgICBTZXRDb21tb25VSVByb3BzKGFsbEljb24pO1xyXG4gICAgQ3JlYXRlVUlCdG5BbmltKHNjZW5lLCBhbGxJY29uKTtcclxuICAgIGNvbnN0IGFsbEdhZ2UgPSBDcmVhdGVHYWdlQmFyKHNjZW5lLCBhbGxJY29uLngsIGFsbEljb24ueSArIDQ4LCAobWluLCBtYXgsIGN1cnIpID0+IHtcclxuICAgICAgICBHYW1lQXVkaW8uc2V0QWxsVm9sdW1lKGN1cnIgLyAxMDApO1xyXG4gICAgICAgIEdhbWVBdWRpby5zZXRTZnhWb2x1bWUoY3VyciAvIDEwMCk7XHJcbiAgICAgICAgc2Z4R2FnZS5zZXRHYWdlTnVtKGN1cnIpO1xyXG4gICAgICAgIEdhbWVBdWRpby5zZXRCZ21Wb2x1bWUoY3VyciAvIDEwMCk7XHJcbiAgICAgICAgYmdtR2FnZS5zZXRHYWdlTnVtKGN1cnIpO1xyXG4gICAgfSwgeyBjb2xvcjogJ2JsdWUnIH0pO1xyXG4gICAgYWxsR2FnZS5zZXRHYWdlTnVtKEdhbWVBdWRpby5iZ21Wb2x1bWUgKiAxMDApO1xyXG4gICAgYWxsR2FnZS5zZXRBYmxlKCFHYW1lQXVkaW8uaXNTZnhNdXRlKTtcclxuICAgIC8vIG92ZXJyaWRlIG11dGVcclxuICAgIGNvbnN0IHRtcFRvZ2dsZU11dGUgPSBHYW1lQXVkaW9VSS50b2dnbGVNdXRlO1xyXG4gICAgR2FtZUF1ZGlvVUkudG9nZ2xlTXV0ZSA9ICgpID0+IHtcclxuICAgICAgICB0bXBUb2dnbGVNdXRlKCk7XHJcbiAgICAgICAgY29uc3QgaXNPbiA9IGFsbEljb24udGV4dCA9PT0gJ0FsbCc7XHJcbiAgICAgICAgYWxsR2FnZS5zZXRBYmxlKCFpc09uKTtcclxuICAgICAgICBhbGxJY29uLnNldFRleHQoaXNPbiA/ICdNdXRlIEFsbCcgOiAnQWxsJyk7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnNldEFsbE11dGUoaXNPbik7XHJcbiAgICAgICAgc2Z4R2FnZS5zZXRBYmxlKCFpc09uKTtcclxuICAgICAgICBzZnhJY29uLnNldFRleHR1cmUoaXNPbiA/ICdzZnhPZmYnIDogJ3NmeE9uJyk7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnNldFNmeE11dGUoaXNPbik7XHJcbiAgICAgICAgYmdtR2FnZS5zZXRBYmxlKCFpc09uKTtcclxuICAgICAgICBiZ21JY29uLnNldFRleHR1cmUoaXNPbiA/ICdiZ21PZmYnIDogJ2JnbU9uJyk7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnNldEJnbU11dGUoaXNPbik7XHJcbiAgICB9O1xyXG4gICAgYWxsSWNvbi5vbigncG9pbnRlcnVwJywgR2FtZUF1ZGlvVUkudG9nZ2xlTXV0ZSk7XHJcbiAgICAvLyBhZGQgY29udGV4dCBnYW1lIG9iamVjdCB0byBwb3AgbGF5ZXJcclxuICAgIC8vIFsgYWxsSWNvbiwgc2Z4SWNvbiwgYmdtSWNvbiBdLm1hcCggY2hpbGQgPT4gR2FtZUF1ZGlvVUkucG9wLmFkZChjaGlsZCkgKTtcclxuICAgIEdhbWVBdWRpb1VJLmNvbnRleHQucHVzaChhbGxJY29uLCBzZnhJY29uLCBiZ21JY29uLCBhbGxHYWdlLCBzZnhHYWdlLCBiZ21HYWdlKTtcclxuICAgIGNvbnN0IGFycmFuZ2VMaXN0ID0gW1xyXG4gICAgICAgIGFsbEljb24sIC4uLmFsbEdhZ2UuZ2V0Q2hpbGRyZW4oKSxcclxuICAgICAgICBzZnhJY29uLCAuLi5zZnhHYWdlLmdldENoaWxkcmVuKCksXHJcbiAgICAgICAgYmdtSWNvbiwgLi4uYmdtR2FnZS5nZXRDaGlsZHJlbigpLFxyXG4gICAgXTtcclxuICAgIFNldEVsZW1lbnRJbk1pZGRsZShhcnJhbmdlTGlzdCk7XHJcbiAgICAvLyBpZiBob2xkaW5nIGF1ZGlvIGJ0biAyIHNlY29uZHMsIHRoZW4gaXQgYXBwZWFycyBsYXllciBmb3IgZGV0YWlsIGF1ZGlvIG9wdGlvblxyXG4gICAgR2FtZUF1ZGlvVUkucG9wID0gQ3JlYXRlQmFzaWNQb3BVcChzY2VuZSwgJ2F1ZGlvVUknLCB7fSwge1xyXG4gICAgICAgIGxpc3Q6IGFycmFuZ2VMaXN0LFxyXG4gICAgICAgIGV4aXRCdG46IHtcclxuICAgICAgICAgICAgaXNFeGlzdDogdHJ1ZSxcclxuICAgICAgICAgICAgdHlwZTogJ2J0bicsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBldnQ6IHtcclxuICAgICAgICAgICAgc2hvdzogKCkgPT4geyBHYW1lQXVkaW9VSS5zaG93KCk7IH0sXHJcbiAgICAgICAgICAgIGhpZGU6ICgpID0+IHsgR2FtZUF1ZGlvVUkuaGlkZSgpOyB9LFxyXG4gICAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgU2V0RGVwdGgoR2FtZUF1ZGlvVUkuYnRuLCAnaGlnaGVzdCcpO1xyXG4gICAgLy8gU2V0RGVwdGgoR2FtZUF1ZGlvVUkucG9wLCAnaGlnaGVzdCcsIDEwMCk7XHJcbiAgICAvLyBrZXkgYmluZGluZ1xyXG4gICAgV2luZG93TG9iYnkuYWRkMkFsbCgndXAnLCAnYXVkaW8nLCAoZXZ0LCBrZXkpID0+IHtcclxuICAgICAgICBpZiAoa2V5ICE9PSBjbWRLZXkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBHYW1lQXVkaW9VSS50b2dnbGVNdXRlKCk7XHJcbiAgICB9KTtcclxuICAgIEluaXRHYW1lQXVkaW9VSSgpO1xyXG4gICAgcmV0dXJuIEdhbWVBdWRpb1VJO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBHYW1lQXVkaW9VSTtcclxuZXhwb3J0IHsgR2V0R2FtZUF1ZGlvVUlBc3NldHMsIEluaXRHYW1lQXVkaW9VSSwgQ3JlYXRlR2FtZUF1ZGlvVUksIH07XHJcbiIsImltcG9ydCB7IENvbW1vblNjcm9sbCwgR2V0QXNzZXRGaWxlcyB9IGZyb20gXCJAc3JjL3NjZW5lcy9hc3NldFV0aWxzXCI7XHJcbmltcG9ydCB7IFNldERlcHRoIH0gZnJvbSBcIkBzcmMvc2NlbmVzL2RlcHRoXCI7XHJcbmltcG9ydCBHYW1lR2VzdHVyZSBmcm9tIFwiQHNyYy9zY2VuZXMvZ2VzdHVyZVwiO1xyXG5pbXBvcnQgR2FtZUlucHV0IGZyb20gXCJAc3JjL3NjZW5lcy9pbnB1dFwiO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBzcmMvdXNlclNldHRpbmdcIjtcclxuaW1wb3J0IHsgR2V0UmF0aW8sIEdldFZhbHVlVmlhUmF0aW8gfSBmcm9tIFwiQHNyYy91dGlscy9tYXRoXCI7XHJcbmltcG9ydCBXaW5kb3dMb2JieSBmcm9tIFwiQHNyYy93aW5kb3dcIjtcclxuaW1wb3J0IFVJUHJvcHMsIHsgQ3JlYXRlVUlCdG5BbmltLCBTZXRDb21tb25VSVByb3BzIH0gZnJvbSBcIi4uXCI7XHJcbmltcG9ydCB7IFNldEZvbnRTdHlsZSB9IGZyb20gXCIuLi9mb250XCI7XHJcbmNvbnN0IEdhbWVTY3JvbGwgPSB7XHJcbiAgICBidG46IG51bGwsXHJcbiAgICBpc1Njcm9sbGFibGU6IHRydWUsXHJcbiAgICBhY3RTY3JvbGw6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAoIUdhbWVTY3JvbGwuaXNTY3JvbGxhYmxlKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgV2luZG93TG9iYnkucmVxUGFyZW50KCdzY3JvbGwnKTtcclxuICAgIH0sXHJcbiAgICB3aGVlbFNjcm9sbDogZnVuY3Rpb24gKHB0cikge1xyXG4gICAgICAgIGlmIChHYW1lU2Nyb2xsLmlzU2Nyb2xsYWJsZSlcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBwdHIuZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIH0sXHJcbiAgICBkZWZhdWx0T3B0OiB7XHJcbiAgICAgICAgY21kS2V5OiAndicsXHJcbiAgICAgICAgaXNTd2lwZUdlc3R1cmVFeGlzdDogdHJ1ZSxcclxuICAgIH0sXHJcbiAgICBvcHRpb246IHt9LFxyXG59O1xyXG5jb25zdCBHZXRTY3JvbGxBc3NldHMgPSAoZXhjZXB0aW9uS2V5cykgPT4ge1xyXG4gICAgY29uc3QgYXNzZXRMaXN0ID0gW1xyXG4gICAgICAgIHsga2V5OiAnc2Nyb2xsQmVsb3cnLCB1cmw6IENvbW1vblNjcm9sbCArICdzY3JvbGxCZWxvdy5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgeyBrZXk6ICdzY3JvbGxBcnJvdycsIHVybDogQ29tbW9uU2Nyb2xsICsgJ3Njcm9sbEFycm93LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgIF07XHJcbiAgICByZXR1cm4gR2V0QXNzZXRGaWxlcyhhc3NldExpc3QsIGV4Y2VwdGlvbktleXMpO1xyXG59O1xyXG5jb25zdCBJbml0R2FtZVNjcm9sbCA9ICgpID0+IHtcclxufTtcclxuY29uc3QgQ3JlYXRlR2FtZVNjcm9sbCA9IChzY2VuZSwgb3B0aW9uKSA9PiB7XHJcbiAgICBHYW1lU2Nyb2xsLm9wdGlvbiA9IE9iamVjdC5hc3NpZ24oT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBHYW1lU2Nyb2xsLmRlZmF1bHRPcHQpLCBvcHRpb24pLCB7IHg6IFVJUHJvcHMubWFyZ2luICogNC41ICogVUlQcm9wcy5zY2FsZSAqIDEuNiwgeTogVUlQcm9wcy5tYXJnaW4gfSk7XHJcbiAgICBjb25zdCB7IHgsIHksIGNtZEtleSwgaXNTd2lwZUdlc3R1cmVFeGlzdCB9ID0gR2FtZVNjcm9sbC5vcHRpb247XHJcbiAgICAvLyBvZmYgdGhlIHByZXZlbnREZWZhdWx0IG1ldGhvZCB0byBhbGwgZXZ0c1xyXG4gICAgc2NlbmUuZ2FtZS5pbnB1dC5tb3VzZS5wcmV2ZW50RGVmYXVsdFdoZWVsID0gZmFsc2U7XHJcbiAgICBHYW1lU2Nyb2xsLmJ0biA9IHNjZW5lLmFkZC5pbWFnZSh4LCB5LCAnc2Nyb2xsQmVsb3cnKTtcclxuICAgIFNldERlcHRoKEdhbWVTY3JvbGwuYnRuLCAnaGlnaGVzdCcpO1xyXG4gICAgU2V0Q29tbW9uVUlQcm9wcyhHYW1lU2Nyb2xsLmJ0bik7XHJcbiAgICBDcmVhdGVVSUJ0bkFuaW0oc2NlbmUsIEdhbWVTY3JvbGwuYnRuKTtcclxuICAgIGNvbnN0IHByZXZXaGVlbFNjcm9sbCA9IEdhbWVTY3JvbGwud2hlZWxTY3JvbGw7XHJcbiAgICBHYW1lU2Nyb2xsLndoZWVsU2Nyb2xsID0gKHB0cikgPT4ge1xyXG4gICAgICAgIHZhciBfYSwgX2I7XHJcbiAgICAgICAgKChfYSA9IG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbi5ldnQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS51cCkgJiYgKChfYiA9IG9wdGlvbiA9PT0gbnVsbCB8fCBvcHRpb24gPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbi5ldnQpID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi51cChwdHIpKTtcclxuICAgICAgICBwcmV2V2hlZWxTY3JvbGwocHRyKTtcclxuICAgIH07XHJcbiAgICBHYW1lU2Nyb2xsLmJ0bi5vbigncG9pbnRlcnVwJywgR2FtZVNjcm9sbC5hY3RTY3JvbGwpO1xyXG4gICAgc2NlbmUuaW5wdXQub2ZmKCd3aGVlbCcsIEdhbWVTY3JvbGwud2hlZWxTY3JvbGwpO1xyXG4gICAgc2NlbmUuaW5wdXQub24oJ3doZWVsJywgR2FtZVNjcm9sbC53aGVlbFNjcm9sbCk7XHJcbiAgICAvLyBrZXkgYmluZGluZ1xyXG4gICAgV2luZG93TG9iYnkuYWRkMkFsbCgnZG93bicsICdzY3JvbGwnLCAoZXZ0LCBrZXkpID0+IHtcclxuICAgICAgICBpZiAoa2V5ICE9PSBjbWRLZXkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBHYW1lU2Nyb2xsLmFjdFNjcm9sbCgpO1xyXG4gICAgfSk7XHJcbiAgICBpZiAoaXNTd2lwZUdlc3R1cmVFeGlzdClcclxuICAgICAgICBDcmVhdGVTd2lwZVNjcm9sbChzY2VuZSk7XHJcbiAgICBJbml0R2FtZVNjcm9sbCgpO1xyXG4gICAgcmV0dXJuIEdhbWVTY3JvbGw7XHJcbn07XHJcbmNvbnN0IFNldEdhbWVTY3JvbGxhYmxlID0gKGlzU2Nyb2xsYWJsZSkgPT4ge1xyXG4gICAgaWYgKCFHYW1lU2Nyb2xsLmJ0bilcclxuICAgICAgICByZXR1cm47XHJcbiAgICBHYW1lU2Nyb2xsLmlzU2Nyb2xsYWJsZSA9IGlzU2Nyb2xsYWJsZTtcclxuICAgIEdhbWVTY3JvbGwuYnRuLnNldEFscGhhKEdhbWVTY3JvbGwuaXNTY3JvbGxhYmxlID8gVUlQcm9wcy5hbHBoYSA6IDApO1xyXG4gICAgcmV0dXJuIEdhbWVTY3JvbGw7XHJcbn07XHJcbmNvbnN0IENyZWF0ZVN3aXBlU2Nyb2xsID0gKHNjZW5lKSA9PiB7XHJcbiAgICBjb25zdCBkaXNhYmxlQWxwaGEgPSAwO1xyXG4gICAgY29uc3QgYWJsZUFscGhhID0gMC42O1xyXG4gICAgY29uc3Qgc2Nyb2xsQmcgPSBzY2VuZS5hZGQuaW1hZ2UoVmlldy5jZW50ZXJYLCBWaWV3LmNlbnRlclksICdibGFja1NjcmVlbicpO1xyXG4gICAgc2Nyb2xsQmcuc2V0QWxwaGEoMC42KTtcclxuICAgIHNjcm9sbEJnLnNldERpc3BsYXlTaXplKFZpZXcudywgVmlldy5oKTtcclxuICAgIHNjcm9sbEJnLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICBzY3JvbGxCZy5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgIGxldCBpc1Njcm9sbEJnVGV4dHVyZUV4aXN0ID0gdHJ1ZTtcclxuICAgIGlmICghc2NlbmUudGV4dHVyZXMuZ2V0KCdibGFja1NjcmVlbicpKVxyXG4gICAgICAgIGlzU2Nyb2xsQmdUZXh0dXJlRXhpc3QgPSBmYWxzZTtcclxuICAgIGVsc2VcclxuICAgICAgICBpc1Njcm9sbEJnVGV4dHVyZUV4aXN0ID0gdHJ1ZTtcclxuICAgIGNvbnN0IHNjcm9sbEFycm93ID0gc2NlbmUuYWRkLmltYWdlKFZpZXcuY2VudGVyWCwgVmlldy5jZW50ZXJZLCAnc2Nyb2xsQXJyb3cnKTtcclxuICAgIHNjcm9sbEFycm93LnNldE9yaWdpbigwLjUsIDAuNSk7XHJcbiAgICBzY3JvbGxBcnJvdy5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgIHNjcm9sbEFycm93LnNldEFscGhhKGRpc2FibGVBbHBoYSk7XHJcbiAgICBjb25zdCBzY3JvbGxUeHQgPSBzY2VuZS5hZGQudGV4dChWaWV3LmNlbnRlclgsIFZpZXcuY2VudGVyWSwgJ1Njcm9sbCBUb3VjaCBEb3duJyk7XHJcbiAgICBTZXRGb250U3R5bGUoc2Nyb2xsVHh0KTtcclxuICAgIHNjcm9sbFR4dC5zZXRBbHBoYSgwLjgpO1xyXG4gICAgc2Nyb2xsVHh0LnNldEZvbnRTaXplKFZpZXcudyAvIDE2KTtcclxuICAgIHNjcm9sbFR4dC5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgIGNvbnN0IHN3aXBlWUFtb3VudCA9IFZpZXcuaCAqIDIgLyA1O1xyXG4gICAgY29uc3Qgc3dpcGVZTGltaXQgPSBWaWV3LmggLyAyICsgVmlldy5oIC8gODtcclxuICAgIGNvbnN0IFNjcm9sbFNob3cgPSAoc2l6ZVksIGFscGhhKSA9PiB7XHJcbiAgICAgICAgc2Nyb2xsQXJyb3cuc2V0RGlzcGxheVNpemUoVmlldy5jZW50ZXJYLCBzaXplWSk7XHJcbiAgICAgICAgc2Nyb2xsQXJyb3cuc2V0QWxwaGEoYWxwaGEpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IFNjcm9sbEhpZGUgPSAoKSA9PiB7XHJcbiAgICAgICAgaXNTY3JvbGxCZ1RleHR1cmVFeGlzdCAmJiBzY3JvbGxCZy5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICBzY3JvbGxBcnJvdy5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICBzY3JvbGxBcnJvdy5zZXRBbHBoYShkaXNhYmxlQWxwaGEpO1xyXG4gICAgICAgIHNjcm9sbFR4dC5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgIH07XHJcbiAgICAvLyBtb3ZlIGV2dFxyXG4gICAgR2FtZUlucHV0LmFkZCgnbW92ZScsIChwdHIsIGN1cnJlbnRseU92ZXIpID0+IHtcclxuICAgICAgICBpZiAoIXB0ci5pc0Rvd24pXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAoIUdhbWVTY3JvbGwuaXNTY3JvbGxhYmxlKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgLy8gc2hvdyBvciBoaWRlIHNjcm9sbCBkb3duIGltZyAmIHR4dFxyXG4gICAgICAgIGNvbnN0IGRpZmZZID0gR2FtZUdlc3R1cmUuaW5pdFBvcy55IC0gcHRyLnk7XHJcbiAgICAgICAgaWYgKGRpZmZZID49IHN3aXBlWUFtb3VudCkge1xyXG4gICAgICAgICAgICBzY3JvbGxBcnJvdy5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgICBpZiAoZGlmZlkgPj0gc3dpcGVZTGltaXQpIHtcclxuICAgICAgICAgICAgICAgIC8vIGxpbWl0IHN3aXBlXHJcbiAgICAgICAgICAgICAgICBpc1Njcm9sbEJnVGV4dHVyZUV4aXN0ICYmIHNjcm9sbEJnLnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICBzY3JvbGxUeHQuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIFNjcm9sbFNob3coc3dpcGVZTGltaXQsIGFibGVBbHBoYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyBjYWxjdWxhdGUgYWxwaGEgcmF0aW9cclxuICAgICAgICAgICAgICAgIGNvbnN0IGRpc3RhbmNlUmF0aW8gPSBHZXRSYXRpbyhzd2lwZVlBbW91bnQsIHN3aXBlWUxpbWl0LCBkaWZmWSk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhbHBoYVJhdGlvID0gR2V0VmFsdWVWaWFSYXRpbyhkaXNhYmxlQWxwaGEsIGFibGVBbHBoYSwgZGlzdGFuY2VSYXRpbyk7XHJcbiAgICAgICAgICAgICAgICBTY3JvbGxTaG93KGRpZmZZLCBhbHBoYVJhdGlvKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIFNjcm9sbEhpZGUoKTtcclxuICAgIH0pO1xyXG4gICAgLy8gYWN0IHNjcm9sbCB3aGVuIHB0ciB1cFxyXG4gICAgR2FtZUlucHV0LmFkZCgndXAnLCAocHRyLCBjdXJyZW50bHlPdmVyKSA9PiB7XHJcbiAgICAgICAgaWYgKCFHYW1lU2Nyb2xsLmlzU2Nyb2xsYWJsZSlcclxuICAgICAgICAgICAgcmV0dXJuIFNjcm9sbEhpZGUoKTtcclxuICAgICAgICBpZiAoIXNjcm9sbEFycm93LnZpc2libGUpXHJcbiAgICAgICAgICAgIHJldHVybiBTY3JvbGxIaWRlKCk7XHJcbiAgICAgICAgaWYgKCFzY3JvbGxUeHQudmlzaWJsZSlcclxuICAgICAgICAgICAgcmV0dXJuIFNjcm9sbEhpZGUoKTtcclxuICAgICAgICBTY3JvbGxIaWRlKCk7XHJcbiAgICAgICAgR2FtZVNjcm9sbC5hY3RTY3JvbGwoKTtcclxuICAgIH0pO1xyXG4gICAgW3Njcm9sbEJnLCBzY3JvbGxBcnJvdywgc2Nyb2xsVHh0XS5tYXAoc2Nyb2xsRWxlID0+IFNldERlcHRoKHNjcm9sbEVsZSwgJ2hpZ2hlc3QnKSk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVTY3JvbGw7XHJcbmV4cG9ydCB7IEdldFNjcm9sbEFzc2V0cywgSW5pdEdhbWVTY3JvbGwsIENyZWF0ZUdhbWVTY3JvbGwsIFNldEdhbWVTY3JvbGxhYmxlLCB9O1xyXG4iLCJpbXBvcnQgeyBDb21tb25TZngsIENvbW1vbkZ1bGxTY3JlZW4sIEdldEFzc2V0RmlsZXMgfSBmcm9tIFwiQHNyYy9zY2VuZXMvYXNzZXRVdGlsc1wiO1xyXG5pbXBvcnQgeyBTZXREZXB0aCB9IGZyb20gXCJAc3JjL3NjZW5lcy9kZXB0aFwiO1xyXG5pbXBvcnQgV2luZG93TG9iYnkgZnJvbSBcIkBzcmMvd2luZG93XCI7XHJcbmltcG9ydCBVSVByb3BzLCB7IENyZWF0ZVVJQnRuQW5pbSwgU2V0Q29tbW9uVUlQcm9wcyB9IGZyb20gXCIuLlwiO1xyXG5pbXBvcnQgeyBTZXRHYW1lU2Nyb2xsYWJsZSB9IGZyb20gXCIuLi9zY3JvbGxcIjtcclxuY29uc3QgR2FtZUZ1bGxTY3JlZW4gPSB7XHJcbiAgICBpc0RlbGF5aW5nOiBmYWxzZSxcclxuICAgIGRlbGF5OiAzMDAsXHJcbiAgICBjaGNrVGltZTogMTAwMCxcclxuICAgIGlzRnVsbFNjcmVlbjogZmFsc2UsXHJcbiAgICBidG46IG51bGwsXHJcbiAgICBkZWZhdWx0T3B0OiB7XHJcbiAgICAgICAgY21kS2V5OiAnZicsXHJcbiAgICB9LFxyXG4gICAgb3B0aW9uOiB7fSxcclxufTtcclxuY29uc3QgR2V0RnVsbFNjcmVlbkFzc2V0cyA9IChleGNlcHRpb25LZXlzKSA9PiB7XHJcbiAgICBjb25zdCBhc3NldExpc3QgPSBbXHJcbiAgICAgICAgeyBrZXk6ICdmdWxsU2NyZWVuTGFyZ2VyJywgdXJsOiBDb21tb25GdWxsU2NyZWVuICsgJ2Z1bGxTY3JlZW5MYXJnZXIucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgIHsga2V5OiAnZnVsbFNjcmVlblNtYWxsZXInLCB1cmw6IENvbW1vbkZ1bGxTY3JlZW4gKyAnZnVsbFNjcmVlblNtYWxsZXIucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgIHsga2V5OiAndG91Y2hTZngnLCB1cmw6IENvbW1vblNmeCArICd0b3VjaFNmeC5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICBdO1xyXG4gICAgcmV0dXJuIEdldEFzc2V0RmlsZXMoYXNzZXRMaXN0LCBleGNlcHRpb25LZXlzKTtcclxufTtcclxuY29uc3QgSW5pdEZ1bGxTY3JlZW4gPSAoKSA9PiB7XHJcbn07XHJcbmNvbnN0IENyZWF0ZUZ1bGxTY3JlZW4gPSAoc2NlbmUsIG9wdGlvbikgPT4ge1xyXG4gICAgR2FtZUZ1bGxTY3JlZW4ub3B0aW9uID0gT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIEdhbWVGdWxsU2NyZWVuLmRlZmF1bHRPcHQpLCB7IHg6IFVJUHJvcHMubWFyZ2luLCB5OiBVSVByb3BzLm1hcmdpbiB9KSwgb3B0aW9uKTtcclxuICAgIGNvbnN0IHsgeCwgeSwgY21kS2V5IH0gPSBHYW1lRnVsbFNjcmVlbi5vcHRpb247XHJcbiAgICBjb25zdCBidG5UZXh0dXJlID0gR2FtZUZ1bGxTY3JlZW4uaXNGdWxsU2NyZWVuID8gJ2Z1bGxTY3JlZW5TbWFsbGVyJyA6ICdmdWxsU2NyZWVuTGFyZ2VyJztcclxuICAgIC8vIGFkZCBzY3JlZW4gc2l6ZSBjb250cm9sbGVyXHJcbiAgICBHYW1lRnVsbFNjcmVlbi5idG4gPSBzY2VuZS5hZGQuaW1hZ2UoeCwgeSwgYnRuVGV4dHVyZSk7XHJcbiAgICBTZXREZXB0aChHYW1lRnVsbFNjcmVlbi5idG4sICdoaWdoZXN0Jyk7XHJcbiAgICBTZXRDb21tb25VSVByb3BzKEdhbWVGdWxsU2NyZWVuLmJ0bik7XHJcbiAgICBDcmVhdGVVSUJ0bkFuaW0oc2NlbmUsIEdhbWVGdWxsU2NyZWVuLmJ0bik7XHJcbiAgICBjb25zdCBkZWxheUV2dCA9ICgpID0+IHtcclxuICAgICAgICBHYW1lRnVsbFNjcmVlbi5idG4uZGlzYWJsZUludGVyYWN0aXZlKCk7XHJcbiAgICAgICAgR2FtZUZ1bGxTY3JlZW4uaXNEZWxheWluZyA9IHRydWU7XHJcbiAgICAgICAgR2FtZUZ1bGxTY3JlZW4uYnRuLnNldEFscGhhKDAuMik7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIEdhbWVGdWxsU2NyZWVuLmJ0bi5zZXRJbnRlcmFjdGl2ZSgpO1xyXG4gICAgICAgICAgICBHYW1lRnVsbFNjcmVlbi5pc0RlbGF5aW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIEdhbWVGdWxsU2NyZWVuLmJ0bi5zZXRBbHBoYShVSVByb3BzLmFscGhhKTtcclxuICAgICAgICAgICAgc2NlbmUudHdlZW5zLmFkZENvdW50ZXIoe1xyXG4gICAgICAgICAgICAgICAgZHVyYXRpb246IDEwMDAsXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3KSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFzY2VuZS5zY2FsZS5pc0Z1bGxzY3JlZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhpdEV2dCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0dy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgR2FtZUZ1bGxTY3JlZW4uYnRuLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgR2FtZUZ1bGxTY3JlZW4uaXNEZWxheWluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIEdhbWVGdWxsU2NyZWVuLmJ0bi5zZXRBbHBoYShVSVByb3BzLmFscGhhKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSwgR2FtZUZ1bGxTY3JlZW4uZGVsYXkpO1xyXG4gICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBjb25zdCBleGl0RXZ0ID0gKCkgPT4ge1xyXG4gICAgICAgIEdhbWVGdWxsU2NyZWVuLmlzRnVsbFNjcmVlbiA9IGZhbHNlO1xyXG4gICAgICAgIHNjZW5lLnNjYWxlLnN0b3BGdWxsc2NyZWVuKCk7XHJcbiAgICAgICAgR2FtZUZ1bGxTY3JlZW4uYnRuLnNldFRleHR1cmUoJ2Z1bGxTY3JlZW5MYXJnZXInKTtcclxuICAgICAgICBTZXRHYW1lU2Nyb2xsYWJsZSh0cnVlKTtcclxuICAgIH07XHJcbiAgICBjb25zdCB0b2dnbGVFdnQgPSAoKSA9PiB7XHJcbiAgICAgICAgaWYgKEdhbWVGdWxsU2NyZWVuLmlzRGVsYXlpbmcpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBkZWxheUV2dCgpO1xyXG4gICAgICAgIEdhbWVGdWxsU2NyZWVuLmlzRnVsbFNjcmVlbiA9ICFHYW1lRnVsbFNjcmVlbi5pc0Z1bGxTY3JlZW47XHJcbiAgICAgICAgaWYgKEdhbWVGdWxsU2NyZWVuLmlzRnVsbFNjcmVlbikge1xyXG4gICAgICAgICAgICBzY2VuZS5zY2FsZS5zdGFydEZ1bGxzY3JlZW4oKTtcclxuICAgICAgICAgICAgR2FtZUZ1bGxTY3JlZW4uYnRuLnNldFRleHR1cmUoJ2Z1bGxTY3JlZW5TbWFsbGVyJyk7XHJcbiAgICAgICAgICAgIFNldEdhbWVTY3JvbGxhYmxlKGZhbHNlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICBleGl0RXZ0KCk7XHJcbiAgICB9O1xyXG4gICAgR2FtZUZ1bGxTY3JlZW4uYnRuLm9uKCdwb2ludGVydXAnLCAoKSA9PiB7IHRvZ2dsZUV2dCgpOyB9KTtcclxuICAgIC8vIHJlc2l6ZSBldmVudCBmb3Igc3RvcCBmdWxsIHNjcmVlblxyXG4gICAgc2NlbmUuc2NhbGUub2ZmKCdyZXNpemUnKTtcclxuICAgIHNjZW5lLnNjYWxlLm9uKCdyZXNpemUnLCAoKSA9PiB7XHJcbiAgICAgICAgaWYgKEdhbWVGdWxsU2NyZWVuLmJ0bi5pc0NoYW5naW5nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKEdhbWVGdWxsU2NyZWVuLmlzRGVsYXlpbmcpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAoIUdhbWVGdWxsU2NyZWVuLmlzRnVsbFNjcmVlbilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGRlbGF5RXZ0KCk7XHJcbiAgICAgICAgZXhpdEV2dCgpO1xyXG4gICAgfSk7XHJcbiAgICAvLyBrZXkgYmluZGluZ1xyXG4gICAgV2luZG93TG9iYnkuYWRkMkFsbCgndXAnLCAnZnVsbFNjcmVlbicsIChldnQsIGtleSkgPT4ge1xyXG4gICAgICAgIGlmIChrZXkgIT09IGNtZEtleSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRvZ2dsZUV2dCgpO1xyXG4gICAgfSk7XHJcbiAgICBJbml0RnVsbFNjcmVlbigpO1xyXG4gICAgcmV0dXJuIEdhbWVGdWxsU2NyZWVuO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBHYW1lRnVsbFNjcmVlbjtcclxuZXhwb3J0IHsgR2V0RnVsbFNjcmVlbkFzc2V0cywgSW5pdEZ1bGxTY3JlZW4sIENyZWF0ZUZ1bGxTY3JlZW4sIH07XHJcbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQHNyYy91c2VyU2V0dGluZ1wiO1xyXG5pbXBvcnQgeyBDcmVhdGVHYW1lR2VzdHVyZSwgVXBkYXRlR2FtZUdlc3R1cmUgfSBmcm9tIFwiLi4vZ2VzdHVyZVwiO1xyXG5pbXBvcnQgeyBDcmVhdGVHYW1lSW5wdXQgfSBmcm9tIFwiLi4vaW5wdXRcIjtcclxuaW1wb3J0IHsgQ3JlYXRlR2FtZUF1ZGlvVUksIEdldEdhbWVBdWRpb1VJQXNzZXRzIH0gZnJvbSBcIi4vYXVkaW9cIjtcclxuaW1wb3J0IHsgQ3JlYXRlRnVsbFNjcmVlbiwgR2V0RnVsbFNjcmVlbkFzc2V0cyB9IGZyb20gXCIuL2Z1bGxTY3JlZW5cIjtcclxuaW1wb3J0IHsgR2V0R2FnZUFzc2V0cyB9IGZyb20gXCIuL2dhZ2VcIjtcclxuaW1wb3J0IHsgR2V0UG9wVXBBc3NldHMgfSBmcm9tIFwiLi9wb3BVcFwiO1xyXG5pbXBvcnQgeyBDcmVhdGVHYW1lU2Nyb2xsLCBHZXRTY3JvbGxBc3NldHMgfSBmcm9tIFwiLi9zY3JvbGxcIjtcclxuY29uc3QgVUlQcm9wcyA9IHtcclxuICAgIGV4aXRQb3NZOiBWaWV3LmggLSAzNixcclxuICAgIG1hcmdpbjogMzAsXHJcbiAgICBhbHBoYTogMC44LFxyXG4gICAgc2NhbGU6IDAuNixcclxuICAgIGRvd25HYXA6IDQsIC8vIGRvd24gZ2FwIGZvciBhbmltXHJcbn07XHJcbmNvbnN0IFNldFVJUHJvcHMgPSAocHJvcHMsIHZhbHVlKSA9PiB7XHJcbiAgICBpZiAoIVVJUHJvcHNbcHJvcHNdKVxyXG4gICAgICAgIGNvbnNvbGUud2FybihgdWkgcHJvcHM6ICR7cHJvcHN9IGlzIG5vdCBleGlzdGApO1xyXG4gICAgVUlQcm9wc1twcm9wc10gPSB2YWx1ZTtcclxuICAgIHJldHVybiBVSVByb3BzO1xyXG59O1xyXG5jb25zdCBTZXRDb21tb25VSVByb3BzID0gKGJ0bikgPT4ge1xyXG4gICAgYnRuLnNldEFscGhhKFVJUHJvcHMuYWxwaGEpO1xyXG4gICAgYnRuLnNldFNjYWxlKFVJUHJvcHMuc2NhbGUpO1xyXG4gICAgcmV0dXJuIGJ0bjtcclxufTtcclxuY29uc3QgQ3JlYXRlVUlCdG5BbmltID0gKHNjZW5lLCBidG4sIG9wdGlvbikgPT4ge1xyXG4gICAgdmFyIF9hO1xyXG4gICAgY29uc3QgdG9nZ2xlQnRuID0gYnRuO1xyXG4gICAgaWYgKCF0b2dnbGVCdG4pXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgY29uc3QgZHVyID0gKF9hID0gb3B0aW9uID09PSBudWxsIHx8IG9wdGlvbiA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9uLmR1cikgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogNzA7XHJcbiAgICBjb25zdCBDaGNrSXNNb3ZlZCA9ICgpID0+IHtcclxuICAgICAgICBpZiAoIXRvZ2dsZUJ0bi5pc01vdmVkT25jZSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIHRvZ2dsZUJ0bi5pc01vdmVkT25jZSA9IGZhbHNlO1xyXG4gICAgICAgIGlmICh0b2dnbGVCdG4uZG93blBvc1kgIT09IHRvZ2dsZUJ0bi55ICsgVUlQcm9wcy5kb3duR2FwKSB7XHJcbiAgICAgICAgICAgIHRvZ2dsZUJ0bi51cFBvc1kgPSB0b2dnbGVCdG4ueTtcclxuICAgICAgICAgICAgdG9nZ2xlQnRuLmRvd25Qb3NZID0gdG9nZ2xlQnRuLnkgKyBVSVByb3BzLmRvd25HYXA7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuICAgIHRvZ2dsZUJ0bi5kb3duRXZ0ID0gKCkgPT4ge1xyXG4gICAgICAgIENoY2tJc01vdmVkKCk7XHJcbiAgICAgICAgc2NlbmUudHdlZW5zLmFkZENvdW50ZXIoe1xyXG4gICAgICAgICAgICBmcm9tOiB0b2dnbGVCdG4ueSwgdG86IHRvZ2dsZUJ0bi5kb3duUG9zWSwgZHVyYXRpb246IGR1cixcclxuICAgICAgICAgICAgb25TdGFydDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlQnRuLmlzQ2hhbmdpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKHR3LCB0d0RhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdG9nZ2xlQnRuLmlzQ2hhbmdpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVCdG4udXBFdnQoKTtcclxuICAgICAgICAgICAgICAgICAgICB0dy5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0b2dnbGVCdG4ueSA9IHR3RGF0YS52YWx1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlQnRuLmlzQ2hhbmdpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICB0b2dnbGVCdG4udXBFdnQgPSAoKSA9PiB7XHJcbiAgICAgICAgQ2hja0lzTW92ZWQoKTtcclxuICAgICAgICBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih7XHJcbiAgICAgICAgICAgIGZyb206IHRvZ2dsZUJ0bi55LCB0bzogdG9nZ2xlQnRuLnVwUG9zWSwgZHVyYXRpb246IGR1cixcclxuICAgICAgICAgICAgb25TdGFydDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdG9nZ2xlQnRuLmlzQ2hhbmdpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKHR3LCB0d0RhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdG9nZ2xlQnRuLmlzQ2hhbmdpbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2dnbGVCdG4ueSA9IHRvZ2dsZUJ0bi51cFBvc1k7XHJcbiAgICAgICAgICAgICAgICAgICAgdHcucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdG9nZ2xlQnRuLnkgPSB0d0RhdGEudmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRvZ2dsZUJ0bi5pc0NoYW5naW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG4gICAgdG9nZ2xlQnRuLnVwUG9zWSA9IGJ0bi55O1xyXG4gICAgdG9nZ2xlQnRuLmRvd25Qb3NZID0gYnRuLnkgKyBVSVByb3BzLmRvd25HYXA7XHJcbiAgICB0b2dnbGVCdG4uaXNNb3ZlZE9uY2UgPSB0cnVlO1xyXG4gICAgdG9nZ2xlQnRuLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICB0b2dnbGVCdG4ub24oJ3BvaW50ZXJkb3duJywgdG9nZ2xlQnRuLmRvd25FdnQpO1xyXG4gICAgdG9nZ2xlQnRuLm9uKCdwb2ludGVydXAnLCB0b2dnbGVCdG4udXBFdnQpO1xyXG4gICAgdG9nZ2xlQnRuLm9uKCdwb2ludGVyb3V0JywgdG9nZ2xlQnRuLnVwRXZ0KTtcclxuICAgIHJldHVybiBVSVByb3BzO1xyXG59O1xyXG5jb25zdCBTZXRFbGVtZW50SW5NaWRkbGUgPSAobGlzdCwgaW5pdFkpID0+IHtcclxuICAgIGNvbnN0IGNvbnRlbnRJbml0WSA9IGluaXRZICE9PSBudWxsICYmIGluaXRZICE9PSB2b2lkIDAgPyBpbml0WSA6IDA7XHJcbiAgICBjb25zdCB5TGlzdCA9IGxpc3QubWFwKGNoaWxkID0+IGNoaWxkLnkpO1xyXG4gICAgY29uc3QgdG9wWSA9IE1hdGgubWluKC4uLnlMaXN0KTtcclxuICAgIGNvbnN0IGJvdHRvbVkgPSBNYXRoLm1heCguLi55TGlzdCk7XHJcbiAgICBjb25zdCBnYXBMZW5ndGggPSBib3R0b21ZIC0gdG9wWSAtIGNvbnRlbnRJbml0WTtcclxuICAgIGlmIChnYXBMZW5ndGggPiBWaWV3LmgpIHtcclxuICAgICAgICBjb25zb2xlLndhcm4oJ2NvbnRlbnQgZ2FwIGlzIG1vcmUgdGhhbiB2aWV3IGhlaWdodCwgdGhpcyBzaG91bGQgYmUgYSBzY3JvbGxhYmxlIGxheWVyJyk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBjb25zdCBnYXBZID0gKFZpZXcuaCAtIGdhcExlbmd0aCkgLyAyO1xyXG4gICAgICAgIGNvbnN0IGNvbnRlbnRZID0gdG9wWSAtIGdhcFk7XHJcbiAgICAgICAgY29uc3QgbGFzdCA9IGxpc3QubWFwKGNoaWxkID0+IGNoaWxkLnkgLT0gY29udGVudFkpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBHZXRHYW1lQ29tbW9uVUlBc3NldHMgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBjb21tb25VSUFzc2V0c0xpc3QgPSBbXHJcbiAgICAgICAgLi4uR2V0U2Nyb2xsQXNzZXRzKCksXHJcbiAgICAgICAgLi4uR2V0RnVsbFNjcmVlbkFzc2V0cygpLFxyXG4gICAgICAgIC4uLkdldFBvcFVwQXNzZXRzKCksXHJcbiAgICAgICAgLi4uR2V0R2FnZUFzc2V0cygnYmx1ZScpLFxyXG4gICAgICAgIC4uLkdldEdhbWVBdWRpb1VJQXNzZXRzKCksXHJcbiAgICBdO1xyXG4gICAgcmV0dXJuIGNvbW1vblVJQXNzZXRzTGlzdDtcclxufTtcclxuY29uc3QgQ3JlYXRlR2FtZUNvbW1vblVJID0gKHNjZW5lLCBleGNlcHRpb25LZXlzKSA9PiB7XHJcbiAgICBDcmVhdGVHYW1lSW5wdXQoc2NlbmUpO1xyXG4gICAgQ3JlYXRlRnVsbFNjcmVlbihzY2VuZSk7XHJcbiAgICBDcmVhdGVHYW1lU2Nyb2xsKHNjZW5lKTtcclxuICAgIENyZWF0ZUdhbWVHZXN0dXJlKHNjZW5lKTtcclxuICAgIENyZWF0ZUdhbWVBdWRpb1VJKHNjZW5lKTtcclxufTtcclxuY29uc3QgVXBkYXRlR2FtZUNvbW1vblVJID0gKGRlbHRhKSA9PiB7XHJcbiAgICBVcGRhdGVHYW1lR2VzdHVyZShkZWx0YSk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFVJUHJvcHM7XHJcbmV4cG9ydCB7IFNldENvbW1vblVJUHJvcHMsIFNldFVJUHJvcHMsIENyZWF0ZVVJQnRuQW5pbSwgU2V0RWxlbWVudEluTWlkZGxlLCBHZXRHYW1lQ29tbW9uVUlBc3NldHMsIENyZWF0ZUdhbWVDb21tb25VSSwgVXBkYXRlR2FtZUNvbW1vblVJLCB9O1xyXG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnQHNyYy91c2VyU2V0dGluZyc7XHJcbmltcG9ydCB7IFNldHRpbmdDb250ZXh0TWFyZ2luLCBTZXR0aW5nR2FwQ29udGV4dE1hcmdpbiwgU2V0dGluZ0dhcENvbnRleHRNYXJnaW5MYXJnZXIgfSBmcm9tICcuJztcclxuaW1wb3J0IEdhbWVBdWRpbyBmcm9tICdAc3JjL3NjZW5lcy9hdWRpbyc7XHJcbmltcG9ydCB7IFNldERlcHRoIH0gZnJvbSAnLi4vZGVwdGgnO1xyXG5pbXBvcnQgeyBDb250ZXh0TWFyZ2luSCwgQ29udGV4dE1hcmdpblcsIFNldEZvbnQyQ29tbW9uQ29udGV4dFN0eWxlLCBUeHRUaXRsZUhlYWRTaXplLCBUeHRUaXRsZUhlaWdodEdhcCB9IGZyb20gJy4uL2ZvbnQnO1xyXG5pbXBvcnQgR2FtZVRpbWUgZnJvbSAnLi90aW1lJztcclxuaW1wb3J0IHsgU3RhcnRUaXRsZSB9IGZyb20gJy4uL3RpdGxlJztcclxuaW1wb3J0IHsgU3RvcEdhbWUgfSBmcm9tICcuLi9nYW1lJztcclxuaW1wb3J0IHsgQ3JlYXRlR2FnZUJhciB9IGZyb20gJ0BzcmMvc2NlbmVzL3VpL2dhZ2UnO1xyXG5pbXBvcnQgVUlQcm9wcyBmcm9tICdAc3JjL3NjZW5lcy91aSc7XHJcbmNvbnN0IFNldHRpbmcgPSB7XHJcbiAgICBidG46IG51bGwsXHJcbiAgICBsYXllcjogW10sXHJcbiAgICBsYXllckRhdGE6IHtcclxuICAgICAgICB0eHRHYXA6IDUwLFxyXG4gICAgICAgIGNvbnRyb2xUeHRMaXN0OiBbJ0Z1bGxTY3JlZW4nLCAnTm9ybWFsJ10sXHJcbiAgICAgICAgaXNGdWxsU2NyZWVuOiBmYWxzZSxcclxuICAgIH0sXHJcbiAgICBleGl0QnRuOiBudWxsLFxyXG4gICAgaXNPcGVuOiBmYWxzZSxcclxuICAgIGlzVHdpbmc6IGZhbHNlLFxyXG59O1xyXG5jb25zdCBJbml0U2V0dGluZyA9IChzY2VuZSkgPT4ge1xyXG4gICAgU2V0dGluZy5pc1R3aW5nID0gZmFsc2U7XHJcbiAgICBIaWRlU2V0dGluZyhzY2VuZSk7XHJcbn07XHJcbmNvbnN0IENyZWF0ZVNldHRpbmcgPSAoc2NlbmUpID0+IHtcclxuICAgIGNvbnN0IHsgbWFyZ2luLCBhbHBoYSwgc2NhbGUgfSA9IFVJUHJvcHM7XHJcbiAgICBTZXR0aW5nLmJ0biA9IHNjZW5lLmFkZC5pbWFnZShWaWV3LncgLSBtYXJnaW4sIG1hcmdpbiwgJ3NldHRpbmdCdG4nKTtcclxuICAgIFNldHRpbmcuYnRuLnNldFNjYWxlKHNjYWxlKTtcclxuICAgIFNldHRpbmcuYnRuLnNldEFscGhhKGFscGhhKTtcclxuICAgIFNldHRpbmcuYnRuLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICBTZXR0aW5nLmJ0bi5vbigncG9pbnRlcnVwJywgKCkgPT4geyBTZXR0aW5nLmlzVHdpbmcgfHwgQW5pbVNob3dTZXR0aW5nKHNjZW5lKTsgfSk7XHJcbiAgICAvLyBTZXR0aW5nLmxheWVyID0gc2NlbmUuYWRkLmNvbnRhaW5lcigpO1xyXG4gICAgLy8gU2V0dGluZy5sYXllciA9IHNjZW5lLmFkZC5sYXllcigpO1xyXG4gICAgY29uc3QgYmcgPSBzY2VuZS5hZGQuaW1hZ2UoVmlldy5jZW50ZXJYLCBWaWV3LmNlbnRlclksICdibGFja1NjcmVlbicpO1xyXG4gICAgYmcuc2V0SW50ZXJhY3RpdmUoKTtcclxuICAgIGJnLnNldERpc3BsYXlTaXplKFZpZXcudywgVmlldy5oKTtcclxuICAgIGJnLnNldEFscGhhKDAuNCk7XHJcbiAgICBjb25zdCBwYW5lbCA9IHNjZW5lLmFkZC5pbWFnZShWaWV3LmNlbnRlclgsIFZpZXcuY2VudGVyWSwgJ3NldHRpbmdQYW5lbCcpO1xyXG4gICAgcGFuZWwuc2V0RGlzcGxheVNpemUoVmlldy53IC0gQ29udGV4dE1hcmdpblcsIFZpZXcuaCAtIENvbnRleHRNYXJnaW5IKTtcclxuICAgIGNvbnN0IHRpdGxlID0gc2NlbmUuYWRkLnRleHQoVmlldy5jZW50ZXJYLCBWaWV3LmNlbnRlclkgLSAoVHh0VGl0bGVIZWlnaHRHYXAgKiAzKSwgJ1NldHRpbmcnKTtcclxuICAgIFNldEZvbnQyQ29tbW9uQ29udGV4dFN0eWxlKHRpdGxlKTtcclxuICAgIHRpdGxlLnNldEZvbnRTaXplKFR4dFRpdGxlSGVhZFNpemUpO1xyXG4gICAgY29uc3QgYmdtQnRuID0gc2NlbmUuYWRkLmltYWdlKFZpZXcuY2VudGVyWCwgVmlldy5jZW50ZXJZIC0gVmlldy5oIC8gNiwgJ211c2ljT24nKTtcclxuICAgIGNvbnN0IGJnbUdhZ2UgPSBDcmVhdGVHYWdlQmFyKHNjZW5lLCBWaWV3LmNlbnRlclgsIGJnbUJ0bi55ICsgU2V0dGluZ0dhcENvbnRleHRNYXJnaW4sIChtaW4sIG1heCwgY3VycikgPT4ge1xyXG4gICAgICAgIEdhbWVBdWRpby5zZXRCZ21Wb2x1bWUoY3VyciAvIDEwMCk7XHJcbiAgICB9KTtcclxuICAgIGJnbUdhZ2Uuc2V0R2FnZU51bShHYW1lQXVkaW8uYmdtVm9sdW1lICogMTAwKTtcclxuICAgIGNvbnN0IHNmeEJ0biA9IHNjZW5lLmFkZC5pbWFnZShWaWV3LmNlbnRlclgsIGJnbUdhZ2UueSArIFNldHRpbmdHYXBDb250ZXh0TWFyZ2luLCAnYXVkaW9PbicpO1xyXG4gICAgY29uc3Qgc2Z4R2FnZSA9IENyZWF0ZUdhZ2VCYXIoc2NlbmUsIFZpZXcuY2VudGVyWCwgc2Z4QnRuLnkgKyBTZXR0aW5nR2FwQ29udGV4dE1hcmdpbiwgKG1pbiwgbWF4LCBjdXJyKSA9PiB7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnNldFNmeFZvbHVtZShjdXJyIC8gMTAwKTtcclxuICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgnZ2VhckFuaW0nKTtcclxuICAgIH0pO1xyXG4gICAgc2Z4R2FnZS5zZXRHYWdlTnVtKEdhbWVBdWRpby5zZnhWb2x1bWUgKiAxMDApO1xyXG4gICAgW2JnbUJ0biwgc2Z4QnRuXS5tYXAoKGJ0bikgPT4ge1xyXG4gICAgICAgIGJ0bi5zZXRTY2FsZSgwLjYpO1xyXG4gICAgICAgIGJ0bi5zZXRJbnRlcmFjdGl2ZSgpO1xyXG4gICAgfSk7XHJcbiAgICBiZ21CdG4ub24oJ3BvaW50ZXJ1cCcsICgpID0+IHtcclxuICAgICAgICBjb25zdCBpc09uID0gYmdtQnRuLnRleHR1cmUua2V5ID09PSAnbXVzaWNPbic7XHJcbiAgICAgICAgYmdtR2FnZS5zZXRBYmxlKCFpc09uKTtcclxuICAgICAgICBiZ21CdG4uc2V0VGV4dHVyZShpc09uID8gJ211c2ljT2ZmJyA6ICdtdXNpY09uJyk7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnNldEJnbU11dGUoaXNPbik7XHJcbiAgICB9KTtcclxuICAgIHNmeEJ0bi5vbigncG9pbnRlcnVwJywgKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IGlzT24gPSBzZnhCdG4udGV4dHVyZS5rZXkgPT09ICdhdWRpb09uJztcclxuICAgICAgICBzZnhHYWdlLnNldEFibGUoIWlzT24pO1xyXG4gICAgICAgIHNmeEJ0bi5zZXRUZXh0dXJlKGlzT24gPyAnYXVkaW9PZmYnIDogJ2F1ZGlvT24nKTtcclxuICAgICAgICBHYW1lQXVkaW8uc2V0U2Z4TXV0ZShpc09uKTtcclxuICAgIH0pO1xyXG4gICAgYmdtQnRuLnNldFRleHR1cmUoR2FtZUF1ZGlvLmlzQmdtTXV0ZSA/ICdtdXNpY09mZicgOiAnbXVzaWNPbicpO1xyXG4gICAgc2Z4QnRuLnNldFRleHR1cmUoR2FtZUF1ZGlvLmlzU2Z4TXV0ZSA/ICdhdWRpb09mZicgOiAnYXVkaW9PbicpO1xyXG4gICAgYmdtR2FnZS5zZXRBYmxlKCFHYW1lQXVkaW8uaXNCZ21NdXRlKTtcclxuICAgIHNmeEdhZ2Uuc2V0QWJsZSghR2FtZUF1ZGlvLmlzU2Z4TXV0ZSk7XHJcbiAgICBjb25zdCB7IHR4dEdhcCB9ID0gU2V0dGluZy5sYXllckRhdGE7XHJcbiAgICAvLyBhZGQgYmFjayB0byB0aXRsZSBidG5cclxuICAgIGNvbnN0IGJhY2syVGl0bGVCZyA9IHNjZW5lLmFkZC5pbWFnZShWaWV3LmNlbnRlclgsIHNmeEdhZ2UueSArIFNldHRpbmdHYXBDb250ZXh0TWFyZ2luTGFyZ2VyLCAnc2V0dGluZ092ZXJCdG5VcCcpLnNldFNjYWxlKDEuMik7XHJcbiAgICBjb25zdCBiYWNrMlRpdGxlID0gc2NlbmUuYWRkLmltYWdlKGJhY2syVGl0bGVCZy54LCBiYWNrMlRpdGxlQmcueSAtIDQsICdvdmVyQmFjaycpO1xyXG4gICAgYmFjazJUaXRsZS5zZXRTY2FsZSgwLjYpLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICBiYWNrMlRpdGxlLmRvd25Qb3NZID0gYmFjazJUaXRsZS55ICsgNDtcclxuICAgIGJhY2syVGl0bGUudXBQb3NZID0gYmFjazJUaXRsZS55O1xyXG4gICAgYmFjazJUaXRsZS5vbigncG9pbnRlcmRvd24nLCAoKSA9PiB7XHJcbiAgICAgICAgYmFjazJUaXRsZUJnLnNldFRleHR1cmUoJ3NldHRpbmdPdmVyQnRuRG93bicpO1xyXG4gICAgICAgIGJhY2syVGl0bGUuc2V0UG9zaXRpb24oYmFjazJUaXRsZS54LCBiYWNrMlRpdGxlLmRvd25Qb3NZKTtcclxuICAgIH0pO1xyXG4gICAgYmFjazJUaXRsZS5vbigncG9pbnRlcnVwJywgKCkgPT4ge1xyXG4gICAgICAgIEdhbWVBdWRpby5wbGF5U2Z4KCdnZWFyQW5pbScpO1xyXG4gICAgICAgIGJhY2syVGl0bGVCZy5zZXRUZXh0dXJlKCdzZXR0aW5nT3ZlckJ0blVwJyk7XHJcbiAgICAgICAgYmFjazJUaXRsZS5zZXRQb3NpdGlvbihiYWNrMlRpdGxlLngsIGJhY2syVGl0bGUudXBQb3NZKTtcclxuICAgICAgICBpZiAoYmFjazJUaXRsZS5pc0NoYW5naW5nKVxyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgaWYgKCFzY2VuZS5zY2VuZS5pc0FjdGl2ZSgndGl0bGUnKSkge1xyXG4gICAgICAgICAgICBTdG9wR2FtZShzY2VuZSk7XHJcbiAgICAgICAgICAgIFN0YXJ0VGl0bGUoc2NlbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIEFuaW1IaWRlU2V0dGluZyhzY2VuZSk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IGJhY2syVGl0bGUuaXNDaGFuZ2luZyA9IGZhbHNlOyB9LCA1MDApO1xyXG4gICAgfSk7XHJcbiAgICBiYWNrMlRpdGxlLm9uKCdwb2ludGVyb3V0JywgKCkgPT4ge1xyXG4gICAgICAgIGJhY2syVGl0bGVCZy5zZXRUZXh0dXJlKCdzZXR0aW5nT3ZlckJ0blVwJyk7XHJcbiAgICAgICAgYmFjazJUaXRsZS5zZXRQb3NpdGlvbihiYWNrMlRpdGxlLngsIGJhY2syVGl0bGUudXBQb3NZKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgYmFjazJUaXRsZVR4dCA9IHNjZW5lLmFkZC50ZXh0KGJhY2syVGl0bGVCZy54LCBiYWNrMlRpdGxlQmcueSArIHR4dEdhcCwgJ0dvIHRvIFRpdGxlJyk7XHJcbiAgICBTZXRGb250MkNvbW1vbkNvbnRleHRTdHlsZShiYWNrMlRpdGxlVHh0KTtcclxuICAgIGJhY2syVGl0bGVUeHQuc2V0Rm9udFNpemUoMTYpO1xyXG4gICAgY29uc3QgYmFjazJUaXRsZUxpc3QgPSBbYmFjazJUaXRsZUJnLCBiYWNrMlRpdGxlLCBiYWNrMlRpdGxlVHh0XTtcclxuICAgIC8vIC8vIGFkZCBzY3JlZW4gc2l6ZSBjb250cm9sbGVyXHJcbiAgICAvLyBjb25zdCBzaXplQ29udHJvbGxlckJnID0gc2NlbmUuYWRkLmltYWdlKFZpZXcuY2VudGVyWCArIGNvbnRyb2xHYXAsIGJhY2syVGl0bGVCZy55LCAnc2V0dGluZ092ZXJCdG5VcCcpLnNldFNjYWxlKDEuMik7XHJcbiAgICAvLyBsZXQgc2l6ZUNvbnRyb2xsZXIgPSBzY2VuZS5hZGQuaW1hZ2Uoc2l6ZUNvbnRyb2xsZXJCZy54LCBzaXplQ29udHJvbGxlckJnLnkgLSA0LCAnc2NyZWVuTGFyZ2VyJykgYXMgVFRvZ2dsZUJ0bkltZztcclxuICAgIC8vIHNpemVDb250cm9sbGVyLnNldFNjYWxlKDAuNikuc2V0SW50ZXJhY3RpdmUoKTtcclxuICAgIC8vIHNpemVDb250cm9sbGVyLmRvd25Qb3NZID0gc2l6ZUNvbnRyb2xsZXIueSArIDQ7XHJcbiAgICAvLyBzaXplQ29udHJvbGxlci51cFBvc1kgPSBzaXplQ29udHJvbGxlci55O1xyXG4gICAgLy8gc2l6ZUNvbnRyb2xsZXIub24oJ3BvaW50ZXJkb3duJywgKCkgPT4ge1xyXG4gICAgLy8gICAgIHNpemVDb250cm9sbGVyQmcuc2V0VGV4dHVyZSgnc2V0dGluZ092ZXJCdG5Eb3duJyk7XHJcbiAgICAvLyAgICAgc2l6ZUNvbnRyb2xsZXIuc2V0UG9zaXRpb24oc2l6ZUNvbnRyb2xsZXIueCwgc2l6ZUNvbnRyb2xsZXIuZG93blBvc1kpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBjb25zdCBzaXplQ29udHJvbGxlckV4aXRFdnQgPSAoKSA9PiB7XHJcbiAgICAvLyAgICAgU2V0dGluZy5sYXllckRhdGEuaXNGdWxsU2NyZWVuID0gZmFsc2U7XHJcbiAgICAvLyAgICAgc2NlbmUuc2NhbGUuc3RvcEZ1bGxzY3JlZW4oKTtcclxuICAgIC8vICAgICBzaXplQ29udHJvbGxlci5zZXRUZXh0dXJlKCdzY3JlZW5MYXJnZXInKTtcclxuICAgIC8vICAgICBzaXplQ29udHJvbFR4dC5zZXRUZXh0KGNvbnRyb2xUeHRMaXN0WzBdKTtcclxuICAgIC8vIH07XHJcbiAgICAvLyBjb25zdCBzaXplQ29udHJvbGxlclRvZ2dsZUV2dCA9ICgpID0+IHtcclxuICAgIC8vICAgICBTZXR0aW5nLmxheWVyRGF0YS5pc0Z1bGxTY3JlZW4gPSAhU2V0dGluZy5sYXllckRhdGEuaXNGdWxsU2NyZWVuO1xyXG4gICAgLy8gICAgIGlmIChTZXR0aW5nLmxheWVyRGF0YS5pc0Z1bGxTY3JlZW4pIHtcclxuICAgIC8vICAgICAgICAgc2NlbmUuc2NhbGUuc3RhcnRGdWxsc2NyZWVuKCk7XHJcbiAgICAvLyAgICAgICAgIHNpemVDb250cm9sbGVyLnNldFRleHR1cmUoJ3NjcmVlblNtYWxsZXInKTtcclxuICAgIC8vICAgICAgICAgc2l6ZUNvbnRyb2xUeHQuc2V0VGV4dChjb250cm9sVHh0TGlzdFsxXSk7XHJcbiAgICAvLyAgICAgfVxyXG4gICAgLy8gICAgIGVsc2Ugc2l6ZUNvbnRyb2xsZXJFeGl0RXZ0KCk7XHJcbiAgICAvLyB9O1xyXG4gICAgLy8gc2l6ZUNvbnRyb2xsZXIub24oJ3BvaW50ZXJ1cCcsICgpID0+IHtcclxuICAgIC8vICAgICBHYW1lQXVkaW8ucGxheVNmeCgnZ2VhckFuaW0nKTtcclxuICAgIC8vICAgICBzaXplQ29udHJvbGxlckJnLnNldFRleHR1cmUoJ3NldHRpbmdPdmVyQnRuVXAnKTtcclxuICAgIC8vICAgICBzaXplQ29udHJvbGxlci5zZXRQb3NpdGlvbihzaXplQ29udHJvbGxlci54LCBzaXplQ29udHJvbGxlci51cFBvc1kpO1xyXG4gICAgLy8gICAgIGlmIChzaXplQ29udHJvbGxlci5pc0NoYW5naW5nKSByZXR1cm47XHJcbiAgICAvLyAgICAgc2l6ZUNvbnRyb2xsZXIuaXNDaGFuZ2luZyA9IHRydWU7XHJcbiAgICAvLyAgICAgc2l6ZUNvbnRyb2xsZXJUb2dnbGVFdnQoKTtcclxuICAgIC8vICAgICBzZXRUaW1lb3V0KCgpID0+IHsgc2l6ZUNvbnRyb2xsZXIuaXNDaGFuZ2luZyA9IGZhbHNlOyB9LCAzMDApO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBzaXplQ29udHJvbGxlci5vbigncG9pbnRlcm91dCcsICgpID0+IHtcclxuICAgIC8vICAgICBzaXplQ29udHJvbGxlckJnLnNldFRleHR1cmUoJ3NldHRpbmdPdmVyQnRuVXAnKTtcclxuICAgIC8vICAgICBzaXplQ29udHJvbGxlci5zZXRQb3NpdGlvbihzaXplQ29udHJvbGxlci54LCBzaXplQ29udHJvbGxlci51cFBvc1kpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBjb25zdCBzaXplQ29udHJvbFR4dCA9IHNjZW5lLmFkZC50ZXh0KHNpemVDb250cm9sbGVyQmcueCwgc2l6ZUNvbnRyb2xsZXJCZy55ICsgdHh0R2FwLCBjb250cm9sVHh0TGlzdFswXSk7XHJcbiAgICAvLyBTZXRGb250MkNvbW1vbkNvbnRleHRTdHlsZShzaXplQ29udHJvbFR4dCk7XHJcbiAgICAvLyBzaXplQ29udHJvbFR4dC5zZXRGb250U2l6ZSgxNik7XHJcbiAgICAvLyAvLyByZXNpemUgZXZlbnQgZm9yIHN0b3AgZnVsbCBzY3JlZW5cclxuICAgIC8vIHNjZW5lLnNjYWxlLm9mZigncmVzaXplJyk7XHJcbiAgICAvLyBzY2VuZS5zY2FsZS5vbigncmVzaXplJywgKCkgPT4ge1xyXG4gICAgLy8gICAgIGlmIChzaXplQ29udHJvbGxlci5pc0NoYW5naW5nKSByZXR1cm47XHJcbiAgICAvLyAgICAgaWYgKCFTZXR0aW5nLmxheWVyRGF0YS5pc0Z1bGxTY3JlZW4pIHJldHVybjtcclxuICAgIC8vICAgICBHYW1lQXVkaW8ucGxheVNmeCgnZ2VhckFuaW0nKTtcclxuICAgIC8vICAgICBzaXplQ29udHJvbGxlckV4aXRFdnQoKTtcclxuICAgIC8vIH0pO1xyXG4gICAgLy8gY29uc3Qgc2l6ZUNvbnRyb2xsZXJMaXN0ID0gWyBzaXplQ29udHJvbGxlckJnLCBzaXplQ29udHJvbGxlciwgc2l6ZUNvbnRyb2xUeHQgXTtcclxuICAgIC8vIGNvbnN0IGhvd0NvbnRleHQgPSBDcmVhdGVIb3coc2NlbmUpO1xyXG4gICAgLy8gY29uc3QgaG93QnRuID0gc2NlbmUuYWRkLmltYWdlKFZpZXcuY2VudGVyWCwgc2l6ZUNvbnRyb2xUeHQueSArIFNldHRpbmdHYXBDb250ZXh0TWFyZ2luLCAnYnRuU2V0dGluZ1VwJykgYXMgVFRvZ2dsZUJ0bkltZztcclxuICAgIC8vIGhvd0J0bi5zZXRJbnRlcmFjdGl2ZSgpLnNldFNjYWxlKDEpO1xyXG4gICAgLy8gaG93QnRuLmRvd25Qb3NZID0gaG93QnRuLnkgKyA0O1xyXG4gICAgLy8gaG93QnRuLnVwUG9zWSA9IGhvd0J0bi55O1xyXG4gICAgLy8gaG93QnRuLm9uKCdwb2ludGVyZG93bicsICgpID0+IHtcclxuICAgIC8vICAgICBob3dCdG4uc2V0VGV4dHVyZSgnYnRuU2V0dGluZ0Rvd24nKTtcclxuICAgIC8vICAgICBob3dUeHQuc2V0UG9zaXRpb24oaG93VHh0LngsIGhvd0J0bi5kb3duUG9zWSk7XHJcbiAgICAvLyB9KTtcclxuICAgIC8vIGhvd0J0bi5vbigncG9pbnRlcnVwJywgKCkgPT4ge1xyXG4gICAgLy8gICAgIEdhbWVBdWRpby5wbGF5U2Z4KCdnZWFyQW5pbScpO1xyXG4gICAgLy8gICAgIGhvd0J0bi5zZXRUZXh0dXJlKCdidG5TZXR0aW5nVXAnKTtcclxuICAgIC8vICAgICBob3dUeHQuc2V0UG9zaXRpb24oaG93VHh0LngsIGhvd0J0bi51cFBvc1kpO1xyXG4gICAgLy8gICAgIGhvd0NvbnRleHQuc2hvdygpO1xyXG4gICAgLy8gfSk7XHJcbiAgICAvLyBob3dCdG4ub24oJ3BvaW50ZXJvdXQnLCAoKSA9PiB7XHJcbiAgICAvLyAgICAgaG93QnRuLnNldFRleHR1cmUoJ2J0blNldHRpbmdVcCcpO1xyXG4gICAgLy8gICAgIGhvd1R4dC5zZXRQb3NpdGlvbihob3dUeHQueCwgaG93QnRuLnVwUG9zWSk7XHJcbiAgICAvLyB9KTtcclxuICAgIC8vIGNvbnN0IGhvd1R4dCA9IHNjZW5lLmFkZC50ZXh0KGhvd0J0bi54LCBob3dCdG4ueSwgJ2hvdycpO1xyXG4gICAgLy8gU2V0Rm9udDJDb21tb25Db250ZXh0U3R5bGUoaG93VHh0KTtcclxuICAgIC8vIGhvd1R4dC5zZXRGb250U2l6ZShUeHRUaXRsZVNpemUpO1xyXG4gICAgLy8gY29uc3QgaG93TGlzdCA9IFsgaG93QnRuLCBob3dUeHQsIGhvd0NvbnRleHQgXTtcclxuICAgIC8vIFNldHRpbmcubGF5ZXIuYWRkKFtcclxuICAgIC8vICAgICBiZywgcGFuZWwsIHRpdGxlLFxyXG4gICAgLy8gICAgIGJnbUJ0biwgc2Z4QnRuLFxyXG4gICAgLy8gICAgIGJnbUdhZ2UsIHNmeEdhZ2UsXHJcbiAgICAvLyAgICAgLi4uYmFjazJUaXRsZUxpc3QsXHJcbiAgICAvLyAgICAgLy8gLi4uc2l6ZUNvbnRyb2xsZXJMaXN0LFxyXG4gICAgLy8gXSk7XHJcbiAgICAvLyBTZXR0aW5nLmxheWVyLmFkZChcclxuICAgIC8vICAgICBiZywgcGFuZWwsIHRpdGxlLFxyXG4gICAgLy8gICAgIGJnbUJ0biwgc2Z4QnRuLFxyXG4gICAgLy8gICAgIGJnbUdhZ2UsIHNmeEdhZ2UsXHJcbiAgICAvLyAgICAgLy8gLi4uYmFjazJUaXRsZUxpc3QsXHJcbiAgICAvLyAgICAgLy8gLi4uc2l6ZUNvbnRyb2xsZXJMaXN0LFxyXG4gICAgLy8gKTtcclxuICAgIFNldHRpbmcubGF5ZXIucHVzaChiZyk7XHJcbiAgICBTZXR0aW5nLmxheWVyLnB1c2gocGFuZWwpO1xyXG4gICAgU2V0dGluZy5sYXllci5wdXNoKHRpdGxlKTtcclxuICAgIFNldHRpbmcubGF5ZXIucHVzaChiZ21CdG4pO1xyXG4gICAgU2V0dGluZy5sYXllci5wdXNoKHNmeEJ0bik7XHJcbiAgICBTZXR0aW5nLmxheWVyLnB1c2goYmdtR2FnZSk7XHJcbiAgICBTZXR0aW5nLmxheWVyLnB1c2goc2Z4R2FnZSk7XHJcbiAgICBiYWNrMlRpdGxlTGlzdC5tYXAoKGNoaWxkKSA9PiB7XHJcbiAgICAgICAgU2V0dGluZy5sYXllci5wdXNoKGNoaWxkKTtcclxuICAgIH0pO1xyXG4gICAgLy8gZXhpdCBidG4gJiBsYXN0IGNvbnRhaW5lciBzZXR1cFxyXG4gICAgU2V0dGluZy5leGl0QnRuID0gc2NlbmUuYWRkLmltYWdlKFZpZXcudyAtIFNldHRpbmdDb250ZXh0TWFyZ2luLCBTZXR0aW5nQ29udGV4dE1hcmdpbiwgJ2V4aXRCdG4nKS5zZXRTY2FsZSgwLjYpO1xyXG4gICAgU2V0dGluZy5leGl0QnRuLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICBTZXR0aW5nLmV4aXRCdG4ub24oJ3BvaW50ZXJ1cCcsICgpID0+IHtcclxuICAgICAgICBBbmltSGlkZVNldHRpbmcoc2NlbmUpO1xyXG4gICAgfSk7XHJcbiAgICBbU2V0dGluZy5idG4sIC4uLlNldHRpbmcubGF5ZXIsIFNldHRpbmcuZXhpdEJ0bl0ubWFwKGVsZSA9PiBTZXREZXB0aChlbGUsICdzZXR0aW5nJykpO1xyXG4gICAgSW5pdFNldHRpbmcoc2NlbmUpO1xyXG4gICAgcmV0dXJuIFNldHRpbmc7XHJcbn07XHJcbi8vIHR5cGUgVEdhZ2VDb250YWluZXIgPSBQaGFzZXIuR2FtZU9iamVjdHMuQ29udGFpbmVyICYge1xyXG4vLyAgICAgZ2FnZU51bTogbnVtYmVyO1xyXG4vLyAgICAgZ2FnZU51bU1pbjogbnVtYmVyO1xyXG4vLyAgICAgZ2FnZU51bU1heDogbnVtYmVyO1xyXG4vLyAgICAgZ2FnZVBvc1g6IG51bWJlcjtcclxuLy8gICAgIGdhZ2VQb3NYTWluOiBudW1iZXI7XHJcbi8vICAgICBnYWdlUG9zWE1heDogbnVtYmVyO1xyXG4vLyAgICAgZ2FnZVBvc1hMZW5ndGg6IG51bWJlcjtcclxuLy8gICAgIGlzQWJsZTogYm9vbGVhbjtcclxuLy8gICAgIHNldEdhZ2VIYW5kbGVGcmFtZTogKGlzRG93bjogYm9vbGVhbikgPT4gdm9pZDtcclxuLy8gICAgIHNldEdhZ2VCYXJTaXplOiAoZ2FnZVBvczogbnVtYmVyKSA9PiB2b2lkO1xyXG4vLyAgICAgc2V0R2FnZU51bTogKGdhZ2VOdW06IG51bWJlcikgPT4gdm9pZDtcclxuLy8gICAgIHNldEdhZ2U6ICgpID0+IHZvaWQ7XHJcbi8vICAgICBzZXRBYmxlOiAoaXNBYmxlOiBib29sZWFuKSA9PiB2b2lkO1xyXG4vLyB9O1xyXG4vLyBjb25zdCBHYWdlSGVpZ2h0ID0gMjA7XHJcbi8vIGNvbnN0IENyZWF0ZUdhZ2VCYXIgPSAoXHJcbi8vICAgICBzY2VuZTogUGhhc2VyLlNjZW5lLCB4OiBudW1iZXIsIHk6IG51bWJlcixcclxuLy8gICAgIGVuZE1vdmVDYWxsYmFjaz86IChtaW46IG51bWJlciwgbWF4OiBudW1iZXIsIGN1cnI6IG51bWJlcikgPT4gdm9pZCxcclxuLy8gICAgIGdhZ2VOdW1NaW46IG51bWJlciA9IDAsIGdhZ2VOdW1NYXg6IG51bWJlciA9IDEwMCxcclxuLy8gKSA9PiB7XHJcbi8vICAgICBjb25zdCBjb246IFRHYWdlQ29udGFpbmVyID0gc2NlbmUuYWRkLmNvbnRhaW5lcih4LCB5KSBhcyBUR2FnZUNvbnRhaW5lcjtcclxuLy8gICAgIGNvbi5nYWdlTnVtTWluID0gZ2FnZU51bU1pbjtcclxuLy8gICAgIGNvbi5nYWdlTnVtTWF4ID0gZ2FnZU51bU1heDtcclxuLy8gICAgIGNvbi5nYWdlTnVtID0gKGNvbi5nYWdlTnVtTWluICsgY29uLmdhZ2VOdW1NYXgpIC8gMjtcclxuLy8gICAgIGNvbnN0IGdhZ2VCZyA9IHNjZW5lLmFkZC5pbWFnZSgwLCAwLCAnY29sb3JCYWNrZ3JvdW5kJyk7XHJcbi8vICAgICBjb25zdCBnYWdlQmFyID0gc2NlbmUuYWRkLmltYWdlKDAsIDAsICdidG5CbHVlJyk7XHJcbi8vICAgICBjb25zdCBnYWdlQmFySGFuZGxlID0gc2NlbmUuYWRkLmltYWdlKDAsIDAsICdjb2xvckhhbmRsZScpO1xyXG4vLyAgICAgY29uc3QgZ2FnZVR4dCA9IHNjZW5lLmFkZC50ZXh0KDAsIDAsIGNvbi5nYWdlTnVtLnRvU3RyaW5nKCkpO1xyXG4vLyAgICAgZ2FnZUJnLnNldERpc3BsYXlTaXplKFZpZXcuY2VudGVyWCwgR2FnZUhlaWdodCk7XHJcbi8vICAgICBnYWdlQmFyLnNldERpc3BsYXlTaXplKFZpZXcuY2VudGVyWC8yLCBHYWdlSGVpZ2h0KTtcclxuLy8gICAgIGdhZ2VCYXIuc2V0T3JpZ2luKDAsIDAuNSk7XHJcbi8vICAgICBnYWdlQmFyLnNldFBvc2l0aW9uKC1WaWV3LmNlbnRlclgvMiwgMCk7XHJcbi8vICAgICBnYWdlVHh0LnNldE9yaWdpbigwLCAwLjUpO1xyXG4vLyAgICAgZ2FnZVR4dC5zZXRQb3NpdGlvbihWaWV3LmNlbnRlclgvMiArIFR4dE1hcmdpbiAtIDUsIDApO1xyXG4vLyAgICAgY29uLmFkZChbIGdhZ2VCZywgZ2FnZUJhciwgZ2FnZUJhckhhbmRsZSwgZ2FnZVR4dCBdKTtcclxuLy8gICAgIGNvbi5nYWdlUG9zWCA9IDA7XHJcbi8vICAgICBjb24uZ2FnZVBvc1hNaW4gPSAtZ2FnZUJnLndpZHRoLzIgLSBnYWdlQmFySGFuZGxlLndpZHRoLzI7XHJcbi8vICAgICBjb24uZ2FnZVBvc1hNYXggPSBnYWdlQmcud2lkdGgvMiArIGdhZ2VCYXJIYW5kbGUud2lkdGgvMjtcclxuLy8gICAgIGNvbi5nYWdlUG9zWExlbmd0aCA9IGdhZ2VCZy53aWR0aCArIGdhZ2VCYXJIYW5kbGUud2lkdGg7XHJcbi8vICAgICBjb24uc2V0R2FnZUhhbmRsZUZyYW1lID0gKGlzRG93bjogYm9vbGVhbikgPT4ge1xyXG4vLyAgICAgICAgIGdhZ2VCYXJIYW5kbGUuc2V0VGV4dHVyZShpc0Rvd24gPyAnY29sb3JIYW5kbGVEb3duJyA6ICdjb2xvckhhbmRsZScpO1xyXG4vLyAgICAgfTtcclxuLy8gICAgIGNvbi5zZXRHYWdlQmFyU2l6ZSA9IChnYWdlUG9zOiBudW1iZXIpID0+IHtcclxuLy8gICAgICAgICBsZXQgZ2FnZVBvc1ggPSBnYWdlUG9zO1xyXG4vLyAgICAgICAgIGlmIChnYWdlUG9zWCA8PSBjb24uZ2FnZVBvc1hNaW4pIGdhZ2VQb3NYID0gY29uLmdhZ2VQb3NYTWluO1xyXG4vLyAgICAgICAgIGVsc2UgaWYgKGdhZ2VQb3NYID49IGNvbi5nYWdlUG9zWE1heCkgZ2FnZVBvc1ggPSBjb24uZ2FnZVBvc1hNYXg7XHJcbi8vICAgICAgICAgY29uLmdhZ2VQb3NYID0gZ2FnZVBvc1g7XHJcbi8vICAgICAgICAgY29uLmdhZ2VOdW0gPSBNYXRoLmZsb29yKChjb24uZ2FnZU51bU1heCAtIGNvbi5nYWdlTnVtTWluKSAqIE1hdGguYWJzKGdhZ2VQb3NYIC0gY29uLmdhZ2VQb3NYTWluKSAvIGNvbi5nYWdlUG9zWExlbmd0aCk7XHJcbi8vICAgICAgICAgY29uLnNldEdhZ2UoKTtcclxuLy8gICAgIH07XHJcbi8vICAgICBjb24uc2V0R2FnZU51bSA9IChnYWdlTnVtOiBudW1iZXIpID0+IHtcclxuLy8gICAgICAgICBsZXQgZ2FnZU51bWJlciA9IGdhZ2VOdW07XHJcbi8vICAgICAgICAgaWYgKGdhZ2VOdW1iZXIgPCBjb24uZ2FnZU51bU1pbikgZ2FnZU51bWJlciA9IGNvbi5nYWdlTnVtTWluO1xyXG4vLyAgICAgICAgIGVsc2UgaWYgKGdhZ2VOdW1iZXIgPiBjb24uZ2FnZU51bU1heCkgZ2FnZU51bWJlciA9IGNvbi5nYWdlTnVtTWF4O1xyXG4vLyAgICAgICAgIGNvbi5nYWdlTnVtID0gZ2FnZU51bWJlcjtcclxuLy8gICAgICAgICBjb24uZ2FnZVBvc1ggPSAoY29uLmdhZ2VOdW0gKiBjb24uZ2FnZVBvc1hMZW5ndGggLyBjb24uZ2FnZU51bU1heCkgLSBjb24uZ2FnZVBvc1hNYXg7XHJcbi8vICAgICAgICAgY29uLnNldEdhZ2UoKTtcclxuLy8gICAgIH07XHJcbi8vICAgICBjb24uc2V0R2FnZSA9ICgpID0+IHtcclxuLy8gICAgICAgICBnYWdlQmFyLnNldERpc3BsYXlTaXplKGNvbi5nYWdlUG9zWCArIGdhZ2VCYXIud2lkdGgvMiArIGdhZ2VCYXJIYW5kbGUud2lkdGgvMiwgR2FnZUhlaWdodCk7XHJcbi8vICAgICAgICAgZ2FnZUJhckhhbmRsZS5zZXRQb3NpdGlvbihjb24uZ2FnZVBvc1gsIDApO1xyXG4vLyAgICAgICAgIGdhZ2VUeHQuc2V0VGV4dChjb24uZ2FnZU51bS50b0ZpeGVkKDApKTtcclxuLy8gICAgIH07XHJcbi8vICAgICBjb24uc2V0QWJsZSA9IChpc0FibGU6IGJvb2xlYW4pID0+IHtcclxuLy8gICAgICAgICBjb24uaXNBYmxlID0gaXNBYmxlO1xyXG4vLyAgICAgICAgIGNvbi5pc0FibGUgPyBjb24uc2V0QWxwaGEoMSkgOiBjb24uc2V0QWxwaGEoMC41KTtcclxuLy8gICAgIH07XHJcbi8vICAgICBjb24uc2V0QWJsZSh0cnVlKTtcclxuLy8gICAgIGdhZ2VCYXJIYW5kbGUuc2V0SW50ZXJhY3RpdmUoeyBkcmFnZ2FibGU6IHRydWUgfSk7XHJcbi8vICAgICBnYWdlQmFySGFuZGxlLm9uKCdkcmFnc3RhcnQnLCAoKSA9PiB7XHJcbi8vICAgICAgICAgY29uLmlzQWJsZSAmJiBjb24uc2V0R2FnZUhhbmRsZUZyYW1lKHRydWUpO1xyXG4vLyAgICAgfSk7XHJcbi8vICAgICBnYWdlQmFySGFuZGxlLm9uKCdkcmFnJywgKHB0ciwgZHJhZ1gpID0+IHtcclxuLy8gICAgICAgICBjb24uaXNBYmxlICYmIGNvbi5zZXRHYWdlQmFyU2l6ZShkcmFnWCk7XHJcbi8vICAgICB9KTtcclxuLy8gICAgIGdhZ2VCYXJIYW5kbGUub24oJ2RyYWdlbmQnLCAoKSA9PiB7XHJcbi8vICAgICAgICAgaWYgKGNvbi5pc0FibGUpIHtcclxuLy8gICAgICAgICAgICAgY29uLnNldEdhZ2VIYW5kbGVGcmFtZShmYWxzZSk7XHJcbi8vICAgICAgICAgICAgIGVuZE1vdmVDYWxsYmFjayAmJiBlbmRNb3ZlQ2FsbGJhY2soY29uLmdhZ2VOdW1NaW4sIGNvbi5nYWdlTnVtTWF4LCBjb24uZ2FnZU51bSk7XHJcbi8vICAgICAgICAgfVxyXG4vLyAgICAgfSk7XHJcbi8vICAgICByZXR1cm4gY29uO1xyXG4vLyB9O1xyXG5jb25zdCBBbmltU2hvd1NldHRpbmcgPSAoc2NlbmUpID0+IHtcclxuICAgIFNldHRpbmcuaXNUd2luZyA9IHRydWU7XHJcbiAgICBHYW1lQXVkaW8ucGxheVNmeCgnZ2VhckFuaW0nKTtcclxuICAgIHNjZW5lLnR3ZWVucy5hZGRDb3VudGVyKHtcclxuICAgICAgICBmcm9tOiAwLCB0bzogNjAsIGR1cmF0aW9uOiAxMjAsXHJcbiAgICAgICAgb25VcGRhdGU6ICh0dywgZGF0YSkgPT4geyBTZXR0aW5nLmJ0bi5zZXRBbmdsZShkYXRhLnZhbHVlKTsgfSxcclxuICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgIFNldHRpbmcuaXNUd2luZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICBTaG93U2V0dGluZyhzY2VuZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IEFuaW1IaWRlU2V0dGluZyA9IChzY2VuZSkgPT4ge1xyXG4gICAgU2V0dGluZy5pc1R3aW5nID0gdHJ1ZTtcclxuICAgIEdhbWVBdWRpby5wbGF5U2Z4KCdnZWFyQW5pbScpO1xyXG4gICAgSGlkZVNldHRpbmcoc2NlbmUpO1xyXG4gICAgc2NlbmUudHdlZW5zLmFkZENvdW50ZXIoe1xyXG4gICAgICAgIGZyb206IDE4MCwgdG86IDAsIGR1cmF0aW9uOiAxMjAsXHJcbiAgICAgICAgb25VcGRhdGU6ICh0dywgZGF0YSkgPT4geyBTZXR0aW5nLmJ0bi5zZXRBbmdsZShkYXRhLnZhbHVlKTsgfSxcclxuICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7IFNldHRpbmcuaXNUd2luZyA9IGZhbHNlOyB9XHJcbiAgICB9KTtcclxufTtcclxuY29uc3QgU2hvd1NldHRpbmcgPSAoc2NlbmUpID0+IHtcclxuICAgIEdhbWVUaW1lLnNldFRpbWVTY2FsZShzY2VuZSwgR2FtZVRpbWUuc2hvd1NldHRpbmdUaW1lU2NhbGUpO1xyXG4gICAgU2V0dGluZy5pc09wZW4gPSB0cnVlO1xyXG4gICAgU2V0dGluZy5sYXllci5tYXAobGF5ZXJDaGlsZCA9PiBsYXllckNoaWxkLnNldFZpc2libGUgJiYgbGF5ZXJDaGlsZC5zZXRWaXNpYmxlKHRydWUpKTtcclxuICAgIFNldHRpbmcuZXhpdEJ0bi5zZXRWaXNpYmxlKHRydWUpO1xyXG59O1xyXG5jb25zdCBIaWRlU2V0dGluZyA9IChzY2VuZSkgPT4ge1xyXG4gICAgR2FtZVRpbWUuc2V0VGltZVNjYWxlKHNjZW5lLCBHYW1lVGltZS5oaWRlU2V0dGluZ1RpbWVTY2FsZSk7XHJcbiAgICBTZXR0aW5nLmlzT3BlbiA9IGZhbHNlO1xyXG4gICAgU2V0dGluZy5sYXllci5tYXAobGF5ZXJDaGlsZCA9PiBsYXllckNoaWxkLnNldFZpc2libGUgJiYgbGF5ZXJDaGlsZC5zZXRWaXNpYmxlKGZhbHNlKSk7XHJcbiAgICBTZXR0aW5nLmV4aXRCdG4uc2V0VmlzaWJsZShmYWxzZSk7XHJcbn07XHJcbmNvbnN0IFNob3dTZXR0aW5nQnRuID0gKHNjZW5lKSA9PiB7XHJcbiAgICBIaWRlU2V0dGluZyhzY2VuZSk7XHJcbiAgICBTZXR0aW5nLmJ0bi5zZXRWaXNpYmxlKHRydWUpO1xyXG59O1xyXG5jb25zdCBIaWRlU2V0dGluZ0J0biA9IChzY2VuZSkgPT4ge1xyXG4gICAgSGlkZVNldHRpbmcoc2NlbmUpO1xyXG4gICAgU2V0dGluZy5idG4uc2V0VmlzaWJsZShmYWxzZSk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFNldHRpbmc7XHJcbmV4cG9ydCB7IEluaXRTZXR0aW5nLCBDcmVhdGVTZXR0aW5nLCBBbmltU2hvd1NldHRpbmcsIEFuaW1IaWRlU2V0dGluZywgU2hvd1NldHRpbmcsIEhpZGVTZXR0aW5nLCBTaG93U2V0dGluZ0J0biwgSGlkZVNldHRpbmdCdG4sIH07XHJcbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tICdAc3JjL3VzZXJTZXR0aW5nJztcclxuaW1wb3J0IEdhbWVBdWRpbyBmcm9tICdAc3JjL3NjZW5lcy9hdWRpbyc7XHJcbmltcG9ydCBCbG9ja1N5c3RlbSBmcm9tICcuLi9ibG9jay9zeXN0ZW0nO1xyXG5pbXBvcnQgeyBTZXREZXB0aCB9IGZyb20gJy4uL2RlcHRoJztcclxuaW1wb3J0IHsgVHh0QWxwaGEsIFR4dEJhY2tncm91bmRDb2xvciwgVHh0RmFtaWx5LCBUeHRNYXJnaW4sIFR4dFBhZGRpbmcsIFR4dFNpemUgfSBmcm9tICcuLi9mb250JztcclxuaW1wb3J0IEdhbWVPdmVyIGZyb20gJy4vZ2FtZW92ZXInO1xyXG5pbXBvcnQgeyBIaWRlU2V0dGluZ0J0biB9IGZyb20gJy4vc2V0dGluZyc7XHJcbmNvbnN0IEdhbWVUaW1lID0ge1xyXG4gICAgdHh0OiBudWxsLFxyXG4gICAgbGFzdDEwVHh0OiBudWxsLFxyXG4gICAgbGFzdDEwUHJldlRpbWU6IDExLFxyXG4gICAgaXNMYXN0MTBIYXNPbmNlQ250OiB0cnVlLFxyXG4gICAgaXNHYW1lVGltZUVuZE9uY2VDbnQ6IHRydWUsXHJcbiAgICBpc0ZpcnN0TGFzdDEwSGFzT25jZUNudDogdHJ1ZSxcclxuICAgIHN0YW5kYnlUaW1lOiAzICogMTAwMCxcclxuICAgIGluaXQ6IDYwICogMTAwMCxcclxuICAgIGN1cnI6IDYwICogMTAwMCxcclxuICAgIGxhc3QxMDogMTAgKiAxMDAwLFxyXG4gICAgaW5jcmVhc2VkVGltZTogMCxcclxuICAgIC8vIGFuaW0gb3B0aW9uXHJcbiAgICBhbmltSW5jcmVhc2VUaW1lRHVyYXRpb246IDQwMCxcclxuICAgIGFuaW1UdzogbnVsbCxcclxuICAgIGFuaW1Ud1NjYWxlTWluOiAxLFxyXG4gICAgYW5pbVR3U2NhbGVNYXg6IDEuNCxcclxuICAgIGlzVHdpbmc6IGZhbHNlLFxyXG4gICAgLy8gdGltZSBzY2FsZSBvcHRpb25cclxuICAgIHRpbWVTY2FsZTogMSxcclxuICAgIHNob3dTZXR0aW5nVGltZVNjYWxlOiAwLjEsXHJcbiAgICBoaWRlU2V0dGluZ1RpbWVTY2FsZTogMSxcclxuICAgIHNuZExhc3QxMFZvaWNlOiBmdW5jdGlvbiAoc2NlbmUsIHRpbWUpIHtcclxuICAgICAgICAvLyBzY2VuZS5zb3VuZC5wbGF5KCd2b2ljZScgKyB0aW1lKTtcclxuICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgndm9pY2UnICsgdGltZSk7XHJcbiAgICAgICAgdGhpcy5sYXN0MTBUeHQuc2V0VGV4dCh0aW1lKTtcclxuICAgIH0sXHJcbiAgICBpbmNyZWFzZVRpbWU6IGZ1bmN0aW9uICh0aW1lKSB7XHJcbiAgICAgICAgLy8gbGFzdCAxMCBzZWNvbmRzIGxlZnQgc28gaW5jcmVhc2luZyB0aW1lIGlzIHVzZWxlc3NcclxuICAgICAgICBpZiAoIXRoaXMuaXNGaXJzdExhc3QxMEhhc09uY2VDbnQpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB0aGlzLmN1cnIgKz0gdGltZTtcclxuICAgICAgICB0aGlzLmluY3JlYXNlZFRpbWUgKz0gdGltZTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBzZXQyRm9ybWF0OiBmdW5jdGlvbiAobWlsbGlUaW1lKSB7XHJcbiAgICAgICAgLy8gc2VwYXJhdGUgbWludXRlLCBzZWNvbmQgZWFjaFxyXG4gICAgICAgIGNvbnN0IHRpbWVTZWMgPSBtaWxsaVRpbWUgLyAxMDAwO1xyXG4gICAgICAgIGNvbnN0IHNlY29uZFNwbGl0ID0gdGltZVNlYy50b0ZpeGVkKDIpLnNwbGl0KCcuJyk7XHJcbiAgICAgICAgbGV0IG1pbnV0ZXMgPSBNYXRoLmZsb29yKHRpbWVTZWMgLyA2MCk7XHJcbiAgICAgICAgbGV0IHNlY29uZHMgPSBNYXRoLmZsb29yKE51bWJlcihzZWNvbmRTcGxpdFswXSkpO1xyXG4gICAgICAgIGxldCB1bmRlclBvaW50RGlnaXROdW0gPSBOdW1iZXIoc2Vjb25kU3BsaXRbMV0pO1xyXG4gICAgICAgIGlmIChtaW51dGVzIDwgMTApXHJcbiAgICAgICAgICAgIG1pbnV0ZXMgPSAnMCcgKyBtaW51dGVzO1xyXG4gICAgICAgIGlmIChzZWNvbmRzIDwgMTApXHJcbiAgICAgICAgICAgIHNlY29uZHMgPSAnMCcgKyBzZWNvbmRzO1xyXG4gICAgICAgIGlmICh1bmRlclBvaW50RGlnaXROdW0gPCAxMClcclxuICAgICAgICAgICAgdW5kZXJQb2ludERpZ2l0TnVtID0gJzAnICsgdW5kZXJQb2ludERpZ2l0TnVtO1xyXG4gICAgICAgIGNvbnN0IHRpbWUgPSBtaW51dGVzICsgJzonICsgc2Vjb25kcyArICcuJyArIHVuZGVyUG9pbnREaWdpdE51bTtcclxuICAgICAgICB0aGlzLnR4dC5zZXRUZXh0KHRpbWUpO1xyXG4gICAgfSxcclxuICAgIHNldFRpbWVTY2FsZTogZnVuY3Rpb24gKHNjZW5lLCB0aW1lU2NhbGUpIHtcclxuICAgICAgICBzY2VuZS5tYXR0ZXIud29ybGQuZW5naW5lLnRpbWluZy50aW1lU2NhbGUgPSB0aW1lU2NhbGU7XHJcbiAgICAgICAgdGhpcy50aW1lU2NhbGUgPSB0aW1lU2NhbGU7XHJcbiAgICB9LFxyXG4gICAgZ2V0Q3VycjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5jdXJyOyB9LFxyXG4gICAgdXBkYXRlTGFzdDEwQ250QW5pbTogZnVuY3Rpb24gKHNjZW5lKSB7XHJcbiAgICAgICAgLy8gc3RvcCBiZ20gJiBoaWRlIHNldHRpbmcgYnRuICYgdGltZSBpbmNyZWFzaW5nIGlzIG5vdCBwb3NzaWJsZVxyXG4gICAgICAgIGlmICh0aGlzLmlzRmlyc3RMYXN0MTBIYXNPbmNlQ250KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNGaXJzdExhc3QxMEhhc09uY2VDbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgR2FtZUF1ZGlvLnBhdXNlQmdtKCdnYW1lQmdtJyk7XHJcbiAgICAgICAgICAgIEhpZGVTZXR0aW5nQnRuKHNjZW5lKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdGhpcy5sYXN0MTBUeHQuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgICAgICBjb25zdCB0aW1lID0gTWF0aC5jZWlsKHRoaXMuY3VyciAvIDEwMDApO1xyXG4gICAgICAgIGlmICh0aGlzLmxhc3QxMFByZXZUaW1lICE9PSB0aW1lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNMYXN0MTBIYXNPbmNlQ250ID0gdHJ1ZTtcclxuICAgICAgICAgICAgdGhpcy5sYXN0MTBQcmV2VGltZSA9IHRpbWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgdGhpcy5pc0xhc3QxMEhhc09uY2VDbnQgPSBmYWxzZTtcclxuICAgICAgICBpZiAodGhpcy5pc0xhc3QxMEhhc09uY2VDbnQpXHJcbiAgICAgICAgICAgIHRoaXMuc25kTGFzdDEwVm9pY2Uoc2NlbmUsIHRpbWUpO1xyXG4gICAgfSxcclxuICAgIHVwZGF0ZTogZnVuY3Rpb24gKHNjZW5lLCBkZWx0YSkge1xyXG4gICAgICAgIGlmIChCbG9ja1N5c3RlbS5nZXRJc0dhbWVPdmVyKCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5jdXJyID4gMCkge1xyXG4gICAgICAgICAgICB0aGlzLmN1cnIgLT0gZGVsdGEgKiB0aGlzLnRpbWVTY2FsZTtcclxuICAgICAgICAgICAgdGhpcy5zZXQyRm9ybWF0KHRoaXMuY3Vycik7XHJcbiAgICAgICAgICAgIGNvbnN0IGlzVW5kZXIxMFNlYyA9IHRoaXMuY3VyciA+IDAgJiYgdGhpcy5jdXJyIDw9IDEwICogMTAwMDtcclxuICAgICAgICAgICAgaXNVbmRlcjEwU2VjICYmIHRoaXMudXBkYXRlTGFzdDEwQ250QW5pbShzY2VuZSwgZGVsdGEpO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh0aGlzLmlzR2FtZVRpbWVFbmRPbmNlQ250KSB7XHJcbiAgICAgICAgICAgIHRoaXMuaXNHYW1lVGltZUVuZE9uY2VDbnQgPSBmYWxzZTtcclxuICAgICAgICAgICAgQmxvY2tTeXN0ZW0uc2V0SXNHYW1lT3Zlcih0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5jdXJyID0gMDtcclxuICAgICAgICAgICAgdGhpcy5zZXQyRm9ybWF0KDApO1xyXG4gICAgICAgICAgICB0aGlzLmxhc3QxMFR4dC5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICAgICAgR2FtZU92ZXIuYW5pbVRpbWVPdmVyKHNjZW5lKTtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgIH0sXHJcbiAgICBpbml0VGltZUluY3JlYXNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5pbmNyZWFzZWRUaW1lID0gMDtcclxuICAgICAgICByZXR1cm4gdGhpcy5pbmNyZWFzZWRUaW1lO1xyXG4gICAgfSxcclxuICAgIGdldFRpbWVJbmNyZWFzZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pbmNyZWFzZWRUaW1lOyB9LFxyXG4gICAgYWRkVGltZUluY3JlYXNlOiBmdW5jdGlvbiAodGltZSkge1xyXG4gICAgICAgIHRoaXMuaW5jcmVhc2VkVGltZSArPSB0aW1lO1xyXG4gICAgICAgIHJldHVybiB0aGlzLmluY3JlYXNlZFRpbWU7XHJcbiAgICB9LFxyXG59O1xyXG5jb25zdCBJbml0R2FtZVRpbWUgPSAoKSA9PiB7XHJcbiAgICBHYW1lVGltZS5sYXN0MTBUeHQuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICBHYW1lVGltZS5sYXN0MTBQcmV2VGltZSA9IDExO1xyXG4gICAgR2FtZVRpbWUuaXNMYXN0MTBIYXNPbmNlQ250ID0gdHJ1ZTtcclxuICAgIEdhbWVUaW1lLmlzR2FtZVRpbWVFbmRPbmNlQ250ID0gdHJ1ZTtcclxuICAgIEdhbWVUaW1lLmN1cnIgPSBHYW1lVGltZS5pbml0O1xyXG4gICAgR2FtZVRpbWUuaW5jcmVhc2VkVGltZSA9IDA7XHJcbiAgICBHYW1lVGltZS50aW1lU2NhbGUgPSAxO1xyXG4gICAgR2FtZVRpbWUuaW5pdFRpbWVJbmNyZWFzZSgpO1xyXG59O1xyXG5jb25zdCBDcmVhdGVHYW1lVGltZVR4dCA9IChzY2VuZSkgPT4ge1xyXG4gICAgY29uc3QgaW5pdFggPSBUeHRNYXJnaW4gLSAxMDtcclxuICAgIGNvbnN0IGluaXRZID0gMTIwO1xyXG4gICAgR2FtZVRpbWUudHh0ID0gc2NlbmUuYWRkLnRleHQoaW5pdFgsIGluaXRZLCAnJyk7XHJcbiAgICBHYW1lVGltZS50eHQuc2V0QWxwaGEoVHh0QWxwaGEpO1xyXG4gICAgR2FtZVRpbWUudHh0LnNldE9yaWdpbigwLCAwKTtcclxuICAgIEdhbWVUaW1lLnR4dC5zZXRGb250U2l6ZShUeHRTaXplKTtcclxuICAgIEdhbWVUaW1lLnR4dC5zZXRCYWNrZ3JvdW5kQ29sb3IoVHh0QmFja2dyb3VuZENvbG9yKTtcclxuICAgIEdhbWVUaW1lLmxhc3QxMFR4dCA9IHNjZW5lLmFkZC50ZXh0KFZpZXcuY2VudGVyWCwgVmlldy5jZW50ZXJZLCAnJyk7XHJcbiAgICBHYW1lVGltZS5sYXN0MTBUeHQuc2V0QWxwaGEoMC41KTtcclxuICAgIEdhbWVUaW1lLmxhc3QxMFR4dC5zZXRPcmlnaW4oMC41LCAwLjUpO1xyXG4gICAgR2FtZVRpbWUubGFzdDEwVHh0LnNldEZvbnRTaXplKFZpZXcudyAvIDIpO1xyXG4gICAgR2FtZVRpbWUubGFzdDEwVHh0LnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgW0dhbWVUaW1lLnR4dCwgR2FtZVRpbWUubGFzdDEwVHh0XS5tYXAoKHR4dCkgPT4ge1xyXG4gICAgICAgIHR4dC5zZXRQYWRkaW5nKHsgbGVmdDogVHh0UGFkZGluZywgcmlnaHQ6IFR4dFBhZGRpbmcsIHRvcDogVHh0UGFkZGluZyAvIDIsIGJvdHRvbTogVHh0UGFkZGluZyAvIDIgfSk7XHJcbiAgICAgICAgdHh0LnNldEZvbnRGYW1pbHkoVHh0RmFtaWx5KTtcclxuICAgICAgICBTZXREZXB0aCh0eHQsICd0eHQnKTtcclxuICAgIH0pO1xyXG4gICAgSW5pdEdhbWVUaW1lKCk7XHJcbn07XHJcbmNvbnN0IFNldG1pbGxpZVNlYzJTZWNUaW1lRm9ybWF0ID0gKG1pbGxpZVNlYykgPT4ge1xyXG4gICAgY29uc3Qgc2VjID0gKG1pbGxpZVNlYyAvIDEwMDApLnRvRml4ZWQoMikgKyAnIHNlYyc7XHJcbiAgICByZXR1cm4gc2VjO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBHYW1lVGltZTtcclxuZXhwb3J0IHsgSW5pdEdhbWVUaW1lLCBDcmVhdGVHYW1lVGltZVR4dCwgU2V0bWlsbGllU2VjMlNlY1RpbWVGb3JtYXQgfTtcclxuIiwiLy8gaW1wb3J0IFBoYXNlciBmcm9tICdwaGFzZXInO1xyXG5pbXBvcnQgeyBUeHRGYW1pbHksIFR4dE1hcmdpbiwgVHh0UGFkZGluZywgVHh0U2l6ZSB9IGZyb20gJy4uL2ZvbnQnO1xyXG5pbXBvcnQgeyBHZXRMb2NhbFN0b3JhZ2VJdGVtLCBTZXRMb2NhbFN0b3JhZ2VJdGVtIH0gZnJvbSAnQHNyYy91dGlscy9zdG9yYWdlJztcclxuaW1wb3J0IEdhbWVEYXRhIGZyb20gJy4uLy4uL3N0b3JhZ2UvaW5kZXgnO1xyXG5pbXBvcnQgeyBTZXROdW0yQ3VycmVuY3lGb3JtYXQgfSBmcm9tICdAc3JjL3V0aWxzL21hdGgnO1xyXG5pbXBvcnQgeyBTZXREZXB0aCB9IGZyb20gJy4uL2RlcHRoJztcclxuaW1wb3J0IEJsb2NrU3lzdGVtIGZyb20gJy4vLi4vYmxvY2svc3lzdGVtJztcclxuaW1wb3J0IEdhbWVUaW1lIGZyb20gJy4vdGltZSc7XHJcbmNvbnN0IFNjb3JlID0ge1xyXG4gICAgdHh0OiBudWxsLFxyXG4gICAgdHh0QmFja2dyb3VuZDogbnVsbCxcclxuICAgIGJUeHQ6IG51bGwsXHJcbiAgICBiVHh0QmFja2dyb3VuZDogbnVsbCxcclxuICAgIHR4dE51bTogMCxcclxuICAgIGJUeHROdW06IDAsXHJcbiAgICBzZXRGb3JtYXQ6IGZ1bmN0aW9uIChzY29yZSkge1xyXG4gICAgICAgIHRoaXMudHh0TnVtID0gc2NvcmU7XHJcbiAgICAgICAgY29uc3QgZmluYWxTY29yZSA9ICcnICsgU2V0TnVtMkN1cnJlbmN5Rm9ybWF0KHNjb3JlKTtcclxuICAgICAgICB0aGlzLnR4dC5zZXRUZXh0KGZpbmFsU2NvcmUpO1xyXG4gICAgICAgIGlmICh0aGlzLnR4dE51bSA+IHRoaXMuYlR4dE51bSlcclxuICAgICAgICAgICAgdGhpcy5zZXRCRm9ybWF0KHNjb3JlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBzZXRCRm9ybWF0OiBmdW5jdGlvbiAoc2NvcmUpIHtcclxuICAgICAgICB0aGlzLmJUeHROdW0gPSBzY29yZTtcclxuICAgICAgICBjb25zdCBmaW5hbFNjb3JlID0gJycgKyBTZXROdW0yQ3VycmVuY3lGb3JtYXQoc2NvcmUpO1xyXG4gICAgICAgIHRoaXMuYlR4dC5zZXRUZXh0KGZpbmFsU2NvcmUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIGFkZDogZnVuY3Rpb24gKHNjb3JlKSB7XHJcbiAgICAgICAgaWYgKEJsb2NrU3lzdGVtLmdldElzR2FtZU92ZXIoKSlcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGxldCBmaW5hbFNjb3JlID0gTnVtYmVyKHRoaXMudHh0LnRleHQpICsgc2NvcmU7XHJcbiAgICAgICAgdGhpcy5zZXRGb3JtYXQoZmluYWxTY29yZSk7XHJcbiAgICAgICAgcmV0dXJuIGZpbmFsU2NvcmU7XHJcbiAgICB9LFxyXG4gICAgZ2V0U2NvcmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMudHh0TnVtOyB9LFxyXG4gICAgZ2V0QlNjb3JlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLmJUeHROdW07IH0sXHJcbiAgICBjb21wYXJlTm9ybWFsQW5kQmVzdDogZnVuY3Rpb24gKHNjb3JlKSB7XHJcbiAgICAgICAgY29uc3QgcHJldkJlc3QgPSBHZXRMb2NhbFN0b3JhZ2VJdGVtKEdhbWVEYXRhLCAnYmVzdCcpO1xyXG4gICAgICAgIGlmIChwcmV2QmVzdCA8IHNjb3JlKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2V0QkZvcm1hdChzY29yZSk7XHJcbiAgICAgICAgICAgIFNldExvY2FsU3RvcmFnZUl0ZW0oR2FtZURhdGEsICdiZXN0Jywgc2NvcmUpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfSxcclxuICAgIGdldEJvbnVzVGltZVNjb3JlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIE1hdGguZmxvb3IoR2FtZVRpbWUuZ2V0VGltZUluY3JlYXNlKCkgLyAxMDApO1xyXG4gICAgfSxcclxuICAgIGdldEZpbmFsU2NvcmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihTY29yZS5nZXRTY29yZSgpICsgdGhpcy5nZXRCb251c1RpbWVTY29yZSgpKTtcclxuICAgIH0sXHJcbn07XHJcbmNvbnN0IEluaXRTY29yZSA9ICgpID0+IHtcclxuICAgIFNjb3JlLnR4dE51bSA9IDA7XHJcbiAgICBTY29yZS5iVHh0TnVtID0gR2V0TG9jYWxTdG9yYWdlSXRlbShHYW1lRGF0YSwgJ2Jlc3QnKTtcclxuICAgIFNjb3JlLnNldEZvcm1hdCgwKTtcclxuICAgIFNjb3JlLnNldEJGb3JtYXQoU2NvcmUuYlR4dE51bSk7XHJcbn07XHJcbmNvbnN0IFR4dEdhcCA9IDExMDtcclxuY29uc3QgQ3JlYXRlU2NvcmVUeHQgPSAoc2NlbmUpID0+IHtcclxuICAgIFNjb3JlLmJUeHQgPSBzY2VuZS5hZGQudGV4dChUeHRNYXJnaW4gLyAyLCBUeHRNYXJnaW4gKiAyLCAnJyk7XHJcbiAgICBTY29yZS5iVHh0QmFja2dyb3VuZCA9IHNjZW5lLmFkZC50ZXh0KFNjb3JlLmJUeHQueCArIFR4dEdhcCwgU2NvcmUuYlR4dC55LCAnQmVzdCcpO1xyXG4gICAgU2NvcmUudHh0ID0gc2NlbmUuYWRkLnRleHQoVHh0TWFyZ2luIC8gMiwgVHh0TWFyZ2luICogMywgJycpO1xyXG4gICAgU2NvcmUudHh0QmFja2dyb3VuZCA9IHNjZW5lLmFkZC50ZXh0KFNjb3JlLnR4dC54ICsgVHh0R2FwLCBTY29yZS50eHQueSwgJ1Njb3JlJyk7XHJcbiAgICBbU2NvcmUuYlR4dEJhY2tncm91bmQsIFNjb3JlLnR4dEJhY2tncm91bmRdLm1hcCgodHh0KSA9PiB7XHJcbiAgICAgICAgdHh0LnNldFBhZGRpbmcoeyBsZWZ0OiBUeHRQYWRkaW5nLCByaWdodDogVHh0UGFkZGluZywgdG9wOiBUeHRQYWRkaW5nIC8gMiwgYm90dG9tOiBUeHRQYWRkaW5nIC8gMiB9KTtcclxuICAgICAgICB0eHQuc2V0T3JpZ2luKDEsIC0wLjEpO1xyXG4gICAgICAgIHR4dC5zZXRGb250U2l6ZShUeHRTaXplKTtcclxuICAgICAgICB0eHQuc2V0Rm9udEZhbWlseShUeHRGYW1pbHkpO1xyXG4gICAgICAgIHR4dC5zZXRGb250U3R5bGUoJ2JvbGQgaXRhbGljJyk7XHJcbiAgICAgICAgdHh0LnNldEFscGhhKDAuMyk7XHJcbiAgICB9KTtcclxuICAgIFtTY29yZS5iVHh0LCBTY29yZS50eHRdLm1hcCgodHh0KSA9PiB7XHJcbiAgICAgICAgdHh0LnNldFBhZGRpbmcoeyBsZWZ0OiBUeHRQYWRkaW5nLCByaWdodDogVHh0UGFkZGluZywgdG9wOiBUeHRQYWRkaW5nIC8gMiwgYm90dG9tOiBUeHRQYWRkaW5nIC8gMiB9KTtcclxuICAgICAgICB0eHQuc2V0T3JpZ2luKDAsIDApO1xyXG4gICAgICAgIHR4dC5zZXRGb250U2l6ZShUeHRTaXplKTtcclxuICAgICAgICB0eHQuc2V0Rm9udEZhbWlseShUeHRGYW1pbHkpO1xyXG4gICAgfSk7XHJcbiAgICBsZXQgYmVzdFNjb3JlID0gR2V0TG9jYWxTdG9yYWdlSXRlbShHYW1lRGF0YSwgJ2Jlc3QnKTtcclxuICAgIFNjb3JlLnNldEZvcm1hdCgwKTtcclxuICAgIFNjb3JlLnNldEJGb3JtYXQoYmVzdFNjb3JlKTtcclxuICAgIFtTY29yZS5iVHh0QmFja2dyb3VuZCwgU2NvcmUudHh0QmFja2dyb3VuZCwgU2NvcmUuYlR4dCwgU2NvcmUudHh0XS5tYXAoKHR4dCkgPT4ge1xyXG4gICAgICAgIFNldERlcHRoKHR4dCwgJ3R4dCcpO1xyXG4gICAgfSk7XHJcbiAgICBJbml0U2NvcmUoKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgU2NvcmU7XHJcbmV4cG9ydCB7IEluaXRTY29yZSwgQ3JlYXRlU2NvcmVUeHQgfTtcclxuIiwiaW1wb3J0IHsgU2V0Rm9udDJDb21tb25Db250ZXh0U3R5bGUsIFR4dFRpdGxlU2l6ZSB9IGZyb20gJy4uL2ZvbnQnO1xyXG5pbXBvcnQgR2FtZUF1ZGlvIGZyb20gJ0BzcmMvc2NlbmVzL2F1ZGlvJztcclxuaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BzcmMvdXNlclNldHRpbmcnO1xyXG5pbXBvcnQgeyBHZXRSbmRJbnQsIEdldFJuZE51bSB9IGZyb20gJ0BzcmMvdXRpbHMvbWF0aCc7XHJcbmltcG9ydCB7IFNldERlcHRoIH0gZnJvbSAnLi4vZGVwdGgnO1xyXG5pbXBvcnQgR2FtZU92ZXIgZnJvbSAnLi4vdWkvZ2FtZW92ZXInO1xyXG5pbXBvcnQgR2FtZVRpbWUsIHsgU2V0bWlsbGllU2VjMlNlY1RpbWVGb3JtYXQgfSBmcm9tICcuLi91aS90aW1lJztcclxuaW1wb3J0IEdhbWVJbnB1dCBmcm9tICdAc3JjL3NjZW5lcy9pbnB1dCc7XHJcbmNvbnN0IEVmeCA9IHtcclxuICAgIGJnUGFydGljbGVMaXN0OiBbXSxcclxuICAgIC8vIHRpbWVJbmNyZWFzZTogPFBoYXNlci5HYW1lT2JqZWN0cy5UZXh0W10+IFtdLCAgIC8vIHdoZW4gYmxvY2sgY2xlYXJlZCwgaW5jcmVhc2UgdGltZSBieSBibG9jaydzIG93biBjaGFuY2VcclxuICAgIC8vIHNjb3JlOiA8UGhhc2VyLkdhbWVPYmplY3RzLlRleHRbXT4gW10sICAgICAgICAgIC8vIHdoZW4gYmxvY2sgY2xlYXJlZCwgaW5jcmVhc2Ugc2NvcmVcclxuICAgIGxpc3Q6IFtdLFxyXG4gICAgc2V0Q29uZmlnOiBmdW5jdGlvbiAocGFydGljbGUsIGNvbmZpZykge1xyXG4gICAgICAgIGNvbnN0IGZpbmFsQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7IHg6IDAsIHk6IDAsIGFjdGl2ZTogZmFsc2UgfSwgY29uZmlnKTtcclxuICAgICAgICBsZXQgZW1pdHRlcjtcclxuICAgICAgICBjb25zdCBuZXN0ZWRFbWl0dGVySWR4ID0gdGhpcy5saXN0LmZpbmRJbmRleChlbWl0dGVyID0+IGVtaXR0ZXIubmFtZSA9PT0gY29uZmlnLm5hbWUpO1xyXG4gICAgICAgIGlmIChuZXN0ZWRFbWl0dGVySWR4ID49IDApXHJcbiAgICAgICAgICAgIHRoaXMubGlzdFtuZXN0ZWRFbWl0dGVySWR4XSA9IHBhcnRpY2xlLmNyZWF0ZUVtaXR0ZXIoZmluYWxDb25maWcpO1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBlbWl0dGVyID0gcGFydGljbGUuY3JlYXRlRW1pdHRlcihmaW5hbENvbmZpZyk7XHJcbiAgICAgICAgICAgIHRoaXMubGlzdC5wdXNoKGVtaXR0ZXIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gZW1pdHRlcjtcclxuICAgIH0sXHJcbiAgICBnZXRFbWl0dGVyOiBmdW5jdGlvbiAobmFtZSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldEVtaXR0ZXIgPSB0aGlzLmxpc3QuZmluZChlbWl0dGVyID0+IGVtaXR0ZXIubmFtZSA9PT0gbmFtZSk7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRFbWl0dGVyKSB7XHJcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgZW1pdHRlciAke25hbWV9IGlzIG5vdCBpbiB0aGUgcGFydGljbGUgbGlzdGApO1xyXG4gICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0YXJnZXRFbWl0dGVyO1xyXG4gICAgfSxcclxuICAgIGFjdGl2ZUVtaXR0ZXIoeCwgeSwgbmFtZSkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldEVtaXR0ZXIgPSB0aGlzLmdldEVtaXR0ZXIobmFtZSk7XHJcbiAgICAgICAgaWYgKCF0YXJnZXRFbWl0dGVyKVxyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgdGFyZ2V0RW1pdHRlci5hY3RpdmUgPSB0cnVlO1xyXG4gICAgICAgIHRhcmdldEVtaXR0ZXIuc2V0UG9zaXRpb24oeCwgeSk7XHJcbiAgICAgICAgcmV0dXJuIHRhcmdldEVtaXR0ZXI7XHJcbiAgICB9LFxyXG4gICAgYW5pbUVtaXR0ZXI6IGZ1bmN0aW9uICh4LCB5LCBuYW1lKSB7XHJcbiAgICAgICAgY29uc3QgdGFyZ2V0RW1pdHRlciA9IHRoaXMuYWN0aXZlRW1pdHRlcih4LCB5LCBuYW1lKTtcclxuICAgICAgICBpZiAoIXRhcmdldEVtaXR0ZXIpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBjb25zdCBpbnN0YW5jZUV4cGxvZGUgPSB0YXJnZXRFbWl0dGVyLmV4cGxvZGUoKTtcclxuICAgICAgICByZXR1cm4gaW5zdGFuY2VFeHBsb2RlO1xyXG4gICAgfSxcclxuICAgIHN0YXJ0RW1pdHRlcjogZnVuY3Rpb24gKHgsIHksIG5hbWUpIHtcclxuICAgICAgICBjb25zdCB0YXJnZXRFbWl0dGVyID0gdGhpcy5hY3RpdmVFbWl0dGVyKHgsIHksIG5hbWUpO1xyXG4gICAgICAgIGlmICghdGFyZ2V0RW1pdHRlcilcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIGNvbnN0IGluc3RhbmNlRXhwbG9kZSA9IHRhcmdldEVtaXR0ZXIuc3RhcnQoKTtcclxuICAgICAgICByZXR1cm4gaW5zdGFuY2VFeHBsb2RlO1xyXG4gICAgfSxcclxuICAgIGFuaW1TY2FsZTogZnVuY3Rpb24gKHNjZW5lLCB0YXJnZXQpIHtcclxuICAgICAgICBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih7XHJcbiAgICAgICAgICAgIGZyb206IDEsIHRvOiAxLjIsIGR1cmF0aW9uOiAzMDAsIHlveW86IHRydWUsXHJcbiAgICAgICAgICAgIG9uVXBkYXRlOiAodHcsIGRhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRhcmdldCAmJiB0YXJnZXQuc2V0U2NhbGUoZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYW5pbVBvczogZnVuY3Rpb24gKHNjZW5lLCB0YXJnZXQsIGFtb3VudCkge1xyXG4gICAgICAgIGNvbnN0IHRhcmdldEluaXRZID0gdGFyZ2V0Lnk7XHJcbiAgICAgICAgc2NlbmUudHdlZW5zLmFkZENvdW50ZXIoe1xyXG4gICAgICAgICAgICBmcm9tOiB0YXJnZXRJbml0WSwgdG86IHRhcmdldEluaXRZICsgYW1vdW50LCBkdXJhdGlvbjogMjQwMCxcclxuICAgICAgICAgICAgb25VcGRhdGU6ICh0dywgZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGFyZ2V0ICYmIHRhcmdldC5zZXRQb3NpdGlvbih0YXJnZXQueCwgZGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYW5pbVRpbWVJbmNyZWFzZTogZnVuY3Rpb24gKGJsb2NrLCBjaGFuY2UsIHZhbHVlKSB7XHJcbiAgICAgICAgY29uc3QgeyBzY2VuZSB9ID0gYmxvY2s7XHJcbiAgICAgICAgY29uc3QgY2hhbmNlUG9zWSA9IGJsb2NrLnkgLSAxMDA7XHJcbiAgICAgICAgY29uc3QgdGltZVNlYyA9IFNldG1pbGxpZVNlYzJTZWNUaW1lRm9ybWF0KHZhbHVlKTtcclxuICAgICAgICBjb25zdCB0aW1lSW5jcmVhc2VPblVpUm5kUG9zWCA9IEdhbWVUaW1lLnR4dC54ICsgKEdhbWVUaW1lLnR4dC53aWR0aCAqIDEuNSkgLSA1ICsgR2V0Um5kTnVtKC0zLCAzKTtcclxuICAgICAgICBjb25zdCB0aW1lSW5jcmVhc2VPblVpUm5kUG9zWSA9IEdhbWVUaW1lLnR4dC55ICsgR2FtZVRpbWUudHh0LmhlaWdodCAvIDIgKyBHZXRSbmROdW0oLTEwLCAxMCk7XHJcbiAgICAgICAgY29uc3QgdGltZUluY3JlYXNlT25VaSA9IHNjZW5lLmFkZC50ZXh0KHRpbWVJbmNyZWFzZU9uVWlSbmRQb3NYLCB0aW1lSW5jcmVhc2VPblVpUm5kUG9zWSwgJysnICsgdGltZVNlYykuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgY29uc3QgdGltZUluY3JlYXNlVHh0ID0gc2NlbmUuYWRkLnRleHQoYmxvY2sueCwgY2hhbmNlUG9zWSwgJ1RpbWUgQ3JpdGljYWwhJykuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgY29uc3QgdGltZUluY3JlYXNlQ2hhbmNlID0gc2NlbmUuYWRkLnRleHQodGltZUluY3JlYXNlVHh0LngsIHRpbWVJbmNyZWFzZVR4dC55ICsgMjUsIGNoYW5jZS50b1N0cmluZygpICsgJyUnKS5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICBjb25zdCB0aW1lSW5jcmVhc2VPbkJsb2NrID0gc2NlbmUuYWRkLnRleHQodGltZUluY3JlYXNlQ2hhbmNlLngsIHRpbWVJbmNyZWFzZUNoYW5jZS55ICsgMjUsIHRpbWVTZWMpLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIFt0aW1lSW5jcmVhc2VPblVpLCB0aW1lSW5jcmVhc2VUeHQsIHRpbWVJbmNyZWFzZUNoYW5jZSwgdGltZUluY3JlYXNlT25CbG9ja10ubWFwKCh0eHQpID0+IHtcclxuICAgICAgICAgICAgU2V0Rm9udDJDb21tb25Db250ZXh0U3R5bGUodHh0KTtcclxuICAgICAgICAgICAgU2V0RGVwdGgodHh0LCAndHh0Jyk7XHJcbiAgICAgICAgICAgIHR4dC5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLmFuaW1TY2FsZShzY2VuZSwgdGltZUluY3JlYXNlT25VaSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgY29uc3QgdHdMaXN0ID0gW107XHJcbiAgICAgICAgdHdMaXN0LnB1c2goe1xyXG4gICAgICAgICAgICBmcm9tOiB0aW1lSW5jcmVhc2VPblVpUm5kUG9zWCwgdG86IHRpbWVJbmNyZWFzZU9uVWlSbmRQb3NYICsgMTAsIGR1cmF0aW9uOiAyNDAwLFxyXG4gICAgICAgICAgICBvblN0YXJ0OiAoKSA9PiB7IHNjZW5lLnR3ZWVucy5hZGRDb3VudGVyKHR3TGlzdC5zaGlmdCgpKTsgfSxcclxuICAgICAgICAgICAgb25VcGRhdGU6ICh0dywgdHdEYXRhKSA9PiB7IHRpbWVJbmNyZWFzZU9uVWkueCA9IHR3RGF0YS52YWx1ZTsgfSxcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4geyB0aW1lSW5jcmVhc2VPblVpLmRlc3Ryb3koKTsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHR3TGlzdC5wdXNoKHtcclxuICAgICAgICAgICAgZnJvbTogMSwgdG86IDAsIGR1cmF0aW9uOiAyNDAwLFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKHR3LCB0d0RhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRpbWVJbmNyZWFzZVR4dC5zZXRBbHBoYSh0d0RhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgdGltZUluY3JlYXNlQ2hhbmNlLnNldEFscGhhKHR3RGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aW1lSW5jcmVhc2VPbkJsb2NrLnNldEFscGhhKHR3RGF0YS52YWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRpbWVJbmNyZWFzZVR4dC5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgICAgICB0aW1lSW5jcmVhc2VDaGFuY2UuZGVzdHJveSgpO1xyXG4gICAgICAgICAgICAgICAgdGltZUluY3JlYXNlT25CbG9jay5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih0d0xpc3Quc2hpZnQoKSk7XHJcbiAgICAgICAgdGhpcy5hbmltUG9zKHNjZW5lLCB0aW1lSW5jcmVhc2VUeHQsIC0zMCk7XHJcbiAgICAgICAgdGhpcy5hbmltUG9zKHNjZW5lLCB0aW1lSW5jcmVhc2VDaGFuY2UsIC0zMCk7XHJcbiAgICAgICAgdGhpcy5hbmltUG9zKHNjZW5lLCB0aW1lSW5jcmVhc2VPbkJsb2NrLCAtMzApO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfSxcclxuICAgIGFuaW1TY29yZTogZnVuY3Rpb24gKGJsb2NrLCBzY29yZSkge1xyXG4gICAgICAgIGNvbnN0IHsgc2NlbmUgfSA9IGJsb2NrO1xyXG4gICAgICAgIGNvbnN0IHNjb3JlVHh0ID0gc2NlbmUuYWRkLnRleHQoYmxvY2sueCwgYmxvY2sueSwgTWF0aC5mbG9vcihzY29yZSkudG9TdHJpbmcoKSkuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgU2V0Rm9udDJDb21tb25Db250ZXh0U3R5bGUoc2NvcmVUeHQpO1xyXG4gICAgICAgIFNldERlcHRoKHNjb3JlVHh0LCAndHh0Jyk7XHJcbiAgICAgICAgc2NvcmVUeHQuc2V0Rm9udFNpemUoVHh0VGl0bGVTaXplKTtcclxuICAgICAgICAvLyBzY29yZSBwYXJ0aWNsZSBlbWl0XHJcbiAgICAgICAgY29uc3Qgc2NvcmVTZnhMaXN0ID0gWydzY29yZUJsdWUnLCAnc2NvcmVHcmVlbicsICdzY29yZUJyb3duJ107XHJcbiAgICAgICAgY29uc3Qgcm5kSWR4ID0gR2V0Um5kSW50KDAsIHNjb3JlU2Z4TGlzdC5sZW5ndGgpO1xyXG4gICAgICAgIEVmeC5hbmltRW1pdHRlcihibG9jay54LCBibG9jay55LCBzY29yZVNmeExpc3Rbcm5kSWR4XSk7XHJcbiAgICAgICAgLy8gYWxwaGEgdHdcclxuICAgICAgICBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih7XHJcbiAgICAgICAgICAgIGZyb206IDEsIHRvOiAwLCBkdXJhdGlvbjogMjQwMCxcclxuICAgICAgICAgICAgb25TdGFydDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2NvcmVUeHQuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgIEdhbWVBdWRpby5wbGF5U2Z4KCdzY29yZVNmeCcpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKHR3LCBkYXRhKSA9PiB7IHNjb3JlVHh0LnNldEFscGhhKGRhdGEudmFsdWUpOyB9LFxyXG4gICAgICAgICAgICBvbkNvbXBsZXRlOiAoKSA9PiB7IHNjb3JlVHh0LmRlc3Ryb3koKTsgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuYW5pbVNjYWxlKHNjZW5lLCBzY29yZVR4dCk7XHJcbiAgICAgICAgdGhpcy5hbmltUG9zKHNjZW5lLCBzY29yZVR4dCwgLTMwKTtcclxuICAgIH0sXHJcbiAgICBhbmltTmV3QmVzdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIEdhbWVBdWRpby5wbGF5U2Z4KCd2b2ljZUhpZ2hTY29yZScpO1xyXG4gICAgICAgIHRoaXMuYmdQYXJ0aWNsZUxpc3QubWFwKGtleSA9PiB0aGlzLnN0YXJ0RW1pdHRlcihWaWV3LmNlbnRlclgsIFZpZXcuY2VudGVyWSAtIFZpZXcuaCAvIDQsIGtleSkpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRFbWl0dGVyKDAsIDAsICduZXdCZXN0U2NvcmUnKTtcclxuICAgIH0sXHJcbiAgICBzdG9wQWxsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5saXN0Lm1hcChlbWl0dGVyID0+IGVtaXR0ZXIuc3RvcCgpKTtcclxuICAgIH0sXHJcbn07XHJcbmNvbnN0IENyZWF0ZUVmeCA9IChzY2VuZSkgPT4ge1xyXG4gICAgY29uc3QgYmxvY2tQYXJ0aWNsZSA9IHNjZW5lLmFkZC5wYXJ0aWNsZXMoJ3BhcnRpY2xlU3ByaXRlJyk7XHJcbiAgICBjb25zdCBjb21tb25Ub3VjaENvbmZpZyA9IHtcclxuICAgICAgICBsaWZlc3BhbjogeyBtaW46IDEwLCBtYXg6IDM1MCB9LFxyXG4gICAgICAgIGFuZ2xlOiB7IHN0YXJ0OiAwLCBlbmQ6IDM2MCwgc3RlcHM6IDY0IH0sXHJcbiAgICAgICAgc3BlZWQ6IDIwMCxcclxuICAgICAgICBxdWFudGl0eTogNjQsXHJcbiAgICAgICAgc2NhbGU6IHsgc3RhcnQ6IDAuMywgZW5kOiAwLjA1IH0sXHJcbiAgICAgICAgYmxlbmRNb2RlOiAnQUREJyxcclxuICAgIH07XHJcbiAgICBFZnguc2V0Q29uZmlnKGJsb2NrUGFydGljbGUsIE9iamVjdC5hc3NpZ24oeyBuYW1lOiAndG91Y2hCbHVlJywgZnJhbWU6ICdibHVlJyB9LCBjb21tb25Ub3VjaENvbmZpZykpO1xyXG4gICAgRWZ4LnNldENvbmZpZyhibG9ja1BhcnRpY2xlLCBPYmplY3QuYXNzaWduKHsgbmFtZTogJ3RvdWNoR3JlZW4nLCBmcmFtZTogJ2dyZWVuJyB9LCBjb21tb25Ub3VjaENvbmZpZykpO1xyXG4gICAgRWZ4LnNldENvbmZpZyhibG9ja1BhcnRpY2xlLCBPYmplY3QuYXNzaWduKHsgbmFtZTogJ3RvdWNoQnJvd24nLCBmcmFtZTogJ3llbGxvdycgfSwgY29tbW9uVG91Y2hDb25maWcpKTtcclxuICAgIGNvbnN0IGNvbW1vblNjb3JlQ29uZmlnID0ge1xyXG4gICAgICAgIGxpZmVzcGFuOiB7IG1pbjogMTAwLCBtYXg6IDUwMCB9LFxyXG4gICAgICAgIGFuZ2xlOiB7IHN0YXJ0OiAwLCBlbmQ6IDM2MCwgc3RlcHM6IDY0IH0sXHJcbiAgICAgICAgc3BlZWQ6IDM1MCxcclxuICAgICAgICBxdWFudGl0eTogNjQsXHJcbiAgICAgICAgc2NhbGU6IHsgc3RhcnQ6IDAuMiwgZW5kOiAwLjEgfSxcclxuICAgICAgICBibGVuZE1vZGU6ICdBREQnLFxyXG4gICAgfTtcclxuICAgIEVmeC5zZXRDb25maWcoYmxvY2tQYXJ0aWNsZSwgT2JqZWN0LmFzc2lnbih7IG5hbWU6ICdzY29yZUJsdWUnLCBmcmFtZTogJ2JsdWUnIH0sIGNvbW1vblNjb3JlQ29uZmlnKSk7XHJcbiAgICBFZnguc2V0Q29uZmlnKGJsb2NrUGFydGljbGUsIE9iamVjdC5hc3NpZ24oeyBuYW1lOiAnc2NvcmVHcmVlbicsIGZyYW1lOiAnZ3JlZW4nIH0sIGNvbW1vblNjb3JlQ29uZmlnKSk7XHJcbiAgICBFZnguc2V0Q29uZmlnKGJsb2NrUGFydGljbGUsIE9iamVjdC5hc3NpZ24oeyBuYW1lOiAnc2NvcmVCcm93bicsIGZyYW1lOiAneWVsbG93JyB9LCBjb21tb25TY29yZUNvbmZpZykpO1xyXG4gICAgLy8gdG91Y2ggaW5wdXRcclxuICAgIGNvbnN0IHRvdWNoU2Z4TGlzdCA9IFsndG91Y2hCbHVlJywgJ3RvdWNoR3JlZW4nLCAndG91Y2hCcm93biddO1xyXG4gICAgR2FtZUlucHV0LmFkZCgnZG93bicsIChwdHIsIGN1cnJlbnRseU92ZXIpID0+IHtcclxuICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgndG91Y2hTZngnKTtcclxuICAgICAgICBjb25zdCBybmRJZHggPSBHZXRSbmRJbnQoMCwgdG91Y2hTZnhMaXN0Lmxlbmd0aCk7XHJcbiAgICAgICAgY29uc3QgZW1pdHRlciA9IEVmeC5hbmltRW1pdHRlcihwdHIueCwgcHRyLnksIHRvdWNoU2Z4TGlzdFtybmRJZHhdKTtcclxuICAgICAgICAvLyBzY2VuZS5jYW1lcmFzLm1haW4uc2hha2UoMjAwLCAwLjAxLCB0cnVlKTtcclxuICAgIH0pO1xyXG4gICAgLy8gc2NlbmUuaW5wdXQub2ZmKCdwb2ludGVyZG93bicpO1xyXG4gICAgLy8gc2NlbmUuaW5wdXQub24oJ3BvaW50ZXJkb3duJywgKHB0cikgPT4ge1xyXG4gICAgLy8gICAgIEdhbWVBdWRpby5wbGF5U2Z4KCd0b3VjaFNmeCcpO1xyXG4gICAgLy8gICAgIGNvbnN0IHJuZElkeCA9IEdldFJuZEludCgwLCB0b3VjaFNmeExpc3QubGVuZ3RoKTtcclxuICAgIC8vICAgICBjb25zdCBlbWl0dGVyID0gRWZ4LmFuaW1FbWl0dGVyKHB0ci54LCBwdHIueSwgdG91Y2hTZnhMaXN0W3JuZElkeF0pO1xyXG4gICAgLy8gICAgIC8vIGNvbnN0IHNjb3JlU2Z4TGlzdCA9IFsgJ3Njb3JlQmx1ZScsICdzY29yZUdyZWVuJywgJ3Njb3JlQnJvd24nIF07XHJcbiAgICAvLyAgICAgLy8gY29uc3Qgcm5kSWR4ID0gR2V0Um5kSW50KDAsIHNjb3JlU2Z4TGlzdC5sZW5ndGgpO1xyXG4gICAgLy8gICAgIC8vIGNvbnN0IHNjb3JlSW5zdGFuY2UgPSBFZnguYW5pbUVtaXR0ZXIocHRyLngsIHB0ci55LCBzY29yZVNmeExpc3Rbcm5kSWR4XSk7XHJcbiAgICAvLyAgICAgLy8gRWZ4LmFuaW1FbWl0dGVyKHB0ci54LCBwdHIueSwgJ3Njb3JlJyk7XHJcbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coJ3JuZElkeDogJywgcm5kSWR4LCB0b3VjaFNmeExpc3Rbcm5kSWR4XSk7XHJcbiAgICAvLyAgICAgLy8gY29uc29sZS5sb2coJ2VtaXR0ZXI6ICcsIGVtaXR0ZXIpO1xyXG4gICAgLy8gICAgIC8vIHB0ci5ldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgLy8gICAgIGNoY2tQdHJEZWZhdWx0KHB0cik7XHJcbiAgICAvLyB9KTtcclxuICAgIFNldERlcHRoKGJsb2NrUGFydGljbGUsICdwYXJ0aWNsZScpO1xyXG4gICAgcmV0dXJuIEVmeDtcclxufTtcclxuY29uc3QgQ3JlYXRlR2FtZU92ZXJFZnggPSAoc2NlbmUsIGltZykgPT4ge1xyXG4gICAgRWZ4LmJnUGFydGljbGVMaXN0ID0gW1xyXG4gICAgICAgICdkaWFtb25kMicsICdkaWFtb25kMycsICdkaWFtb25kNCcsXHJcbiAgICAgICAgJ3J1YnkxJywgJ3J1YnkyJywgJ3J1YnkzJywgJ3J1Ynk0JyxcclxuICAgICAgICAna2V5MScsICdrZXkyJywgJ2tleTMnLCAna2V5NCcsXHJcbiAgICBdO1xyXG4gICAgRWZ4LmJnUGFydGljbGVMaXN0Lm1hcCgocGFydGljbGVOYW1lKSA9PiB7XHJcbiAgICAgICAgY29uc3QgcGFydGljbGUgPSBzY2VuZS5hZGQucGFydGljbGVzKHBhcnRpY2xlTmFtZSk7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSAyMDAwO1xyXG4gICAgICAgIEVmeC5zZXRDb25maWcocGFydGljbGUsIHtcclxuICAgICAgICAgICAgbmFtZTogcGFydGljbGVOYW1lLFxyXG4gICAgICAgICAgICBhbmdsZTogeyBtaW46IDEwMCwgbWF4OiA0NDAgfSxcclxuICAgICAgICAgICAgc3BlZWQ6IDM1MCxcclxuICAgICAgICAgICAgZ3Jhdml0eVk6IC0yMDAsXHJcbiAgICAgICAgICAgIGxpZmVzcGFuOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgcXVhbnRpdHk6IDEsXHJcbiAgICAgICAgICAgIGZyZXF1ZW5jeTogNjAsXHJcbiAgICAgICAgICAgIHNjYWxlOiB7IG1pbjogMC4xLCBtYXg6IDEgfSxcclxuICAgICAgICAgICAgcm90YXRlOiB7IG9uRW1pdDogKCkgPT4gR2V0Um5kTnVtKDAsIDM2MCkgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFNldERlcHRoKHBhcnRpY2xlLCAncGFydGljbGUnKTtcclxuICAgIH0pO1xyXG4gICAgY29uc3QgYmxvY2tQYXJ0aWNsZSA9IHNjZW5lLmFkZC5wYXJ0aWNsZXMoJ3BhcnRpY2xlU3ByaXRlJyk7XHJcbiAgICBjb25zdCB3aWR0aCA9IGltZy53aWR0aCAqIEdhbWVPdmVyLm5ld0Jlc3RTY29yZUJnU2NhbGVXO1xyXG4gICAgY29uc3QgaGVpZ2h0ID0gaW1nLmhlaWdodCAqIEdhbWVPdmVyLm5ld0Jlc3RTY29yZUJnU2NhbGVIO1xyXG4gICAgY29uc3QgZ2FtZU92ZXJFbWl0Wm9uZSA9IG5ldyBQaGFzZXIuR2VvbS5SZWN0YW5nbGUoaW1nLnggLSB3aWR0aCAvIDIsIGltZy55IC0gaGVpZ2h0IC8gMiwgd2lkdGgsIGhlaWdodCk7XHJcbiAgICBFZnguc2V0Q29uZmlnKGJsb2NrUGFydGljbGUsIHtcclxuICAgICAgICBuYW1lOiAnbmV3QmVzdFNjb3JlJyxcclxuICAgICAgICBmcmFtZTogJ2JsdWUnLFxyXG4gICAgICAgIGxpZmVzcGFuOiAxMDAwLFxyXG4gICAgICAgIGdyYXZpdHlZOiAxMCxcclxuICAgICAgICBzY2FsZTogeyBzdGFydDogMCwgZW5kOiAwLjI1LCBlYXNlOiAnUXVhZC5lYXNlT3V0JyB9LFxyXG4gICAgICAgIGFscGhhOiB7IHN0YXJ0OiAxLCBlbmQ6IDAsIGVhc2U6ICdRdWFkLmVhc2VJbicgfSxcclxuICAgICAgICBibGVuZE1vZGU6ICdBREQnLFxyXG4gICAgICAgIGVtaXRab25lOiB7IHR5cGU6ICdyYW5kb20nLCBzb3VyY2U6IGdhbWVPdmVyRW1pdFpvbmUgfSxcclxuICAgIH0pO1xyXG4gICAgU2V0RGVwdGgoYmxvY2tQYXJ0aWNsZSwgJ2hpZ2hlc3QnKTtcclxuICAgIHJldHVybiBFZng7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEVmeDtcclxuZXhwb3J0IHsgQ3JlYXRlRWZ4LCBDcmVhdGVHYW1lT3ZlckVmeCB9O1xyXG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSAnQHNyYy91c2VyU2V0dGluZyc7XHJcbmltcG9ydCBHYW1lQXVkaW8gZnJvbSAnQHNyYy9zY2VuZXMvYXVkaW8nO1xyXG5pbXBvcnQgeyBSZXN0YXJ0R2FtZSwgU3RvcEdhbWUgfSBmcm9tICcuLi9nYW1lJztcclxuaW1wb3J0IHsgU3RhcnRUaXRsZSB9IGZyb20gJy4uL3RpdGxlJztcclxuaW1wb3J0IHsgQ29udGV4dE1hcmdpbkgsIENvbnRleHRNYXJnaW5XLCBTZXRGb250MkNvbW1vbkNvbnRleHRTdHlsZSwgVHh0T3ZlckhlYWRTaXplLCBUeHRUaXRsZUhlYWRTaXplIH0gZnJvbSAnLi4vZm9udCc7XHJcbmltcG9ydCBTY29yZSBmcm9tICcuL3Njb3JlJztcclxuaW1wb3J0IHsgU2V0RGVwdGggfSBmcm9tICcuLi9kZXB0aCc7XHJcbmltcG9ydCB7IEdldExvY2FsU3RvcmFnZUl0ZW0gfSBmcm9tICdAc3JjL3V0aWxzL3N0b3JhZ2UnO1xyXG5pbXBvcnQgR2FtZURhdGEgZnJvbSAnLi4vLi4vc3RvcmFnZSc7XHJcbmltcG9ydCBFZnggZnJvbSAnLi4vZWZ4JztcclxuaW1wb3J0IEJsb2NrU3lzdGVtIGZyb20gJy4uL2Jsb2NrL3N5c3RlbSc7XHJcbmNvbnN0IEdhbWVPdmVyID0ge1xyXG4gICAgb3ZlclR4dDogbnVsbCxcclxuICAgIGxheWVyOiBudWxsLFxyXG4gICAgbmV3QmVzdFNjb3JlQmdTY2FsZVc6IDIuNCxcclxuICAgIG5ld0Jlc3RTY29yZUJnU2NhbGVIOiAzLjIsXHJcbiAgICBuZXdCZXN0U2NvcmVCZzogbnVsbCxcclxuICAgIG5ld0Jlc3RTY29yZVR4dDogbnVsbCxcclxuICAgIG5ld0Jlc3RTY29yZU51bTogbnVsbCxcclxuICAgIGRhdGE6IHtcclxuICAgICAgICB0aXRsZTogJ1RpbWUgT3ZlcicsXHJcbiAgICAgICAgYm9udXNUaW1lOiAwLFxyXG4gICAgICAgIHNjb3JlOiAwLFxyXG4gICAgICAgIGZpbmFsU2NvcmU6IDBcclxuICAgIH0sXHJcbiAgICBhbmltQ29tbW9uT3ZlcjogZnVuY3Rpb24gKHNjZW5lLCBzbmRLZXksIHR4dCkge1xyXG4gICAgICAgIEJsb2NrU3lzdGVtLnNldElzR2FtZU92ZXIodHJ1ZSk7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnBsYXlTZngoc25kS2V5KTtcclxuICAgICAgICBjb25zdCBvdmVyU25kID0gc2NlbmUuc291bmQuZ2V0KHNuZEtleSk7XHJcbiAgICAgICAgY29uc3Qgb3ZlclNuZFRpbWluZyA9IG92ZXJTbmQuZHVyYXRpb24gLyAyICogMTAwMCAtIDEwMDtcclxuICAgICAgICBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih7XHJcbiAgICAgICAgICAgIGZyb206IDAsIHRvOiBvdmVyU25kVGltaW5nLCBkdXJhdGlvbjogb3ZlclNuZFRpbWluZyxcclxuICAgICAgICAgICAgb25TdGFydDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5vdmVyVHh0LnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm92ZXJUeHQuc2V0VGV4dCh0eHQgKyAnXFxuJyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMub3ZlclR4dC5zZXRUZXh0KHR4dCArICdcXG5PdmVyJyk7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmFuaW1TaG93KHNjZW5lLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiB0eHQgKyAnIE92ZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBib251c1RpbWU6IFNjb3JlLmdldEJvbnVzVGltZVNjb3JlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3JlOiBTY29yZS5nZXRTY29yZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5hbFNjb3JlOiBTY29yZS5nZXRGaW5hbFNjb3JlKClcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIDEwMDApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LFxyXG4gICAgYW5pbVRpbWVPdmVyOiBmdW5jdGlvbiAoc2NlbmUpIHsgdGhpcy5hbmltQ29tbW9uT3ZlcihzY2VuZSwgJ3ZvaWNlVGltZU92ZXInLCAnVGltZScpOyB9LFxyXG4gICAgYW5pbUdhbWVPdmVyOiBmdW5jdGlvbiAoc2NlbmUpIHsgdGhpcy5hbmltQ29tbW9uT3ZlcihzY2VuZSwgJ3ZvaWNlR2FtZU92ZXInLCAnR2FtZScpOyB9LFxyXG4gICAgYW5pbVNob3c6IGZ1bmN0aW9uIChzY2VuZSwgZGF0YSkge1xyXG4gICAgICAgIC8vIHNldCBkZWZhdWx0IGRhdGEgZm9yIHBlcmZvcm1hbmNlXHJcbiAgICAgICAgdGhpcy5zaG93KHtcclxuICAgICAgICAgICAgdGl0bGU6IGRhdGEudGl0bGUsXHJcbiAgICAgICAgICAgIGJvbnVzVGltZTogMCxcclxuICAgICAgICAgICAgc2NvcmU6IDAsXHJcbiAgICAgICAgICAgIGZpbmFsU2NvcmU6IDBcclxuICAgICAgICB9KTtcclxuICAgICAgICAvLyBhbmltIHRvIGJvbnVzIHRpbWUgJiBzY29yZVxyXG4gICAgICAgIGNvbnN0IHByZXZCZXN0U2NvcmUgPSBHZXRMb2NhbFN0b3JhZ2VJdGVtKEdhbWVEYXRhLCAnYmVzdCcpO1xyXG4gICAgICAgIGNvbnN0IHsgc2NvcmUsIGJvbnVzVGltZSwgZmluYWxTY29yZSB9ID0gZGF0YTtcclxuICAgICAgICBTY29yZS5jb21wYXJlTm9ybWFsQW5kQmVzdChmaW5hbFNjb3JlKTsgLy8gdGVzdFxyXG4gICAgICAgIGNvbnN0IHR3TGlzdCA9IFtdO1xyXG4gICAgICAgIGNvbnN0IHNmeENvbW1vblR3Q29uZmlnID0ge1xyXG4gICAgICAgICAgICAvLyB1cGRhdGluZyBzY29yZSBzZnhcclxuICAgICAgICAgICAgZnJvbTogMCwgdG86IHNjb3JlLCBkdXJhdGlvbjogMTAwLCByZXBlYXQ6IDksXHJcbiAgICAgICAgICAgIG9uU3RhcnQ6ICgpID0+IHsgc2NlbmUudHdlZW5zLmFkZENvdW50ZXIodHdMaXN0LnNoaWZ0KCkpOyB9LFxyXG4gICAgICAgICAgICAvLyBvblJlcGVhdDogKCkgPT4geyBHYW1lQXVkaW8ucGxheVNmeCgndm9pY2VTY29yZScpOyB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBzY2FsZUNvbW1vblR3Q29uZmlnID0ge1xyXG4gICAgICAgICAgICBmcm9tOiAxLCB0bzogMS4zLCBkdXJhdGlvbjogNTAwLCB5b3lvOiB0cnVlLCBlYXNlOiAnQmFjay5lYXNlSW5PdXQnLFxyXG4gICAgICAgICAgICBvblN0YXJ0OiAoKSA9PiB7IHNjZW5lLnR3ZWVucy5hZGRDb3VudGVyKHR3TGlzdC5zaGlmdCgpKTsgfSxcclxuICAgICAgICB9O1xyXG4gICAgICAgIHR3TGlzdC5wdXNoKHNmeENvbW1vblR3Q29uZmlnLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNjYWxlQ29tbW9uVHdDb25maWcpLCB7IG9uVXBkYXRlOiAodHcsIHR3RGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXllci5zY29yZVR4dC5zZXRTY2FsZSh0d0RhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICB9IH0pKTtcclxuICAgICAgICB0d0xpc3QucHVzaCh7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBzY29yZVxyXG4gICAgICAgICAgICBmcm9tOiAwLCB0bzogc2NvcmUsIGR1cmF0aW9uOiAxMDAwLFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKHR3LCB0d0RhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIuc2NvcmVUeHQuc2V0VGV4dCh0d0RhdGEudmFsdWUudG9GaXhlZCgwKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4geyBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih0d0xpc3Quc2hpZnQoKSk7IH0sIDIwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgICB0d0xpc3QucHVzaChzZnhDb21tb25Ud0NvbmZpZywgT2JqZWN0LmFzc2lnbihPYmplY3QuYXNzaWduKHt9LCBzY2FsZUNvbW1vblR3Q29uZmlnKSwgeyBvblVwZGF0ZTogKHR3LCB0d0RhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIudGltZVR4dC5zZXRTY2FsZSh0d0RhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICB9IH0pKTtcclxuICAgICAgICB0d0xpc3QucHVzaCh7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBib251cyB0aW1lXHJcbiAgICAgICAgICAgIGZyb206IDAsIHRvOiBib251c1RpbWUsIGR1cmF0aW9uOiAxMDAwLFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKHR3LCB0d0RhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMubGF5ZXIudGltZVR4dC5zZXRUZXh0KHR3RGF0YS52YWx1ZS50b0ZpeGVkKDApKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7IHNjZW5lLnR3ZWVucy5hZGRDb3VudGVyKHR3TGlzdC5zaGlmdCgpKTsgfSwgMjAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHR3TGlzdC5wdXNoKHNmeENvbW1vblR3Q29uZmlnLCBPYmplY3QuYXNzaWduKE9iamVjdC5hc3NpZ24oe30sIHNjYWxlQ29tbW9uVHdDb25maWcpLCB7IG9uVXBkYXRlOiAodHcsIHR3RGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXllci5zY29yZVR4dC5zZXRTY2FsZSh0d0RhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICB9IH0pKTtcclxuICAgICAgICB0d0xpc3QucHVzaCh7XHJcbiAgICAgICAgICAgIC8vIHVwZGF0ZSBzY29yZSB2aWEgYm9udXMgdGltZSAoZmluYWwgc2NvcmUpXHJcbiAgICAgICAgICAgIGZyb206IHNjb3JlLCB0bzogZmluYWxTY29yZSwgZHVyYXRpb246IDEwMDAsXHJcbiAgICAgICAgICAgIG9uVXBkYXRlOiAodHcsIHR3RGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYXllci5zY29yZVR4dC5zZXRUZXh0KHR3RGF0YS52YWx1ZS50b0ZpeGVkKDApKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgLy8gc2hvdyBuZXcgYmVzdCBzY29yZSBwZXJmb3JtYW5jZSBpZiBzY29yZSBpcyBiZXR0ZXIgdGhhbiBwcmV2IGJlc3Qgb25lXHJcbiAgICAgICAgICAgICAgICBpZiAoZmluYWxTY29yZSA+IHByZXZCZXN0U2NvcmUpXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5uZXdCZXN0U2NvcmVUeHQuc2hvdyhmaW5hbFNjb3JlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHNjZW5lLnR3ZWVucy5hZGRDb3VudGVyKHR3TGlzdC5zaGlmdCgpKTtcclxuICAgIH0sXHJcbiAgICBzaG93OiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgICAgIGRhdGEgJiYgdGhpcy5zZXRUeHREYXRhKGRhdGEpO1xyXG4gICAgICAgIHRoaXMubGF5ZXIuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgICAgICByZXR1cm4gdGhpcztcclxuICAgIH0sXHJcbiAgICBoaWRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdGhpcy5sYXllci5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLm5ld0Jlc3RTY29yZVR4dC5oaWRlKCk7XHJcbiAgICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9LFxyXG4gICAgc2V0VHh0RGF0YTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xyXG4gICAgICAgIGNvbnN0IHsgdGl0bGUsIGJvbnVzVGltZSwgc2NvcmUsIGZpbmFsU2NvcmUgfSA9IHRoaXMuZGF0YTtcclxuICAgICAgICB0aGlzLmxheWVyLnRpdGxlVHh0LnNldFRleHQodGl0bGUpO1xyXG4gICAgICAgIHRoaXMubGF5ZXIudGltZVR4dC5zZXRUZXh0KGJvbnVzVGltZSk7XHJcbiAgICAgICAgdGhpcy5sYXllci5zY29yZVR4dC5zZXRUZXh0KHNjb3JlKTtcclxuICAgIH0sXHJcbn07XHJcbmNvbnN0IEluaXRHYW1lT3ZlciA9ICgpID0+IHtcclxuICAgIEdhbWVPdmVyLnNldFR4dERhdGEoe1xyXG4gICAgICAgIHRpdGxlOiAnVGltZSBPdmVyJyxcclxuICAgICAgICBib251c1RpbWU6IDAsXHJcbiAgICAgICAgc2NvcmU6IDAsXHJcbiAgICAgICAgZmluYWxTY29yZTogMFxyXG4gICAgfSk7XHJcbiAgICBHYW1lT3Zlci5oaWRlKCk7XHJcbiAgICBHYW1lT3Zlci5vdmVyVHh0LnNldFZpc2libGUoZmFsc2UpO1xyXG59O1xyXG5jb25zdCBDb250ZXh0VHh0R2FwSCA9IFZpZXcuaCAvIDE4O1xyXG5jb25zdCBCdG5HYXBXID0gVmlldy53IC8gNjtcclxuY29uc3QgQ3JlYXRlR2FtZU92ZXIgPSAoc2NlbmUsIHRoZW1lSWR4KSA9PiB7XHJcbiAgICBjb25zdCB0aGVtZUNvbG9yTGlzdCA9IFsnR3JlZW4nLCAnQnJvd24nLCAnQmx1ZSddO1xyXG4gICAgY29uc3QgY29sb3IgPSB0aGVtZUNvbG9yTGlzdFt0aGVtZUlkeF07XHJcbiAgICBHYW1lT3Zlci5vdmVyVHh0ID0gc2NlbmUuYWRkLnRleHQoVmlldy5jZW50ZXJYLCBWaWV3LmNlbnRlclksICcnKS5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgIEdhbWVPdmVyLmxheWVyID0gc2NlbmUuYWRkLmNvbnRhaW5lcihWaWV3LmNlbnRlclgsIFZpZXcuY2VudGVyWSk7XHJcbiAgICBjb25zdCBiZyA9IHNjZW5lLmFkZC5pbWFnZSgwLCAwLCAnYmxhY2tTY3JlZW4nKTtcclxuICAgIGJnLnNldERpc3BsYXlTaXplKFZpZXcudywgVmlldy5oKTtcclxuICAgIGJnLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICBiZy5zZXRBbHBoYSgwLjQpO1xyXG4gICAgY29uc3QgY29udGV4dCA9IHNjZW5lLmFkZC5pbWFnZSgwLCAwLCAncGFuZWwnICsgY29sb3IpO1xyXG4gICAgY29udGV4dC5zZXREaXNwbGF5U2l6ZShWaWV3LncgLSBDb250ZXh0TWFyZ2luVywgVmlldy5oIC0gQ29udGV4dE1hcmdpbkgpO1xyXG4gICAgY29uc3QgdGl0bGVCZyA9IHNjZW5lLmFkZC5pbWFnZSgwLCAtVmlldy5oIC8gNCwgJ2J0bicgKyBjb2xvcikuc2V0U2NhbGUoMS44KTtcclxuICAgIGNvbnN0IHRpdGxlID0gc2NlbmUuYWRkLnRleHQodGl0bGVCZy54LCB0aXRsZUJnLnksICdHYW1lIE92ZXInKTtcclxuICAgIEdhbWVPdmVyLmxheWVyLnRpdGxlVHh0ID0gdGl0bGU7XHJcbiAgICBjb25zdCBib251c1RpbWUgPSBzY2VuZS5hZGQudGV4dCgwLCAtQ29udGV4dFR4dEdhcEgsICdCb251cyBUaW1lJyk7XHJcbiAgICBjb25zdCBib251c1RpbWVUeHQgPSBzY2VuZS5hZGQudGV4dCgwLCBib251c1RpbWUueSArIENvbnRleHRUeHRHYXBILCAnMCcpO1xyXG4gICAgR2FtZU92ZXIubGF5ZXIudGltZVR4dCA9IGJvbnVzVGltZVR4dDtcclxuICAgIGNvbnN0IHNjb3JlID0gc2NlbmUuYWRkLnRleHQoMCwgQ29udGV4dFR4dEdhcEgsICdTY29yZScpO1xyXG4gICAgY29uc3Qgc2NvcmVUeHQgPSBzY2VuZS5hZGQudGV4dCgwLCBzY29yZS55ICsgQ29udGV4dFR4dEdhcEgsICdTY29yZScpO1xyXG4gICAgR2FtZU92ZXIubGF5ZXIuc2NvcmVUeHQgPSBzY29yZVR4dDtcclxuICAgIFtHYW1lT3Zlci5vdmVyVHh0LCB0aXRsZSwgYm9udXNUaW1lLCBib251c1RpbWVUeHQsIHNjb3JlLCBzY29yZVR4dF0ubWFwKChlbGUpID0+IHtcclxuICAgICAgICBTZXRGb250MkNvbW1vbkNvbnRleHRTdHlsZShlbGUpO1xyXG4gICAgfSk7XHJcbiAgICBHYW1lT3Zlci5vdmVyVHh0LnNldEZvbnRTaXplKFR4dE92ZXJIZWFkU2l6ZSk7XHJcbiAgICB0aXRsZS5zZXRGb250U2l6ZShUeHRUaXRsZUhlYWRTaXplKTtcclxuICAgIGNvbnN0IHRpdGxlQnRuID0gc2NlbmUuYWRkLmltYWdlKC1CdG5HYXBXLCBWaWV3LmggLyA0LCAnb3ZlckJ0blVwJyArIGNvbG9yKS5zZXRJbnRlcmFjdGl2ZSgpLnNldFNjYWxlKDIpO1xyXG4gICAgY29uc3QgdGl0bGVCdG5JbWcgPSBzY2VuZS5hZGQuaW1hZ2UodGl0bGVCdG4ueCwgdGl0bGVCdG4ueSAtIDQsICdvdmVyQmFjaycpLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICBjb25zdCB0aXRsZUZ1bmNEb3duID0gKCkgPT4ge1xyXG4gICAgICAgIHRpdGxlQnRuLnNldFRleHR1cmUoJ292ZXJCdG5Eb3duJyArIGNvbG9yKTtcclxuICAgICAgICB0aXRsZUJ0bkltZy5zZXRQb3NpdGlvbih0aXRsZUJ0bkltZy54LCB0aXRsZUJ0bkltZy55ICsgNCk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgdGl0bGVGdW5jVXAgPSAoKSA9PiB7XHJcbiAgICAgICAgdGl0bGVCdG4uc2V0VGV4dHVyZSgnb3ZlckJ0blVwJyArIGNvbG9yKTtcclxuICAgICAgICB0aXRsZUJ0bkltZy5zZXRQb3NpdGlvbih0aXRsZUJ0bkltZy54LCB0aXRsZUJ0bkltZy55IC0gNCk7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnBsYXlTZngoJ2dlYXJBbmltJyk7XHJcbiAgICAgICAgU3RvcEdhbWUoc2NlbmUpO1xyXG4gICAgICAgIFN0YXJ0VGl0bGUoc2NlbmUpO1xyXG4gICAgfTtcclxuICAgIGNvbnN0IHRpdGxlRnVuY091dCA9IChwdHIpID0+IHtcclxuICAgICAgICB0aXRsZUJ0bi5zZXRUZXh0dXJlKCdvdmVyQnRuVXAnICsgY29sb3IpO1xyXG4gICAgICAgIGlmIChwdHIuaXNEb3duKVxyXG4gICAgICAgICAgICB0aXRsZUJ0bkltZy5zZXRQb3NpdGlvbih0aXRsZUJ0bkltZy54LCB0aXRsZUJ0bkltZy55IC0gNCk7XHJcbiAgICB9O1xyXG4gICAgdGl0bGVCdG4ub24oJ3BvaW50ZXJkb3duJywgKCkgPT4geyB0aXRsZUZ1bmNEb3duKCk7IH0pO1xyXG4gICAgdGl0bGVCdG5JbWcub24oJ3BvaW50ZXJkb3duJywgKCkgPT4geyB0aXRsZUZ1bmNEb3duKCk7IH0pO1xyXG4gICAgdGl0bGVCdG4ub24oJ3BvaW50ZXJ1cCcsICgpID0+IHsgdGl0bGVGdW5jVXAoKTsgfSk7XHJcbiAgICB0aXRsZUJ0bkltZy5vbigncG9pbnRlcnVwJywgKCkgPT4geyB0aXRsZUZ1bmNVcCgpOyB9KTtcclxuICAgIHRpdGxlQnRuLm9uKCdwb2ludGVyb3V0JywgKHB0cikgPT4geyB0aXRsZUZ1bmNPdXQocHRyKTsgfSk7XHJcbiAgICB0aXRsZUJ0bkltZy5vbigncG9pbnRlcm91dCcsIChwdHIpID0+IHsgdGl0bGVGdW5jT3V0KHB0cik7IH0pO1xyXG4gICAgY29uc3QgcmV0cnlCdG4gPSBzY2VuZS5hZGQuaW1hZ2UoQnRuR2FwVywgdGl0bGVCdG4ueSwgJ292ZXJCdG5VcCcgKyBjb2xvcikuc2V0SW50ZXJhY3RpdmUoKS5zZXRTY2FsZSgyKTtcclxuICAgIGNvbnN0IHJldHJ5QnRuSW1nID0gc2NlbmUuYWRkLmltYWdlKHJldHJ5QnRuLngsIHJldHJ5QnRuLnkgLSA0LCAnb3ZlclJldHJ5Jykuc2V0SW50ZXJhY3RpdmUoKTtcclxuICAgIGNvbnN0IHJldHJ5RnVuY0Rvd24gPSAoKSA9PiB7XHJcbiAgICAgICAgcmV0cnlCdG4uc2V0VGV4dHVyZSgnb3ZlckJ0bkRvd24nICsgY29sb3IpO1xyXG4gICAgICAgIHJldHJ5QnRuSW1nLnNldFBvc2l0aW9uKHJldHJ5QnRuSW1nLngsIHJldHJ5QnRuSW1nLnkgKyA0KTtcclxuICAgIH07XHJcbiAgICBjb25zdCByZXRyeUZ1bmNVcCA9ICgpID0+IHtcclxuICAgICAgICByZXRyeUJ0bi5zZXRUZXh0dXJlKCdvdmVyQnRuVXAnICsgY29sb3IpO1xyXG4gICAgICAgIHJldHJ5QnRuSW1nLnNldFBvc2l0aW9uKHJldHJ5QnRuSW1nLngsIHJldHJ5QnRuSW1nLnkgLSA0KTtcclxuICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgnZ2VhckFuaW0nKTtcclxuICAgICAgICBSZXN0YXJ0R2FtZShzY2VuZSk7XHJcbiAgICB9O1xyXG4gICAgY29uc3QgcmV0cnlGdW5jT3V0ID0gKHB0cikgPT4ge1xyXG4gICAgICAgIHJldHJ5QnRuLnNldFRleHR1cmUoJ292ZXJCdG5VcCcgKyBjb2xvcik7XHJcbiAgICAgICAgaWYgKHB0ci5pc0Rvd24pXHJcbiAgICAgICAgICAgIHJldHJ5QnRuSW1nLnNldFBvc2l0aW9uKHJldHJ5QnRuSW1nLngsIHJldHJ5QnRuSW1nLnkgLSA0KTtcclxuICAgIH07XHJcbiAgICByZXRyeUJ0bi5vbigncG9pbnRlcmRvd24nLCAoKSA9PiB7IHJldHJ5RnVuY0Rvd24oKTsgfSk7XHJcbiAgICByZXRyeUJ0bkltZy5vbigncG9pbnRlcmRvd24nLCAoKSA9PiB7IHJldHJ5RnVuY0Rvd24oKTsgfSk7XHJcbiAgICByZXRyeUJ0bi5vbigncG9pbnRlcnVwJywgKCkgPT4geyByZXRyeUZ1bmNVcCgpOyB9KTtcclxuICAgIHJldHJ5QnRuSW1nLm9uKCdwb2ludGVydXAnLCAoKSA9PiB7IHJldHJ5RnVuY1VwKCk7IH0pO1xyXG4gICAgcmV0cnlCdG4ub24oJ3BvaW50ZXJvdXQnLCAocHRyKSA9PiB7IHJldHJ5RnVuY091dChwdHIpOyB9KTtcclxuICAgIHJldHJ5QnRuSW1nLm9uKCdwb2ludGVyb3V0JywgKHB0cikgPT4geyByZXRyeUZ1bmNPdXQocHRyKTsgfSk7XHJcbiAgICBHYW1lT3Zlci5sYXllci5hZGQoW1xyXG4gICAgICAgIGJnLFxyXG4gICAgICAgIGNvbnRleHQsXHJcbiAgICAgICAgdGl0bGVCZywgdGl0bGUsXHJcbiAgICAgICAgYm9udXNUaW1lLCBib251c1RpbWVUeHQsXHJcbiAgICAgICAgc2NvcmUsIHNjb3JlVHh0LFxyXG4gICAgICAgIHRpdGxlQnRuLCB0aXRsZUJ0bkltZyxcclxuICAgICAgICByZXRyeUJ0biwgcmV0cnlCdG5JbWcsXHJcbiAgICBdKTtcclxuICAgIEdhbWVPdmVyLm5ld0Jlc3RTY29yZUJnID0gc2NlbmUuYWRkLmltYWdlKFZpZXcuY2VudGVyWCwgVmlldy5jZW50ZXJZIC0gVmlldy5oIC8gNCwgJ2J0bicgKyBjb2xvcik7XHJcbiAgICBHYW1lT3Zlci5uZXdCZXN0U2NvcmVCZy5zZXRTY2FsZShHYW1lT3Zlci5uZXdCZXN0U2NvcmVCZ1NjYWxlVywgR2FtZU92ZXIubmV3QmVzdFNjb3JlQmdTY2FsZUgpO1xyXG4gICAgR2FtZU92ZXIubmV3QmVzdFNjb3JlVHh0ID0gc2NlbmUuYWRkLnRleHQoR2FtZU92ZXIubmV3QmVzdFNjb3JlQmcueCwgR2FtZU92ZXIubmV3QmVzdFNjb3JlQmcueSAtIDYsICcgICAgICBOZXdcXG5CZXN0IFNjb3JlIScpO1xyXG4gICAgU2V0Rm9udDJDb21tb25Db250ZXh0U3R5bGUoR2FtZU92ZXIubmV3QmVzdFNjb3JlVHh0KTtcclxuICAgIEdhbWVPdmVyLm5ld0Jlc3RTY29yZVR4dC5zZXRGb250U2l6ZShUeHRUaXRsZUhlYWRTaXplKTtcclxuICAgIEdhbWVPdmVyLm5ld0Jlc3RTY29yZVR4dC5zZXRGb250RmFtaWx5KCdBcmlhbCBCbGFjaycpO1xyXG4gICAgR2FtZU92ZXIubmV3QmVzdFNjb3JlVHh0LnNob3cgPSAoKSA9PiB7XHJcbiAgICAgICAgR2FtZU92ZXIubmV3QmVzdFNjb3JlQmcuc2V0U2NhbGUoMC4xICogR2FtZU92ZXIubmV3QmVzdFNjb3JlQmdTY2FsZVcsIDAuMSAqIEdhbWVPdmVyLm5ld0Jlc3RTY29yZUJnU2NhbGVIKTtcclxuICAgICAgICBHYW1lT3Zlci5uZXdCZXN0U2NvcmVUeHQuc2V0U2NhbGUoMC4xKTtcclxuICAgICAgICBHYW1lT3Zlci5uZXdCZXN0U2NvcmVCZy5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgIEdhbWVPdmVyLm5ld0Jlc3RTY29yZVR4dC5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgIC8vIEdhbWVBdWRpby5wbGF5U2Z4KCdnZWFyQW5pbScpO1xyXG4gICAgICAgIHNjZW5lLnR3ZWVucy5hZGRDb3VudGVyKHtcclxuICAgICAgICAgICAgZnJvbTogMC4xLCB0bzogMSwgZHVyYXRpb246IDgwMCwgZWFzZTogJ0JhY2suZWFzZUluT3V0JyxcclxuICAgICAgICAgICAgb25VcGRhdGU6ICh0dywgdHdEYXRhKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB2YWx1ZSA9IHR3RGF0YS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIEdhbWVPdmVyLm5ld0Jlc3RTY29yZUJnLnNldFNjYWxlKHZhbHVlICogR2FtZU92ZXIubmV3QmVzdFNjb3JlQmdTY2FsZVcsIHZhbHVlICogR2FtZU92ZXIubmV3QmVzdFNjb3JlQmdTY2FsZUgpO1xyXG4gICAgICAgICAgICAgICAgR2FtZU92ZXIubmV3QmVzdFNjb3JlVHh0LnNldFNjYWxlKHZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgRWZ4LmFuaW1OZXdCZXN0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcbiAgICBHYW1lT3Zlci5uZXdCZXN0U2NvcmVUeHQuaGlkZSA9ICgpID0+IHtcclxuICAgICAgICBHYW1lT3Zlci5uZXdCZXN0U2NvcmVCZy5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICBHYW1lT3Zlci5uZXdCZXN0U2NvcmVCZy5zZXRTY2FsZSgwLjEgKiBHYW1lT3Zlci5uZXdCZXN0U2NvcmVCZ1NjYWxlVywgMC4xICogR2FtZU92ZXIubmV3QmVzdFNjb3JlQmdTY2FsZUgpO1xyXG4gICAgICAgIEdhbWVPdmVyLm5ld0Jlc3RTY29yZVR4dC5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICBHYW1lT3Zlci5uZXdCZXN0U2NvcmVUeHQuc2V0U2NhbGUoMSk7XHJcbiAgICB9O1xyXG4gICAgR2FtZU92ZXIubmV3QmVzdFNjb3JlVHh0LmhpZGUoKTtcclxuICAgIFNldERlcHRoKEdhbWVPdmVyLm92ZXJUeHQsICd0eHQnKTtcclxuICAgIFNldERlcHRoKEdhbWVPdmVyLmxheWVyLCAnZ2FtZU92ZXInKTtcclxuICAgIFNldERlcHRoKEdhbWVPdmVyLm5ld0Jlc3RTY29yZUJnLCAnbmV3QmVzdCcpO1xyXG4gICAgU2V0RGVwdGgoR2FtZU92ZXIubmV3QmVzdFNjb3JlVHh0LCAnbmV3QmVzdCcpO1xyXG4gICAgSW5pdEdhbWVPdmVyKCk7XHJcbiAgICByZXR1cm4gR2FtZU92ZXI7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVPdmVyO1xyXG5leHBvcnQgeyBJbml0R2FtZU92ZXIsIENyZWF0ZUdhbWVPdmVyIH07XHJcbiIsImltcG9ydCB7IEdldFJuZEludCB9IGZyb20gJ0BzcmMvdXRpbHMvbWF0aCc7XHJcbmltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQHNyYy91c2VyU2V0dGluZ1wiO1xyXG5jb25zdCBSbmRDaXJjbGVJbWdUZXh0dXJlID0gWydibHVlQmFsbCcsICdncmVlbkJhbGwnLCAnYnJvd25CYWxsJ107XHJcbmNvbnN0IEdldENpcmNsZVNoYXBlID0gKCkgPT4ge1xyXG4gICAgY29uc3QgUmFkaXVzVmFsdWUgPSA2MDtcclxuICAgIGNvbnN0IFJhZGl1cyA9IFZpZXcuY2FsY1JhdGlvKFJhZGl1c1ZhbHVlKTtcclxuICAgIGxldCBiRGF0YSA9IHt9O1xyXG4gICAgcmV0dXJuIHtcclxuICAgICAgICBoaXRBcmVhOiBuZXcgUGhhc2VyLkdlb20uQ2lyY2xlKFJhZGl1cyAvIDIsIFJhZGl1cyAvIDIsIFJhZGl1cyksXHJcbiAgICAgICAgYkRhdGE6IGJEYXRhLFxyXG4gICAgICAgIGNhbGxiYWNrOiBQaGFzZXIuR2VvbS5DaXJjbGUuQ29udGFpbnMsXHJcbiAgICAgICAgc2NvcmU6IChSYWRpdXNWYWx1ZSAqKiAyKSAqIDMgLyAxMDAsXHJcbiAgICAgICAgYm9keUNvbmZpZzoge1xyXG4gICAgICAgICAgICB0eXBlOiAnY2lyY2xlJyxcclxuICAgICAgICAgICAgcmFkaXVzOiBSYWRpdXMsXHJcbiAgICAgICAgICAgIG9mZnNldDogeyB4OiBSYWRpdXMgLyAyLCB5OiBSYWRpdXMgLyAyIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGltZ1RleHR1cmU6IFJuZENpcmNsZUltZ1RleHR1cmVbR2V0Um5kSW50KDAsIFJuZENpcmNsZUltZ1RleHR1cmUubGVuZ3RoKV0sXHJcbiAgICAgICAgc2V0SW1nRGlzcGxheVNpemU6IGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICBibG9jay5nZXRTaGFwZUltZygpLnNldERpc3BsYXlTaXplKFJhZGl1cyAqIDIsIFJhZGl1cyAqIDIpO1xyXG4gICAgICAgICAgICBibG9jay5nZXRQaHlzaWNzQ29uKCkuc2V0Q2lyY2xlKFJhZGl1cyk7XHJcbiAgICAgICAgICAgIHJldHVybiBibG9jaztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBHZXRDaXJjbGVTaGFwZTtcclxuZXhwb3J0IHsgUm5kQ2lyY2xlSW1nVGV4dHVyZSB9O1xyXG4iLCJpbXBvcnQgeyBHZXRSbmRJbnQgfSBmcm9tICdAc3JjL3V0aWxzL21hdGgnO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBzcmMvdXNlclNldHRpbmdcIjtcclxuY29uc3QgUm5kUmVjdEltZ1RleHR1cmUgPSBbJ2JsdWVSZWN0JywgJ2dyZWVuUmVjdCcsICdicm93blJlY3QnXTtcclxuY29uc3QgR2V0UmVjdGFuZ2xlU2hhcGUgPSAoKSA9PiB7XHJcbiAgICBjb25zdCBTaG9ydFNpZGVWYWx1ZSA9IDEwMDtcclxuICAgIGNvbnN0IExvbmdTaWRlVmFsdWUgPSBTaG9ydFNpZGVWYWx1ZSArIFNob3J0U2lkZVZhbHVlIC8gMjtcclxuICAgIGNvbnN0IFNob3J0U2lkZSA9IFZpZXcuY2FsY1JhdGlvKFNob3J0U2lkZVZhbHVlKTtcclxuICAgIGNvbnN0IExvbmdTaWRlID0gVmlldy5jYWxjUmF0aW8oTG9uZ1NpZGVWYWx1ZSk7XHJcbiAgICBsZXQgYkRhdGEgPSB7fTtcclxuICAgIHJldHVybiB7XHJcbiAgICAgICAgaGl0QXJlYTogbmV3IFBoYXNlci5HZW9tLlJlY3RhbmdsZShTaG9ydFNpZGUgLyAyLCBMb25nU2lkZSAvIDIsIFNob3J0U2lkZSwgTG9uZ1NpZGUpLFxyXG4gICAgICAgIGJEYXRhOiBiRGF0YSxcclxuICAgICAgICBjYWxsYmFjazogUGhhc2VyLkdlb20uUmVjdGFuZ2xlLkNvbnRhaW5zLFxyXG4gICAgICAgIHNjb3JlOiBTaG9ydFNpZGVWYWx1ZSAqIExvbmdTaWRlVmFsdWUgLyAxMDAsXHJcbiAgICAgICAgYm9keUNvbmZpZzoge1xyXG4gICAgICAgICAgICB0eXBlOiAncmVjdGFuZ2xlJyxcclxuICAgICAgICAgICAgd2lkdGg6IFNob3J0U2lkZSxcclxuICAgICAgICAgICAgaGVpZ2h0OiBMb25nU2lkZSxcclxuICAgICAgICAgICAgb2Zmc2V0OiB7IHg6IFNob3J0U2lkZSAvIDIsIHk6IExvbmdTaWRlIC8gMiB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbWdUZXh0dXJlOiBSbmRSZWN0SW1nVGV4dHVyZVtHZXRSbmRJbnQoMCwgUm5kUmVjdEltZ1RleHR1cmUubGVuZ3RoKV0sXHJcbiAgICAgICAgc2V0SW1nRGlzcGxheVNpemU6IGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgICAgICBibG9jay5nZXRTaGFwZUltZygpLnNldERpc3BsYXlTaXplKFNob3J0U2lkZSwgTG9uZ1NpZGUpO1xyXG4gICAgICAgICAgICBibG9jay5nZXRQaHlzaWNzQ29uKCkuc2V0U2l6ZShTaG9ydFNpZGUsIExvbmdTaWRlKTtcclxuICAgICAgICAgICAgLy8gYmxvY2suaW5wdXQgJiYgYmxvY2suaW5wdXQuaGl0QXJlYS5zZXRUbyhTaG9ydFNpZGUsIExvbmdTaWRlKTtcclxuICAgICAgICAgICAgcmV0dXJuIGJsb2NrO1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEdldFJlY3RhbmdsZVNoYXBlO1xyXG5leHBvcnQgeyBSbmRSZWN0SW1nVGV4dHVyZSB9O1xyXG4iLCJpbXBvcnQgeyBHZXRSbmRJbnQgfSBmcm9tICdAc3JjL3V0aWxzL21hdGgnO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBzcmMvdXNlclNldHRpbmdcIjtcclxuY29uc3QgUm5kU3F1YXJlSW1nVGV4dHVyZSA9IFsnYmx1ZVNxdWFyZScsICdncmVlblNxdWFyZScsICdicm93blNxdWFyZSddO1xyXG5jb25zdCBHZXRTcXVhcmVTaGFwZSA9ICgpID0+IHtcclxuICAgIGNvbnN0IFNpZGVWYWx1ZSA9IDEwMDtcclxuICAgIGNvbnN0IFNpZGUgPSBWaWV3LmNhbGNSYXRpbyhTaWRlVmFsdWUpO1xyXG4gICAgbGV0IGJEYXRhID0ge307XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIGhpdEFyZWE6IG5ldyBQaGFzZXIuR2VvbS5SZWN0YW5nbGUoU2lkZSAvIDIsIFNpZGUgLyAyLCBTaWRlLCBTaWRlKSxcclxuICAgICAgICBiRGF0YTogYkRhdGEsXHJcbiAgICAgICAgY2FsbGJhY2s6IFBoYXNlci5HZW9tLlJlY3RhbmdsZS5Db250YWlucyxcclxuICAgICAgICBzY29yZTogU2lkZVZhbHVlICogU2lkZVZhbHVlIC8gMTAwLFxyXG4gICAgICAgIGJvZHlDb25maWc6IHtcclxuICAgICAgICAgICAgdHlwZTogJ3JlY3RhbmdsZScsXHJcbiAgICAgICAgICAgIHdpZHRoOiBTaWRlLFxyXG4gICAgICAgICAgICBoZWlnaHQ6IFNpZGUsXHJcbiAgICAgICAgICAgIG9mZnNldDogeyB4OiBTaWRlIC8gMiwgeTogU2lkZSAvIDIgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW1nVGV4dHVyZTogUm5kU3F1YXJlSW1nVGV4dHVyZVtHZXRSbmRJbnQoMCwgUm5kU3F1YXJlSW1nVGV4dHVyZS5sZW5ndGgpXSxcclxuICAgICAgICBzZXRJbWdEaXNwbGF5U2l6ZTogZnVuY3Rpb24gKGJsb2NrKSB7XHJcbiAgICAgICAgICAgIGJsb2NrLmdldFNoYXBlSW1nKCkuc2V0RGlzcGxheVNpemUoU2lkZSwgU2lkZSk7XHJcbiAgICAgICAgICAgIGJsb2NrLmdldFBoeXNpY3NDb24oKS5zZXRTaXplKFNpZGUsIFNpZGUpO1xyXG4gICAgICAgICAgICAvLyBibG9jay5pbnB1dCAmJiBibG9jay5pbnB1dC5oaXRBcmVhLnNldFRvKFNpZGUsIFNpZGUpO1xyXG4gICAgICAgICAgICByZXR1cm4gYmxvY2s7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgR2V0U3F1YXJlU2hhcGU7XHJcbmV4cG9ydCB7IFJuZFNxdWFyZUltZ1RleHR1cmUgfTtcclxuIiwiaW1wb3J0IHsgR2V0Um5kRWxlRnJvbUFycmF5IH0gZnJvbSAnQHNyYy91dGlscy9ldGMnO1xyXG5pbXBvcnQgR2V0Q2lyY2xlU2hhcGUgZnJvbSAnLi9jaXJjbGUnO1xyXG5pbXBvcnQgR2V0UmVjdGFuZ2xlU2hhcGUgZnJvbSAnLi9yZWN0YW5nbGUnO1xyXG5pbXBvcnQgR2V0U3F1YXJlU2hhcGUgZnJvbSAnLi9zcXVhcmUnO1xyXG5jb25zdCBTaGFwZVR5cGVOYW1lTGlzdCA9IFsnYmFsbCcsICdyZWN0JywgJ3NxdWFyZScsXTtcclxuY29uc3QgU2hhcGVUeXBlUHJvcGVydGllc0xpc3QgPSBbXHJcbiAgICBHZXRDaXJjbGVTaGFwZSgpLCBHZXRSZWN0YW5nbGVTaGFwZSgpLCBHZXRTcXVhcmVTaGFwZSgpLFxyXG5dO1xyXG5jb25zdCBDb21tb25QdHJFdnQgPSB7XHJcbiAgICBwdHJEb3duOiBmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnY29tbW9uIHB0ciBkb3duJyk7XHJcbiAgICB9LFxyXG4gICAgcHRyVXA6IGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdjb21tb24gcHRyIHVwJyk7XHJcbiAgICB9LFxyXG4gICAgcHRyT3V0OiBmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICBjb25zb2xlLmxvZygnY29tbW9uIHB0ciBvdXQnKTtcclxuICAgIH0sXHJcbn07XHJcbmNvbnN0IFB0ckV2dExpc3QgPSBbJ3B0ckRvd24nLCAncHRyVXAnLCAnZHJhZycsICdkcmFnRW5kJ107XHJcbmNvbnN0IFNoYXBlVHlwZUxpc3QgPSBTaGFwZVR5cGVOYW1lTGlzdC5tYXAoKGVsZSwgaWR4KSA9PiB7XHJcbiAgICB2YXIgX2E7XHJcbiAgICAvLyBzZXR0aW5nIGJsb2NrIGRhdGEgd2l0aCBjb21tb24gZXZ0XHJcbiAgICBsZXQgYkRhdGEgPSAoX2EgPSBTaGFwZVR5cGVQcm9wZXJ0aWVzTGlzdFtpZHhdKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuYkRhdGE7XHJcbiAgICBpZiAoIWJEYXRhKVxyXG4gICAgICAgIGJEYXRhID0gT2JqZWN0LmFzc2lnbih7fSwgQ29tbW9uUHRyRXZ0KTtcclxuICAgIGVsc2Uge1xyXG4gICAgICAgIFB0ckV2dExpc3QubWFwKChwdHJFdnQpID0+IHtcclxuICAgICAgICAgICAgbGV0IHRtcFByZXZGdW5jID0gYkRhdGFbcHRyRXZ0XTtcclxuICAgICAgICAgICAgaWYgKHRtcFByZXZGdW5jKSB7XHJcbiAgICAgICAgICAgICAgICBTaGFwZVR5cGVQcm9wZXJ0aWVzTGlzdFtpZHhdLmJEYXRhW3B0ckV2dF0gPSAoYmxvY2spID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBDb21tb25QdHJFdnRbcHRyRXZ0XShibG9jayk7XHJcbiAgICAgICAgICAgICAgICAgICAgdG1wUHJldkZ1bmMoYmxvY2spO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIE9iamVjdC5hc3NpZ24oeyB0eXBlTmFtZTogZWxlIH0sIFNoYXBlVHlwZVByb3BlcnRpZXNMaXN0W2lkeF0pO1xyXG59KTtcclxuY29uc3QgU2hhcGVTeXN0ZW0gPSB7XHJcbiAgICBnZXRDZXJ0YWluU2hhcGU6IGZ1bmN0aW9uIChzaGFwZVR5cGVOYW1lKSB7XHJcbiAgICAgICAgcmV0dXJuIFNoYXBlVHlwZUxpc3QuZmluZCgoZWxlKSA9PiBlbGUudHlwZU5hbWUgPT09IHNoYXBlVHlwZU5hbWUpO1xyXG4gICAgfSxcclxuICAgIGdldFJuZFNoYXBlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBHZXRSbmRFbGVGcm9tQXJyYXkoU2hhcGVUeXBlTGlzdCk7IH0sXHJcbn07XHJcbmNvbnN0IFNldEJsb2NrU2hhcGUgPSAoYmxvY2ssIHR5cGVOYW1lKSA9PiB7XHJcbiAgICBpZiAoIXR5cGVOYW1lKVxyXG4gICAgICAgIGJsb2NrLnNldFNoYXBlKFNoYXBlU3lzdGVtLmdldFJuZFNoYXBlKCkpO1xyXG4gICAgZWxzZVxyXG4gICAgICAgIGJsb2NrLnNldFNoYXBlKFNoYXBlU3lzdGVtLmdldENlcnRhaW5TaGFwZSh0eXBlTmFtZSkpO1xyXG4gICAgYmxvY2suc2V0U2hhcGVOYW1lKGJsb2NrLmdldFNoYXBlKCkudHlwZU5hbWUpO1xyXG4gICAgYmxvY2suZ2V0UGh5c2ljc0NvbigpLnNldEJvZHkoYmxvY2suZ2V0U2hhcGUoKS5ib2R5Q29uZmlnKTtcclxuICAgIGJsb2NrLmdldFNoYXBlSW1nKCkuc2V0VGV4dHVyZShibG9jay5nZXRTaGFwZSgpLmltZ1RleHR1cmUpO1xyXG4gICAgYmxvY2suZ2V0U2hhcGUoKS5zZXRJbWdEaXNwbGF5U2l6ZShibG9jayk7XHJcbiAgICBpZiAoYmxvY2suZ2V0U2hhcGUoKS5iRGF0YSlcclxuICAgICAgICBibG9jay5hZGRCbG9ja0RhdGEoYmxvY2suZ2V0U2hhcGUoKS5iRGF0YSk7XHJcbiAgICByZXR1cm4gYmxvY2s7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IFNoYXBlU3lzdGVtO1xyXG5leHBvcnQgeyBDb21tb25QdHJFdnQsIFNldEJsb2NrU2hhcGUgfTtcclxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BzcmMvdXNlclNldHRpbmcnO1xyXG5pbXBvcnQgeyBHZXRSbmRJbnQsIEdldFJuZE51bSB9IGZyb20gJ0BzcmMvdXRpbHMvbWF0aCc7XHJcbmltcG9ydCBCYXNpY0Jsb2NrLCB7IERlYXRoQmxvY2ssIFNwYXduQmxvY2ssIFVwZGF0ZUJsb2NrIH0gZnJvbSAnLi9iYXNpYyc7XHJcbmltcG9ydCB7IEJsb2NrVW5pcXVlUHJvcGVydGllcywgU2V0MlR5cGVCbG9jayB9IGZyb20gJy4vdHlwZSc7XHJcbmltcG9ydCBHYW1lT3ZlciBmcm9tICcuLi91aS9nYW1lb3Zlcic7XHJcbmltcG9ydCBTY29yZSBmcm9tICcuLi91aS9zY29yZSc7XHJcbmltcG9ydCBHYW1lVGltZSBmcm9tICcuLi91aS90aW1lJztcclxuaW1wb3J0IEVmeCBmcm9tICcuLi9lZngnO1xyXG5pbXBvcnQgeyBTZXRCbG9ja1NoYXBlIH0gZnJvbSAnLi9zaGFwZSc7XHJcbmltcG9ydCBHYW1lQXVkaW8gZnJvbSAnQHNyYy9zY2VuZXMvYXVkaW8nO1xyXG5jb25zdCBCbG9ja1N5c3RlbSA9IHtcclxuICAgIC8vIG1hbmFnZSBibG9jayBsaXN0XHJcbiAgICBvblNjcmVlbkxpc3Q6IFtdLFxyXG4gICAgc3RhbmRieUxpc3Q6IFtdLFxyXG4gICAgLy8gc3RhdGljIHBvc3Rpb24gb2YgYmxvY2tcclxuICAgIHN0YW5kYnlQb3NYOiAtNTAwLFxyXG4gICAgc3RhbmRieVBvc1k6IC01MDAsXHJcbiAgICBsZWZ0WDogMCxcclxuICAgIHJpZ2h0WDogVmlldy53LFxyXG4gICAgYm90dG9tWTogMCxcclxuICAgIHNwYXduWTogLTIwMCxcclxuICAgIGdldFJuZFNwYXduWDogZnVuY3Rpb24gKCkgeyByZXR1cm4gR2V0Um5kSW50KHRoaXMubGVmdFgsIHRoaXMucmlnaHRYKTsgfSxcclxuICAgIGdldFJuZEFuZ2xlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBHZXRSbmRJbnQoMCwgMzYwKTsgfSxcclxuICAgIC8vIGdhbWUgb3ZlciByZWxhdGVkIHByb3BlcnRpZXNcclxuICAgIG92ZXJMaW5lWTogMCxcclxuICAgIG92ZXJDbnQ6IDAsXHJcbiAgICBvdmVyQ250TWF4OiA4ICogMTAwMCxcclxuICAgIG92ZXJNYXhCbG9jazogOCxcclxuICAgIGlzR2FtZU92ZXI6IGZhbHNlLFxyXG4gICAgZ2V0SXNHYW1lT3ZlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pc0dhbWVPdmVyOyB9LFxyXG4gICAgc2V0SXNHYW1lT3ZlcjogZnVuY3Rpb24gKGlzT3ZlcikgeyByZXR1cm4gdGhpcy5pc0dhbWVPdmVyID0gaXNPdmVyOyB9LFxyXG4gICAgLy8gcmVzcG9uc2l2ZSBzcGF3bmluZyBibG9jayB0aW1lXHJcbiAgICBuZXh0U3Bhd25UaW1lOiAwLFxyXG4gICAgc3Bhd25EZWxheUJ5U2VjTGlzdDogWzgwMCwgOTUwLCAxMTAwLCAxMjUwLCAxNDAwLCAxNTUwXSxcclxuICAgIHNwYXduRGVsYXlCeVNlYzogMTgwMCxcclxufTtcclxuY29uc3QgSW5pdEJsb2NrU3lzdGVtID0gKCkgPT4ge1xyXG4gICAgUmVtb3ZlQWxsQmxvY2tPbkRpc3BsYXkoKTtcclxuICAgIEJsb2NrU3lzdGVtLnNldElzR2FtZU92ZXIoZmFsc2UpO1xyXG4gICAgQmxvY2tTeXN0ZW0ubmV4dFNwYXduVGltZSA9IEdhbWVUaW1lLmluaXQ7XHJcbiAgICBCbG9ja1N5c3RlbS5zcGF3bkRlbGF5QnlTZWMgPSBCbG9ja1N5c3RlbS5zcGF3bkRlbGF5QnlTZWNMaXN0WzVdO1xyXG59O1xyXG5jb25zdCBBZGRDZXJ0YWluQmxvY2sgPSAoc2NlbmUsIHR5cGVOYW1lKSA9PiB7XHJcbiAgICBsZXQgYmxvY2s7XHJcbiAgICAvLyBnZXQgYmxvY2sgZnJvbSBzdGFuZHkgbGlzdCBvciBjcmVhdGUgbmV3IG9uZVxyXG4gICAgaWYgKEJsb2NrU3lzdGVtLnN0YW5kYnlMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICBibG9jayA9IEJsb2NrU3lzdGVtLnN0YW5kYnlMaXN0LnNoaWZ0KCk7XHJcbiAgICAgICAgaWYgKCFibG9jay5zY2VuZSkgeyAvLyBpcyBibG9jayBzY2VuZSByZW1vdmVkP1xyXG4gICAgICAgICAgICBibG9jay5kZXN0cm95KCk7XHJcbiAgICAgICAgICAgIGJsb2NrID0gbmV3IEJhc2ljQmxvY2soc2NlbmUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2VcclxuICAgICAgICBibG9jayA9IG5ldyBCYXNpY0Jsb2NrKHNjZW5lKTtcclxuICAgIC8vIHNldCBibG9jayBzaGFwZSAmIHR5cGUsIHB1c2ggdG8gb24gc2NyZWVuIGxpc3QgJiBzcGF3blxyXG4gICAgU2V0QmxvY2tTaGFwZShibG9jayk7XHJcbiAgICBTZXQyVHlwZUJsb2NrKGJsb2NrLCB0eXBlTmFtZSk7XHJcbiAgICBCbG9ja1N5c3RlbS5vblNjcmVlbkxpc3QucHVzaChibG9jayk7XHJcbiAgICBTcGF3bkJsb2NrKGJsb2NrKTtcclxuICAgIHJldHVybiBibG9jaztcclxufTtcclxuY29uc3QgQWRkT2JzdGFjbGVCbG9jayA9IChibG9jaykgPT4ge1xyXG4gICAgYmxvY2suc2NlbmUuY2FtZXJhcy5tYWluLnNoYWtlKDIwMCwgMC4wMiwgdHJ1ZSk7XHJcbiAgICBHYW1lQXVkaW8ucGxheVNmeCgnc3Bhd25PYnN0YWNsZVNmeCcpO1xyXG4gICAgQWRkQ2VydGFpbkJsb2NrKGJsb2NrLnNjZW5lLCAnb2JzdGFjbGUnKTtcclxuICAgIHJldHVybiBibG9jaztcclxufTtcclxuY29uc3QgR2V0Um5kQmxvY2tUeXBlID0gKCkgPT4ge1xyXG4gICAgLy8gZ2V0IHJhbmRvbSBibG9jayB0eXBlIHZpYSBzcGF3biBjaGFuY2VcclxuICAgIGxldCBkaXN0cmlidXRpb25BcnIgPSBbXTtcclxuICAgIEJsb2NrVW5pcXVlUHJvcGVydGllcy5tYXAoKGVsZSkgPT4ge1xyXG4gICAgICAgIC8vIGVsZS5zcGF3bkNoYW5jZSA9IGVsZS5zcGF3bkNoYW5jZSAvIFNwYXduTWF4Q2hhbmNlO1xyXG4gICAgICAgIGlmIChlbGUuc3Bhd25DaGFuY2UgPT09IDApXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZS5zcGF3bkNoYW5jZTsgaSsrKSB7XHJcbiAgICAgICAgICAgIGRpc3RyaWJ1dGlvbkFyci5wdXNoKGVsZS50eXBlTmFtZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gZGlzdHJpYnV0aW9uQXJyW0dldFJuZEludCgwLCBkaXN0cmlidXRpb25BcnIubGVuZ3RoKV07XHJcbn07XHJcbmNvbnN0IEFkZFJuZEJsb2NrID0gKHNjZW5lKSA9PiB7XHJcbiAgICBjb25zdCBybmRUeXBlID0gR2V0Um5kQmxvY2tUeXBlKCk7XHJcbiAgICBBZGRDZXJ0YWluQmxvY2soc2NlbmUsIHJuZFR5cGUpO1xyXG59O1xyXG5jb25zdCBDbGVhckJsb2NrID0gKGJsb2NrLCBzY29yZSkgPT4ge1xyXG4gICAgaWYgKCFibG9jaylcclxuICAgICAgICByZXR1cm47XHJcbiAgICBsZXQgYmxvY2tTY29yZSA9IHNjb3JlID8gc2NvcmUgOiBibG9jay5nZXRTY29yZSgpO1xyXG4gICAgU2NvcmUuYWRkKGJsb2NrU2NvcmUpO1xyXG4gICAgRWZ4LmFuaW1TY29yZShibG9jaywgYmxvY2tTY29yZSk7XHJcbiAgICBjb25zdCB7IHZhbHVlLCBjaGFuY2UgfSA9IGJsb2NrLmdldFRpbWVJbmNyZWFzZSgpO1xyXG4gICAgaWYgKEdhbWVUaW1lLmN1cnIgPiBHYW1lVGltZS5sYXN0MTAgJiYgY2hhbmNlID4gR2V0Um5kTnVtKDAsIDEwMCkpIHtcclxuICAgICAgICBHYW1lVGltZS5pbmNyZWFzZVRpbWUodmFsdWUpO1xyXG4gICAgICAgIEVmeC5hbmltVGltZUluY3JlYXNlKGJsb2NrLCBjaGFuY2UsIHZhbHVlKTtcclxuICAgIH1cclxuICAgIFJlbW92ZUJsb2NrKGJsb2NrKTtcclxufTtcclxuY29uc3QgUmVtb3ZlQmxvY2sgPSAoYmxvY2spID0+IHtcclxuICAgIC8vIHJlbW92ZSBmcm9tIG9uU2NyZWVuTGlzdFxyXG4gICAgQmxvY2tTeXN0ZW0ub25TY3JlZW5MaXN0ID0gQmxvY2tTeXN0ZW0ub25TY3JlZW5MaXN0LmZpbHRlcihzY3JlZW5CbG9jayA9PiBzY3JlZW5CbG9jay5pZCAhPT0gYmxvY2suaWQpO1xyXG4gICAgaWYgKCFibG9jay5zY2VuZSkge1xyXG4gICAgICAgIGJsb2NrLmRlc3Ryb3koKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICAvLyBjaGNrIGlzIGFscmVhZHkgaW4gc3RhbmRieSBsaXN0XHJcbiAgICBpZiAoQmxvY2tTeXN0ZW0uc3RhbmRieUxpc3Quc29tZShzdGFuZGJ5QmxvY2sgPT4gc3RhbmRieUJsb2NrLmlkID09PSBibG9jay5pZCkpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgRGVhdGhCbG9jayhibG9jayk7XHJcbiAgICBibG9jay5zZXRQb3NpdGlvbihCbG9ja1N5c3RlbS5zdGFuZGJ5UG9zWCwgQmxvY2tTeXN0ZW0uc3RhbmRieVBvc1kpO1xyXG4gICAgQmxvY2tTeXN0ZW0uc3RhbmRieUxpc3QucHVzaChibG9jayk7XHJcbn07XHJcbmNvbnN0IFJlbW92ZUFsbEJsb2NrT25EaXNwbGF5ID0gKCkgPT4ge1xyXG4gICAgaWYgKCFCbG9ja1N5c3RlbS5vblNjcmVlbkxpc3QpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgQmxvY2tTeXN0ZW0ub25TY3JlZW5MaXN0Lm1hcCgoYmxvY2spID0+IHsgUmVtb3ZlQmxvY2soYmxvY2spOyB9KTtcclxuICAgIEJsb2NrU3lzdGVtLm9uU2NyZWVuTGlzdCA9IFtdO1xyXG4gICAgaWYgKCFCbG9ja1N5c3RlbS5zdGFuZGJ5TGlzdClcclxuICAgICAgICByZXR1cm47XHJcbiAgICBCbG9ja1N5c3RlbS5zdGFuZGJ5TGlzdCA9IEJsb2NrU3lzdGVtLnN0YW5kYnlMaXN0LmZpbHRlcigoc3RhbmRieUJsb2NrKSA9PiB7XHJcbiAgICAgICAgaWYgKCFzdGFuZGJ5QmxvY2suc2NlbmUpIHtcclxuICAgICAgICAgICAgc3RhbmRieUJsb2NrLmRlc3Ryb3koKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZVxyXG4gICAgICAgICAgICByZXR1cm4gc3RhbmRieUJsb2NrO1xyXG4gICAgfSk7XHJcbn07XHJcbmNvbnN0IFVwZGF0ZUJsb2NrQ2hja0lzR2FtZU92ZXIgPSAoc2NlbmUsIHRpbWUsIGRlbHRhKSA9PiB7XHJcbiAgICAvLyBjaGNrIGV2ZXJ5IGJsb2NrIHdoaWNoIGlzIGdhbWUgb3ZlciBib3JkZXIgbGluZVxyXG4gICAgY29uc3QgaXNPdmVyQm9yZGVyTGluZSA9IEJsb2NrU3lzdGVtLm9uU2NyZWVuTGlzdC5zb21lKChzY3JlZW5CbG9jaykgPT4ge1xyXG4gICAgICAgIGlmICghc2NyZWVuQmxvY2spXHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICByZXR1cm4gc2NyZWVuQmxvY2sueSA8IEJsb2NrU3lzdGVtLm92ZXJMaW5lWTtcclxuICAgIH0pO1xyXG4gICAgLy8gYmxvY2sgY291bnQgaXMgb3ZlciBtYXggJiBhdCBsZWFzdCBvbmUgYmxvY2sgY3Jvc3MgZ2FtZSBvdmVyIGJvcmRlciBsaW5lXHJcbiAgICBpZiAoaXNPdmVyQm9yZGVyTGluZSAmJiBCbG9ja1N5c3RlbS5vblNjcmVlbkxpc3QubGVuZ3RoID4gQmxvY2tTeXN0ZW0ub3Zlck1heEJsb2NrKSB7XHJcbiAgICAgICAgQmxvY2tTeXN0ZW0ub3ZlckNudCArPSBkZWx0YSAqIEdhbWVUaW1lLnRpbWVTY2FsZTtcclxuICAgICAgICAvLyBnYW1lIG92ZXIgY29uZGl0aW9uXHJcbiAgICAgICAgaWYgKEJsb2NrU3lzdGVtLm92ZXJDbnQgPiBCbG9ja1N5c3RlbS5vdmVyQ250TWF4KSB7XHJcbiAgICAgICAgICAgIEJsb2NrU3lzdGVtLm92ZXJDbnQgPSAwO1xyXG4gICAgICAgICAgICBCbG9ja1N5c3RlbS5zZXRJc0dhbWVPdmVyKHRydWUpO1xyXG4gICAgICAgICAgICBHYW1lT3Zlci5hbmltR2FtZU92ZXIoc2NlbmUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgIEJsb2NrU3lzdGVtLnNldElzR2FtZU92ZXIoZmFsc2UpO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgICAgLy8gaW5pdCBnYW1lIG92ZXIgd2FybmluZyBwcm9wZXJ0aWVzXHJcbiAgICAgICAgQmxvY2tTeXN0ZW0ub3ZlckNudCA9IDA7XHJcbiAgICAgICAgQmxvY2tTeXN0ZW0uc2V0SXNHYW1lT3ZlcihmYWxzZSk7XHJcbiAgICB9XHJcbn07XHJcbmNvbnN0IFVwZGF0ZVNwYXduQmxvY2tzID0gKHNjZW5lLCBkZWx0YSkgPT4ge1xyXG4gICAgLy8gZ2V0IGdhbWUgdGltZSAmIHRpbWVsaW5lIGlkeCBjYWxjdWxhdGVcclxuICAgIGNvbnN0IGdhbWVUaW1lQ3VyciA9IEdhbWVUaW1lLmdldEN1cnIoKTtcclxuICAgIGxldCB0aW1lbGluZUlkeCA9IHBhcnNlSW50KChnYW1lVGltZUN1cnIgLyAxMDAwIC8gMTApLnRvU3RyaW5nKCkpO1xyXG4gICAgaWYgKHRpbWVsaW5lSWR4IDwgMClcclxuICAgICAgICB0aW1lbGluZUlkeCA9IDA7XHJcbiAgICBpZiAodGltZWxpbmVJZHggPj0gQmxvY2tTeXN0ZW0uc3Bhd25EZWxheUJ5U2VjTGlzdC5sZW5ndGgpIHtcclxuICAgICAgICB0aW1lbGluZUlkeCA9IEJsb2NrU3lzdGVtLnNwYXduRGVsYXlCeVNlY0xpc3QubGVuZ3RoIC0gMTtcclxuICAgIH1cclxuICAgIC8vIGFkanVzdCByZXNwb25zaXZlIHNwYXduIGJsb2NrIHRpbWVcclxuICAgIEJsb2NrU3lzdGVtLnNwYXduRGVsYXlCeVNlYyA9IEJsb2NrU3lzdGVtLnNwYXduRGVsYXlCeVNlY0xpc3RbdGltZWxpbmVJZHhdO1xyXG4gICAgLy8gc3Bhd24gYmxvY2tcclxuICAgIEJsb2NrU3lzdGVtLm5leHRTcGF3blRpbWUgKz0gZGVsdGEgKiBHYW1lVGltZS50aW1lU2NhbGU7XHJcbiAgICBpZiAoQmxvY2tTeXN0ZW0ubmV4dFNwYXduVGltZSA+IEJsb2NrU3lzdGVtLnNwYXduRGVsYXlCeVNlYykge1xyXG4gICAgICAgIEJsb2NrU3lzdGVtLm5leHRTcGF3blRpbWUgPSAwO1xyXG4gICAgICAgIEFkZFJuZEJsb2NrKHNjZW5lKTtcclxuICAgIH1cclxuICAgIDtcclxufTtcclxuY29uc3QgVXBkYXRlQWxsQmxvY2tzID0gKHNjZW5lLCB0aW1lLCBkZWx0YSkgPT4ge1xyXG4gICAgaWYgKEJsb2NrU3lzdGVtLmdldElzR2FtZU92ZXIoKSlcclxuICAgICAgICByZXR1cm47XHJcbiAgICBVcGRhdGVCbG9ja0NoY2tJc0dhbWVPdmVyKHNjZW5lLCB0aW1lLCBkZWx0YSk7XHJcbiAgICBCbG9ja1N5c3RlbS5vblNjcmVlbkxpc3QubWFwKGJsb2NrID0+IFVwZGF0ZUJsb2NrKGJsb2NrLCB0aW1lLCBkZWx0YSkpO1xyXG4gICAgVXBkYXRlU3Bhd25CbG9ja3Moc2NlbmUsIGRlbHRhKTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgQmxvY2tTeXN0ZW07XHJcbmV4cG9ydCB7IEJhc2ljQmxvY2ssIEFkZENlcnRhaW5CbG9jaywgQWRkT2JzdGFjbGVCbG9jaywgR2V0Um5kQmxvY2tUeXBlLCBBZGRSbmRCbG9jaywgSW5pdEJsb2NrU3lzdGVtLCBDbGVhckJsb2NrLCBSZW1vdmVCbG9jaywgUmVtb3ZlQWxsQmxvY2tPbkRpc3BsYXksIFVwZGF0ZUJsb2NrQ2hja0lzR2FtZU92ZXIsIFVwZGF0ZUFsbEJsb2NrcywgVXBkYXRlU3Bhd25CbG9ja3MgfTtcclxuIiwiY29uc3QgQ29udGV4dExheWVyTWFyZ2luID0gMTIwO1xyXG5jb25zdCBTZXR0aW5nR2FwQ29udGV4dE1hcmdpbiA9IDUwO1xyXG5jb25zdCBTZXR0aW5nR2FwQ29udGV4dE1hcmdpbkxhcmdlciA9IDcwO1xyXG5jb25zdCBTZXR0aW5nQ29udGV4dE1hcmdpbiA9IDQwO1xyXG5jb25zdCBTZXR0aW5nVG9wQ29udGV4dE1hcmdpbiA9IDgwO1xyXG5leHBvcnQgeyBDb250ZXh0TGF5ZXJNYXJnaW4sIFNldHRpbmdHYXBDb250ZXh0TWFyZ2luLCBTZXR0aW5nR2FwQ29udGV4dE1hcmdpbkxhcmdlciwgU2V0dGluZ0NvbnRleHRNYXJnaW4sIFNldHRpbmdUb3BDb250ZXh0TWFyZ2luLCB9O1xyXG4iLCJpbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBzcmMvdXNlclNldHRpbmdcIjtcclxuaW1wb3J0IHsgQ29udGV4dExheWVyTWFyZ2luIH0gZnJvbSBcIi5cIjtcclxuaW1wb3J0IHsgU2V0RGVwdGggfSBmcm9tIFwiLi4vZGVwdGhcIjtcclxuY29uc3QgUG9wVXAgPSB7XHJcbiAgICBpc09wZW46IGZhbHNlLFxyXG4gICAgYm90dG9tTGF5ZXI6IG51bGwsXHJcbiAgICBjb250ZXh0TGF5ZXI6IG51bGwsXHJcbiAgICBleGl0QnRuOiBudWxsLFxyXG4gICAgc25kTGlzdDogW10sXHJcbiAgICBzaG93OiBmdW5jdGlvbiAoYmxvY2spIHtcclxuICAgICAgICB0aGlzLmlzT3BlbiA9IHRydWU7XHJcbiAgICAgICAgY29uc3QgYkRhdGEgPSBibG9jay5nZXRCbG9ja0RhdGEoKTtcclxuICAgICAgICBpZiAoYkRhdGEpIHtcclxuICAgICAgICAgICAgYkRhdGEuaXNQb3B1cE9wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICBibG9jay5zZXRCbG9ja0RhdGEoYkRhdGEpO1xyXG4gICAgICAgICAgICBpZiAoYkRhdGEucG9wVXBDb250ZXh0KVxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb250ZXh0TGF5ZXIgPSBiRGF0YS5wb3BVcENvbnRleHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm90dG9tTGF5ZXIuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgICAgICB0aGlzLmNvbnRleHRMYXllci5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgIHRoaXMuZXhpdEJ0bi5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgfSxcclxuICAgIGhpZGU6IGZ1bmN0aW9uIChibG9jaykge1xyXG4gICAgICAgIHRoaXMuaXNPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgaWYgKGJsb2NrKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJEYXRhID0gYmxvY2suZ2V0QmxvY2tEYXRhKCk7XHJcbiAgICAgICAgICAgIGJEYXRhLmlzUG9wdXBPcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGJsb2NrLnNldEJsb2NrRGF0YShiRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHRoaXMuYm90dG9tTGF5ZXIuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5jb250ZXh0TGF5ZXIuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5leGl0QnRuLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBJbml0UG9wVXAgPSAoKSA9PiB7XHJcbiAgICBQb3BVcC5jb250ZXh0TGF5ZXIucmVtb3ZlQWxsKCk7XHJcbiAgICBQb3BVcC5oaWRlKCk7XHJcbn07XHJcbmNvbnN0IENyZWF0ZVBvcFVwID0gKHNjZW5lKSA9PiB7XHJcbiAgICBQb3BVcC5ib3R0b21MYXllciA9IHNjZW5lLmFkZC5ncmFwaGljcygpO1xyXG4gICAgUG9wVXAuYm90dG9tTGF5ZXIuZmlsbFN0eWxlKDB4MDAwMDAwLCAwLjQpO1xyXG4gICAgUG9wVXAuYm90dG9tTGF5ZXIuZmlsbFJlY3QoMCwgMCwgVmlldy53LCBWaWV3LmgpO1xyXG4gICAgUG9wVXAuYm90dG9tTGF5ZXIuc2V0SW50ZXJhY3RpdmUobmV3IFBoYXNlci5HZW9tLlJlY3RhbmdsZSgwLCAwLCBWaWV3LncsIFZpZXcuaCksIFBoYXNlci5HZW9tLlJlY3RhbmdsZS5Db250YWlucyk7XHJcbiAgICBQb3BVcC5ib3R0b21MYXllci5vbigncG9pbnRlcnVwJywgKCkgPT4geyBjb25zb2xlLmxvZygndG91Y2hpbmcgcG9wdXAgYm90dG9tIGxheWVyJyk7IH0pO1xyXG4gICAgUG9wVXAuY29udGV4dExheWVyID0gc2NlbmUuYWRkLmNvbnRhaW5lcihWaWV3LmNlbnRlclgsIFZpZXcuY2VudGVyWSk7XHJcbiAgICBQb3BVcC5leGl0QnRuID0gc2NlbmUuYWRkLmltYWdlKFZpZXcudyAtIENvbnRleHRMYXllck1hcmdpbiwgQ29udGV4dExheWVyTWFyZ2luLCAnZXhpdEJ0bicpO1xyXG4gICAgUG9wVXAuZXhpdEJ0bi5zZXRJbnRlcmFjdGl2ZSgpO1xyXG4gICAgUG9wVXAuZXhpdEJ0bi5vbigncG9pbnRlcnVwJywgKCkgPT4ge1xyXG4gICAgICAgIFBvcFVwLmhpZGUoKTtcclxuICAgIH0pO1xyXG4gICAgW1BvcFVwLmJvdHRvbUxheWVyLCBQb3BVcC5jb250ZXh0TGF5ZXIsIFBvcFVwLmV4aXRCdG5dLm1hcCgoZWxlKSA9PiB7XHJcbiAgICAgICAgZWxlLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIFNldERlcHRoKGVsZSwgJ3BvcFVwJyk7XHJcbiAgICB9KTtcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgUG9wVXA7XHJcbmV4cG9ydCB7IEluaXRQb3BVcCwgQ3JlYXRlUG9wVXAgfTtcclxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gXCJAc3JjL3VzZXJTZXR0aW5nXCI7XHJcbmltcG9ydCBHYW1lQXVkaW8gZnJvbSAnQHNyYy9zY2VuZXMvYXVkaW8nO1xyXG5pbXBvcnQgeyBTZXRGb250MkNvbW1vbkNvbnRleHRTdHlsZSwgVHh0VGl0bGVIZWFkU2l6ZSB9IGZyb20gXCIuLi9mb250XCI7XHJcbmNvbnN0IEdhbWVTdGFydENudCA9IHtcclxuICAgIGlzU3RhcnQ6IGZhbHNlLFxyXG4gICAgY250VHh0OiBudWxsLFxyXG4gICAgY250TnVtOiAzLFxyXG4gICAgZ2V0SXNTdGFydDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpcy5pc1N0YXJ0OyB9LFxyXG4gICAgc2V0SXNTdGFydDogZnVuY3Rpb24gKGlzU3RhcnQpIHsgdGhpcy5pc1N0YXJ0ID0gaXNTdGFydDsgfSxcclxuICAgIHNldFR4dDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgR2FtZVN0YXJ0Q250LmNudFR4dC5zZXRUZXh0KHZhbHVlLnRvU3RyaW5nKCkpO1xyXG4gICAgfSxcclxuICAgIHNldFZpc2libGU6IGZ1bmN0aW9uICh2aXNpYmxlKSB7IEdhbWVTdGFydENudC5jbnRUeHQuc2V0VmlzaWJsZSh2aXNpYmxlKTsgfSxcclxuICAgIHNldEFscGhhOiBmdW5jdGlvbiAoYWxwaGEpIHsgR2FtZVN0YXJ0Q250LmNudFR4dC5zZXRBbHBoYShhbHBoYSk7IH0sXHJcbiAgICBhbmltRmFkZU91dDogZnVuY3Rpb24gKHNjZW5lKSB7XHJcbiAgICAgICAgc2NlbmUudHdlZW5zLmFkZENvdW50ZXIoe1xyXG4gICAgICAgICAgICBmcm9tOiAxLCB0bzogMCwgZHVyYXRpb246IDQwMCxcclxuICAgICAgICAgICAgb25VcGRhdGU6ICh0dywgZGF0YSkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBbHBoYShkYXRhLnZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRBbHBoYSgwKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldElzU3RhcnQodHJ1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH0sXHJcbiAgICBhbmltQ250OiBmdW5jdGlvbiAoc2NlbmUpIHtcclxuICAgICAgICBsZXQgY250ID0gMztcclxuICAgICAgICBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih7XHJcbiAgICAgICAgICAgIGZyb206IDAsIHRvOiAxMDAwLCBkdXJhdGlvbjogMTAwMCwgcmVwZWF0OiAzLCBkZWxheTogMTAwMCxcclxuICAgICAgICAgICAgb25TdGFydDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRUeHQoMyk7XHJcbiAgICAgICAgICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgndm9pY2UzJyk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uUmVwZWF0OiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBjbnQtLTtcclxuICAgICAgICAgICAgICAgIGlmIChjbnQgPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgndm9pY2VHbycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2V0VHh0KCdHbyEnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNldFR4dChjbnQpO1xyXG4gICAgICAgICAgICAgICAgR2FtZUF1ZGlvLnBsYXlTZngoJ3ZvaWNlJyArIGNudCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYW5pbUZhZGVPdXQoc2NlbmUpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59O1xyXG5jb25zdCBJbml0R2FtZVN0YXJ0Q250ID0gKCkgPT4ge1xyXG4gICAgR2FtZVN0YXJ0Q250LnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgR2FtZVN0YXJ0Q250LnNldEFscGhhKDEpO1xyXG4gICAgR2FtZVN0YXJ0Q250LnNldElzU3RhcnQoZmFsc2UpO1xyXG4gICAgR2FtZVN0YXJ0Q250LmNudE51bSA9IDM7XHJcbiAgICBHYW1lU3RhcnRDbnQuc2V0VHh0KEdhbWVTdGFydENudC5jbnROdW0pO1xyXG59O1xyXG5jb25zdCBDcmVhdGVHYW1lU3RhcnRDbnQgPSAoc2NlbmUpID0+IHtcclxuICAgIEdhbWVTdGFydENudC5jbnRUeHQgPSBzY2VuZS5hZGQudGV4dChWaWV3LmNlbnRlclgsIFZpZXcuY2VudGVyWSwgJzMnKTtcclxuICAgIFNldEZvbnQyQ29tbW9uQ29udGV4dFN0eWxlKEdhbWVTdGFydENudC5jbnRUeHQpO1xyXG4gICAgR2FtZVN0YXJ0Q250LmNudFR4dC5zZXRGb250U2l6ZShUeHRUaXRsZUhlYWRTaXplKTtcclxuICAgIEluaXRHYW1lU3RhcnRDbnQoKTtcclxuICAgIEdhbWVTdGFydENudC5hbmltQ250KHNjZW5lKTtcclxuICAgIC8vIHNjZW5lLmV2ZW50cy5vbihcInN0YXJ0XCIsICgpID0+IHtcclxuICAgIC8vICAgICBjb25zb2xlLmxvZygnc3RhcnQgc2NlbmUgZXZ0Jyk7XHJcbiAgICAvLyAgICAgR2FtZVN0YXJ0Q250LmFuaW1DbnQoc2NlbmUpO1xyXG4gICAgLy8gfSk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IEdhbWVTdGFydENudDtcclxuZXhwb3J0IHsgSW5pdEdhbWVTdGFydENudCwgQ3JlYXRlR2FtZVN0YXJ0Q250IH07XHJcbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tIFwiQHNyYy91c2VyU2V0dGluZ1wiO1xyXG5pbXBvcnQgR2FtZUF1ZGlvIGZyb20gJ0BzcmMvc2NlbmVzL2F1ZGlvJztcclxuaW1wb3J0IEJsb2NrU3lzdGVtIGZyb20gXCIuLi9ibG9jay9zeXN0ZW1cIjtcclxuaW1wb3J0IHsgU2V0RGVwdGggfSBmcm9tIFwiLi4vZGVwdGhcIjtcclxuY29uc3QgR2FtZVdhcm5pbmcgPSB7XHJcbiAgICBoYXNPbmNlU2hvdzogdHJ1ZSxcclxuICAgIGhhc09uY2VIaWRlOiB0cnVlLFxyXG4gICAgdGltZTogNiAqIDEwMDAsXHJcbiAgICBzaWduOiBudWxsLFxyXG4gICAgcHJvZ3Jlc3NCYXI6IG51bGwsXHJcbiAgICBwcm9ncmVzc0JhckxpbmU6IG51bGwsXHJcbiAgICBwcm9ncmVzc0Ftb3VudDogMCxcclxuICAgIHNoYWtlVmFsdWU6IDEsXHJcbiAgICB1cGRhdGVTaGFrZVZhbHVlOiAocmVtYWluZWRPdmVyQ250KSA9PiB7XHJcbiAgICAgICAgR2FtZVdhcm5pbmcuc2hha2VWYWx1ZSA9IChHYW1lV2FybmluZy50aW1lIC0gcmVtYWluZWRPdmVyQ250KSAvIDEwMDA7XHJcbiAgICB9LFxyXG4gICAgc2hvdzogKCkgPT4ge1xyXG4gICAgICAgIEdhbWVXYXJuaW5nLnByb2dyZXNzQW1vdW50ID0gMDtcclxuICAgICAgICBHYW1lV2FybmluZy5zaWduLnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICAgICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXIuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgICAgICBHYW1lV2FybmluZy5wcm9ncmVzc0JhckxpbmUuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgICAgICBHYW1lV2FybmluZy5kcmF3KCk7XHJcbiAgICAgICAgcmV0dXJuIEdhbWVXYXJuaW5nO1xyXG4gICAgfSxcclxuICAgIGhpZGU6ICgpID0+IHtcclxuICAgICAgICBHYW1lV2FybmluZy5zaWduLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIEdhbWVXYXJuaW5nLnByb2dyZXNzQmFyLnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIEdhbWVXYXJuaW5nLnByb2dyZXNzQmFyTGluZS5zZXRWaXNpYmxlKGZhbHNlKTtcclxuICAgICAgICBHYW1lV2FybmluZy5jbGVhcigpO1xyXG4gICAgICAgIEdhbWVBdWRpby5zdG9wU2Z4KCd3YXJuaW5nU2Z4Jyk7XHJcbiAgICB9LFxyXG4gICAgYXJjRGVncmVlOiAoKSA9PiB7XHJcbiAgICAgICAgY29uc3Qgc3RhcnRBbmdsZSA9IDI3MCArIChHYW1lV2FybmluZy5wcm9ncmVzc0Ftb3VudCkgKiAoLTE4MCk7IC8vIDI3MCB+IDkwXHJcbiAgICAgICAgY29uc3QgZW5kQW5nbGUgPSAtOTAgKyAoR2FtZVdhcm5pbmcucHJvZ3Jlc3NBbW91bnQpICogMTgwOyAvLyAtOTAgfiA5MFxyXG4gICAgICAgIHJldHVybiB7IHN0YXJ0QW5nbGU6IHN0YXJ0QW5nbGUsIGVuZEFuZ2xlOiBlbmRBbmdsZSB9O1xyXG4gICAgfSxcclxuICAgIGRyYXc6ICgpID0+IHtcclxuICAgICAgICBHYW1lV2FybmluZy5jbGVhcigpO1xyXG4gICAgICAgIGNvbnN0IHIgPSBHYW1lV2FybmluZy5zaWduLndpZHRoICogNCAvIDU7XHJcbiAgICAgICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXJMaW5lLmxpbmVTdHlsZSg2LCAweGZiZmYwMCwgMSk7XHJcbiAgICAgICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXJMaW5lLnN0cm9rZUNpcmNsZSgwLCAwLCByKTtcclxuICAgICAgICBHYW1lV2FybmluZy5wcm9ncmVzc0Jhci5maWxsU3R5bGUoMHhmYmZmMDAsIDAuNCk7XHJcbiAgICAgICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXIuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXIuYXJjKDAsIDAsIHIsIFBoYXNlci5NYXRoLkRlZ1RvUmFkKEdhbWVXYXJuaW5nLmFyY0RlZ3JlZSgpLnN0YXJ0QW5nbGUpLCBQaGFzZXIuTWF0aC5EZWdUb1JhZChHYW1lV2FybmluZy5hcmNEZWdyZWUoKS5lbmRBbmdsZSksIHRydWUsIDAuMDEpO1xyXG4gICAgICAgIEdhbWVXYXJuaW5nLnByb2dyZXNzQmFyLmZpbGxQYXRoKCk7XHJcbiAgICAgICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXIuY2xvc2VQYXRoKCk7XHJcbiAgICAgICAgcmV0dXJuIEdhbWVXYXJuaW5nO1xyXG4gICAgfSxcclxuICAgIGNsZWFyOiAoKSA9PiB7XHJcbiAgICAgICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXIuY2xlYXIoKTtcclxuICAgICAgICBHYW1lV2FybmluZy5wcm9ncmVzc0JhckxpbmUuY2xlYXIoKTtcclxuICAgIH0sXHJcbiAgICB1cGRhdGU6IChzY2VuZSkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlbWFpbmVkT3ZlckNudCA9IEJsb2NrU3lzdGVtLm92ZXJDbnRNYXggLSBCbG9ja1N5c3RlbS5vdmVyQ250O1xyXG4gICAgICAgIC8vIGhpZGUgd2FybmluZ1xyXG4gICAgICAgIGlmIChCbG9ja1N5c3RlbS5nZXRJc0dhbWVPdmVyKCkpXHJcbiAgICAgICAgICAgIEdhbWVXYXJuaW5nLmhhc09uY2VIaWRlID0gdHJ1ZTtcclxuICAgICAgICBpZiAoQmxvY2tTeXN0ZW0uZ2V0SXNHYW1lT3ZlcigpIHx8IHJlbWFpbmVkT3ZlckNudCA+IEdhbWVXYXJuaW5nLnRpbWUpIHtcclxuICAgICAgICAgICAgaWYgKEdhbWVXYXJuaW5nLmhhc09uY2VIaWRlKSB7XHJcbiAgICAgICAgICAgICAgICBHYW1lV2FybmluZy5oYXNPbmNlSGlkZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgR2FtZVdhcm5pbmcuaGFzT25jZVNob3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgR2FtZVdhcm5pbmcuaGlkZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gc2hvdyB3YXJuaW5nXHJcbiAgICAgICAgaWYgKEdhbWVXYXJuaW5nLmhhc09uY2VTaG93KSB7XHJcbiAgICAgICAgICAgIEdhbWVXYXJuaW5nLmhhc09uY2VTaG93ID0gZmFsc2U7XHJcbiAgICAgICAgICAgIEdhbWVXYXJuaW5nLmhhc09uY2VIaWRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgR2FtZVdhcm5pbmcuc2hvdygpO1xyXG4gICAgICAgICAgICBzY2VuZS50d2VlbnMuYWRkQ291bnRlcih7XHJcbiAgICAgICAgICAgICAgICBmcm9tOiAxLCB0bzogMCwgZHVyYXRpb246IDUwMCwgeW95bzogdHJ1ZSwgcmVwZWF0OiAtMSxcclxuICAgICAgICAgICAgICAgIG9uU3RhcnQ6ICgpID0+IHsgR2FtZUF1ZGlvLnBsYXlTZngoJ3dhcm5pbmdTZngnKTsgfSxcclxuICAgICAgICAgICAgICAgIG9uUmVwZWF0OiAoKSA9PiB7IEdhbWVBdWRpby5wbGF5U2Z4KCd3YXJuaW5nU2Z4Jyk7IH0sXHJcbiAgICAgICAgICAgICAgICBvblVwZGF0ZTogKHR3LCB0d0RhdGEpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoR2FtZVdhcm5pbmcuaGFzT25jZVNob3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgR2FtZVdhcm5pbmcuc2lnbi5zZXRBbHBoYSgxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHcucmVtb3ZlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgR2FtZVdhcm5pbmcuc2lnbi5zZXRBbHBoYSh0d0RhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NBbW91bnQgPSAoR2FtZVdhcm5pbmcudGltZSAtIHJlbWFpbmVkT3ZlckNudCkgLyBHYW1lV2FybmluZy50aW1lO1xyXG4gICAgICAgIEdhbWVXYXJuaW5nLmRyYXcoKTtcclxuICAgICAgICBHYW1lV2FybmluZy51cGRhdGVTaGFrZVZhbHVlKHJlbWFpbmVkT3ZlckNudCk7XHJcbiAgICAgICAgc2NlbmUuY2FtZXJhcy5tYWluLnNoYWtlKDE2MCwgMC4wMDEgKiBHYW1lV2FybmluZy5zaGFrZVZhbHVlLCBmYWxzZSk7XHJcbiAgICB9LFxyXG59O1xyXG5jb25zdCBJbml0R2FtZVdhcm5pbmcgPSAoKSA9PiB7XHJcbiAgICBHYW1lV2FybmluZy5oaWRlKCk7XHJcbiAgICBHYW1lV2FybmluZy5oYXNPbmNlU2hvdyA9IHRydWU7XHJcbiAgICBHYW1lV2FybmluZy5wcm9ncmVzc0Ftb3VudCA9IDA7XHJcbiAgICByZXR1cm4gR2FtZVdhcm5pbmc7XHJcbn07XHJcbmNvbnN0IENyZWF0ZUdhbWVXYXJuaW5nID0gKHNjZW5lKSA9PiB7XHJcbiAgICBHYW1lV2FybmluZy5zaWduID0gc2NlbmUuYWRkLmltYWdlKDAsIDAsICd3YXJuaW5nU2lnbicpO1xyXG4gICAgR2FtZVdhcm5pbmcuc2lnbi5zZXRQb3NpdGlvbihWaWV3LmNlbnRlclgsIEdhbWVXYXJuaW5nLnNpZ24uaGVpZ2h0KTtcclxuICAgIEdhbWVXYXJuaW5nLnByb2dyZXNzQmFyID0gc2NlbmUuYWRkLmdyYXBoaWNzKCk7XHJcbiAgICBHYW1lV2FybmluZy5wcm9ncmVzc0Jhci5zZXRBbHBoYSgwLjkpO1xyXG4gICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXJMaW5lID0gc2NlbmUuYWRkLmdyYXBoaWNzKCk7XHJcbiAgICBjb25zdCBiYXJYID0gR2FtZVdhcm5pbmcuc2lnbi54O1xyXG4gICAgY29uc3QgYmFyWSA9IEdhbWVXYXJuaW5nLnNpZ24ueTtcclxuICAgIEdhbWVXYXJuaW5nLnByb2dyZXNzQmFyLnNldFBvc2l0aW9uKGJhclgsIGJhclkpO1xyXG4gICAgR2FtZVdhcm5pbmcucHJvZ3Jlc3NCYXJMaW5lLnNldFBvc2l0aW9uKGJhclgsIGJhclkpO1xyXG4gICAgW0dhbWVXYXJuaW5nLnByb2dyZXNzQmFyLCBHYW1lV2FybmluZy5wcm9ncmVzc0JhckxpbmUsIEdhbWVXYXJuaW5nLnNpZ25dLm1hcChlbGUgPT4gU2V0RGVwdGgoZWxlLCAnd2FybmluZycpKTtcclxuICAgIEluaXRHYW1lV2FybmluZygpO1xyXG4gICAgcmV0dXJuIEdhbWVXYXJuaW5nO1xyXG59O1xyXG5leHBvcnQgZGVmYXVsdCBHYW1lV2FybmluZztcclxuZXhwb3J0IHsgQ3JlYXRlR2FtZVdhcm5pbmcgfTtcclxuIiwiaW1wb3J0IHsgVmlldyB9IGZyb20gJ0BzcmMvdXNlclNldHRpbmcnO1xyXG5pbXBvcnQgeyBJbml0QmxvY2tTeXN0ZW0sIFVwZGF0ZUFsbEJsb2NrcyB9IGZyb20gJy4vYmxvY2svc3lzdGVtJztcclxuaW1wb3J0IHsgQ3JlYXRlUG9wVXAgfSBmcm9tICcuL3VpL3BvcHVwJztcclxuaW1wb3J0IHsgQ3JlYXRlU2NvcmVUeHQgfSBmcm9tICcuL3VpL3Njb3JlJztcclxuaW1wb3J0IEdhbWVUaW1lLCB7IENyZWF0ZUdhbWVUaW1lVHh0IH0gZnJvbSAnLi91aS90aW1lJztcclxuaW1wb3J0IEdhbWVBdWRpbywgeyBDcmVhdGVHYW1lQXVkaW8gfSBmcm9tICdAc3JjL3NjZW5lcy9hdWRpbyc7XHJcbmltcG9ydCB7IFN0b3BQYXNzaXZlTG9hZGluZyB9IGZyb20gJ0BzcmMvc2NlbmVzL3Bhc3NpdmVMb2FkaW5nJztcclxuaW1wb3J0IEdhbWVTdGFydENudCwgeyBDcmVhdGVHYW1lU3RhcnRDbnQgfSBmcm9tICcuL3VpL3N0YXJ0Q250JztcclxuaW1wb3J0IEdhbWVPdmVyLCB7IENyZWF0ZUdhbWVPdmVyIH0gZnJvbSAnLi91aS9nYW1lb3Zlcic7XHJcbmltcG9ydCB7IENyZWF0ZUlucHV0LCBVcGRhdGVJbnB1dCB9IGZyb20gJy4vaW5wdXQnO1xyXG5pbXBvcnQgRWZ4LCB7IENyZWF0ZUVmeCwgQ3JlYXRlR2FtZU92ZXJFZnggfSBmcm9tICcuL2VmeCc7XHJcbmltcG9ydCB7IEdldFJuZENvbG9yLCBHZXRSbmRJbnQsIEdldFJuZE51bSB9IGZyb20gJ0BzcmMvdXRpbHMvbWF0aCc7XHJcbmltcG9ydCB7IFNldERlcHRoIH0gZnJvbSAnLi9kZXB0aCc7XHJcbmltcG9ydCBHYW1lV2FybmluZywgeyBDcmVhdGVHYW1lV2FybmluZyB9IGZyb20gJy4vdWkvd2FybmluZyc7XHJcbmltcG9ydCBHYW1lRGF0YSBmcm9tICcuLi9zdG9yYWdlJztcclxuaW1wb3J0IFVJUHJvcHMsIHsgQ3JlYXRlR2FtZUNvbW1vblVJLCBDcmVhdGVVSUJ0bkFuaW0sIFNldENvbW1vblVJUHJvcHMsIFVwZGF0ZUdhbWVDb21tb25VSSB9IGZyb20gJ0BzcmMvc2NlbmVzL3VpJztcclxuaW1wb3J0IHsgQ3JlYXRlQmFzaWNQb3BVcCB9IGZyb20gJ0BzcmMvc2NlbmVzL3VpL3BvcFVwJztcclxuaW1wb3J0IHsgU2V0Rm9udFN0eWxlIH0gZnJvbSAnQHNyYy9zY2VuZXMvdWkvZm9udCc7XHJcbmltcG9ydCB7IFN0YXJ0VGl0bGUgfSBmcm9tICcuL3RpdGxlJztcclxuY29uc3QgU3RhcnRHYW1lID0gKHNjZW5lKSA9PiB7XHJcbiAgICBzY2VuZS5zY2VuZS5yZW1vdmUoJ2dhbWUnKTtcclxuICAgIHNjZW5lLnNjZW5lLmFkZCgnZ2FtZScsIEdhbWVTY2VuZSk7XHJcbiAgICBzY2VuZS5zY2VuZS5sYXVuY2goJ2dhbWUnKTtcclxufTtcclxuY29uc3QgUmVzdGFydEdhbWUgPSAoc2NlbmUpID0+IHtcclxuICAgIEVmeC5zdG9wQWxsKCk7XHJcbiAgICBzY2VuZS5zY2VuZS5yZXN0YXJ0KCk7XHJcbn07XHJcbmNvbnN0IFN0b3BHYW1lID0gKHNjZW5lKSA9PiB7XHJcbiAgICBpZiAoc2NlbmUuc2NlbmUuZ2V0KCdnYW1lJykpIHtcclxuICAgICAgICBzY2VuZS5zY2VuZS5zZXRBY3RpdmUoZmFsc2UsICdnYW1lJyk7XHJcbiAgICAgICAgc2NlbmUuc2NlbmUuc2V0VmlzaWJsZShmYWxzZSwgJ2dhbWUnKTtcclxuICAgICAgICBFZnguc3RvcEFsbCgpO1xyXG4gICAgICAgIEdhbWVBdWRpby5zdG9wQmdtKCdnYW1lQmdtJyk7XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICghc2NlbmUuc2NlbmUuZ2V0KCdnYW1lJykpXHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIHNjZW5lLnNjZW5lLnJlbW92ZSgnZ2FtZScpO1xyXG4gICAgICAgIH0sIDEwMDApO1xyXG4gICAgfVxyXG59O1xyXG5jbGFzcyBHYW1lU2NlbmUgZXh0ZW5kcyBQaGFzZXIuU2NlbmUge1xyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBrZXk6ICdnYW1lJyxcclxuICAgICAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudGhlbWVJZHggPSAwO1xyXG4gICAgICAgIHRoaXMud2FsbEdhcCA9IFZpZXcuY2FsY1JhdGlvKDQ1KTtcclxuICAgICAgICB0aGlzLndhbGxCb3R0b21HYXAgPSBWaWV3LmNhbGNSYXRpbygzMCk7XHJcbiAgICAgICAgdGhpcy5tYXR0ZXJTdGVwRm9yY2UgPSAwLjA4OyAvLyBhcHBseSBkZWx0YSB0byBtYXR0ZXIgZm9yY2UgbWV0aG9kXHJcbiAgICB9XHJcbiAgICBjcmVhdGUoKSB7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVXYWxsKCk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVCZ1NjZW5lKCk7XHJcbiAgICAgICAgLy8gYmxvY2sgc3lzdGVtXHJcbiAgICAgICAgSW5pdEJsb2NrU3lzdGVtKCk7XHJcbiAgICAgICAgLy8gaW5wdXRcclxuICAgICAgICBDcmVhdGVJbnB1dCh0aGlzKTtcclxuICAgICAgICAvLyBhdWRpb1xyXG4gICAgICAgIENyZWF0ZUdhbWVBdWRpbyh0aGlzLCBHYW1lRGF0YSk7XHJcbiAgICAgICAgR2FtZUF1ZGlvLnBsYXlCZ20oJ2dhbWVCZ20nKTtcclxuICAgICAgICAvLyB1aVxyXG4gICAgICAgIENyZWF0ZUdhbWVTdGFydENudCh0aGlzKTtcclxuICAgICAgICBDcmVhdGVTY29yZVR4dCh0aGlzKTtcclxuICAgICAgICBDcmVhdGVHYW1lVGltZVR4dCh0aGlzKTtcclxuICAgICAgICBDcmVhdGVQb3BVcCh0aGlzKTtcclxuICAgICAgICBDcmVhdGVHYW1lV2FybmluZyh0aGlzKTtcclxuICAgICAgICBDcmVhdGVHYW1lT3Zlcih0aGlzLCB0aGlzLnRoZW1lSWR4KTtcclxuICAgICAgICBDcmVhdGVFZngodGhpcyk7XHJcbiAgICAgICAgQ3JlYXRlR2FtZU92ZXJFZngodGhpcywgR2FtZU92ZXIubmV3QmVzdFNjb3JlQmcpO1xyXG4gICAgICAgIC8vIENyZWF0ZVNldHRpbmcodGhpcyk7XHJcbiAgICAgICAgdGhpcy5jcmVhdGVFeGl0QnRuKCk7XHJcbiAgICAgICAgLy8gY29tbW9uXHJcbiAgICAgICAgQ3JlYXRlR2FtZUNvbW1vblVJKHRoaXMpO1xyXG4gICAgICAgIC8vIHN0b3AgcGFzc2l2ZSBsb2FkaW5nXHJcbiAgICAgICAgU3RvcFBhc3NpdmVMb2FkaW5nKCk7XHJcbiAgICAgICAgLy8gLy8gZGVidWdnaW5nXHJcbiAgICAgICAgLy8gY29uc3QgaW5zcGVjdG9yV2lkdGggPSAyNTU7XHJcbiAgICAgICAgLy8gUEdVSW5zcGVjdG9yKHRoaXMsIHsgcmlnaHQ6IHdpbmRvdy5pbm5lcldpZHRoIC0gaW5zcGVjdG9yV2lkdGgsIHRvcDogNDggfSk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUodGltZSwgZGVsdGEpIHtcclxuICAgICAgICBpZiAoIUdhbWVTdGFydENudC5nZXRJc1N0YXJ0KCkpXHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICBHYW1lVGltZS51cGRhdGUodGhpcywgZGVsdGEpO1xyXG4gICAgICAgIEdhbWVXYXJuaW5nLnVwZGF0ZSh0aGlzKTtcclxuICAgICAgICBVcGRhdGVJbnB1dChkZWx0YSk7XHJcbiAgICAgICAgVXBkYXRlQWxsQmxvY2tzKHRoaXMsIHRpbWUsIGRlbHRhKTtcclxuICAgICAgICB0aGlzLnVwZGF0ZU1hdHRlclN0ZXAoZGVsdGEpO1xyXG4gICAgICAgIFVwZGF0ZUdhbWVDb21tb25VSShkZWx0YSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGVXYWxsKCkge1xyXG4gICAgICAgIC8vIHNldCBtYXR0ZXIgd2FsbHNcclxuICAgICAgICBjb25zdCB3YWxsVGhpY2tuZXNzID0gdGhpcy53YWxsR2FwICogNTtcclxuICAgICAgICB0aGlzLm1hdHRlci53b3JsZC5zZXRCb3VuZHModGhpcy53YWxsR2FwLCAwLCBWaWV3LncgLSAodGhpcy53YWxsR2FwICogMiksIFZpZXcuaCAtIHRoaXMud2FsbEdhcCwgd2FsbFRoaWNrbmVzcywgdHJ1ZSwgdHJ1ZSwgZmFsc2UsIHRydWUpO1xyXG4gICAgICAgIC8vIGNyZWF0ZSBibG9jayBzcGF3biBzdXBwb3J0IHdhbGxcclxuICAgICAgICBjb25zdCBzdXBwb3J0TGVmdCA9IHRoaXMubWF0dGVyLmFkZC5yZWN0YW5nbGUoMCwgLVZpZXcuaCAvIDIsIHRoaXMud2FsbEdhcCwgVmlldy5oLCB7IGlzU3RhdGljOiB0cnVlIH0pO1xyXG4gICAgICAgIGNvbnN0IHN1cHBvcnRSaWdodCA9IHRoaXMubWF0dGVyLmFkZC5yZWN0YW5nbGUoVmlldy53LCAtVmlldy5oIC8gMiwgdGhpcy53YWxsR2FwLCBWaWV3LmgsIHsgaXNTdGF0aWM6IHRydWUgfSk7XHJcbiAgICAgICAgY29uc3QgYmdUZXh0dXJlTGlzdCA9IFsnYmdHcmVlbicsICdiZ0Jyb3duJywgJ2JnQmx1ZSddO1xyXG4gICAgICAgIGNvbnN0IGJ0bkxpc3QgPSBbJ2J0bkdyZWVuJywgJ2J0bkJyb3duJywgJ2J0bkJsdWUnXTtcclxuICAgICAgICB0aGlzLnRoZW1lSWR4ID0gR2V0Um5kSW50KDAsIGJnVGV4dHVyZUxpc3QubGVuZ3RoKTtcclxuICAgICAgICBjb25zdCBsZWZ0V2FsbCA9IHRoaXMuYWRkLnRpbGVTcHJpdGUoMCwgMCwgdGhpcy53YWxsR2FwLCBWaWV3LmgsIGJnVGV4dHVyZUxpc3RbdGhpcy50aGVtZUlkeF0pLnNldE9yaWdpbigwKTtcclxuICAgICAgICBjb25zdCByaWdodFdhbGwgPSB0aGlzLmFkZC50aWxlU3ByaXRlKFZpZXcudyAtIHRoaXMud2FsbEdhcCwgMCwgdGhpcy53YWxsR2FwLCBWaWV3LmgsIGJnVGV4dHVyZUxpc3RbdGhpcy50aGVtZUlkeF0pLnNldE9yaWdpbigwKTtcclxuICAgICAgICBjb25zdCBib3R0b21XYWxsID0gdGhpcy5hZGQuaW1hZ2UoMCwgVmlldy5oIC0gdGhpcy53YWxsR2FwLCBidG5MaXN0W3RoaXMudGhlbWVJZHhdKS5zZXRPcmlnaW4oMCkuc2V0RGlzcGxheVNpemUoVmlldy53LCB0aGlzLndhbGxHYXApO1xyXG4gICAgICAgIFtsZWZ0V2FsbCwgcmlnaHRXYWxsLCBib3R0b21XYWxsXS5tYXAod2FsbCA9PiBTZXREZXB0aCh3YWxsLCAnd2FsbCcpKTtcclxuICAgICAgICB0aGlzLnR3ZWVucy5hZGRDb3VudGVyKHtcclxuICAgICAgICAgICAgZnJvbTogMCwgdG86IDEsIGR1cmF0aW9uOiA1MDAwLCByZXBlYXQ6IC0xLFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgbGVmdFdhbGwudGlsZVBvc2l0aW9uWSArPSAxO1xyXG4gICAgICAgICAgICAgICAgcmlnaHRXYWxsLnRpbGVQb3NpdGlvblkgLT0gMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQmdTY2VuZSgpIHtcclxuICAgICAgICBjb25zdCBiZ0NvbG9yID0gR2V0Um5kQ29sb3IoKTtcclxuICAgICAgICAvLyBzZWxlY3QgYmcgY29sb3JcclxuICAgICAgICB0aGlzLmNhbWVyYXMubWFpbi5zZXRCYWNrZ3JvdW5kQ29sb3IoYmdDb2xvcik7XHJcbiAgICAgICAgLy8gc2VsZWN0IGNsb3VkIHNoYXBlXHJcbiAgICAgICAgdGhpcy5jbG91ZEdyb3VwID0gdGhpcy5hZGQuZ3JvdXAoe1xyXG4gICAgICAgICAgICBkZWZhdWx0S2V5OiAnY2xvdWQnLFxyXG4gICAgICAgICAgICBtYXhTaXplOiAxNVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMuc3Bhd25DbG91ZCgpO1xyXG4gICAgICAgIC8vIHNlbGVjdCB0cmVlIHNoYXBlXHJcbiAgICAgICAgdGhpcy50cmVlR3JvdXAgPSB0aGlzLmFkZC5ncm91cCh7XHJcbiAgICAgICAgICAgIGRlZmF1bHRLZXk6ICd0cmVlJyxcclxuICAgICAgICAgICAgbWF4U2l6ZTogMTVcclxuICAgICAgICB9KTtcclxuICAgICAgICB0aGlzLnNwYXduVHJlZSgpO1xyXG4gICAgICAgIC8vIHNlbGVjdCBtaXN0XHJcbiAgICAgICAgY29uc3QgYmdNaXN0SWR4ID0gR2V0Um5kSW50KDEsIDQpO1xyXG4gICAgICAgIGNvbnN0IGJnTWlzdCA9IHRoaXMuYWRkLnRpbGVTcHJpdGUodGhpcy53YWxsR2FwLCBWaWV3LmggLSB0aGlzLndhbGxHYXAsIFZpZXcudyAtICh0aGlzLndhbGxHYXAgKiAyKSwgdGhpcy53YWxsR2FwLCAnbWlzdCcgKyBiZ01pc3RJZHgpO1xyXG4gICAgICAgIGJnTWlzdC5zZXRPcmlnaW4oMCwgMSk7XHJcbiAgICAgICAgYmdNaXN0LnNldEFscGhhKDAuNCk7XHJcbiAgICAgICAgU2V0RGVwdGgoYmdNaXN0LCAnbWlzdCcpO1xyXG4gICAgICAgIHRoaXMudHdlZW5zLmFkZENvdW50ZXIoe1xyXG4gICAgICAgICAgICBmcm9tOiAwLCB0bzogMSwgZHVyYXRpb246IDUwMDAsIHJlcGVhdDogLTEsXHJcbiAgICAgICAgICAgIG9uVXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICBiZ01pc3QudGlsZVBvc2l0aW9uWCArPSAwLjU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNwYXduQ2xvdWQoKSB7XHJcbiAgICAgICAgY29uc3QgZHVyYXRpb24gPSBHZXRSbmRJbnQoMTIwMCwgMzAwMCk7XHJcbiAgICAgICAgdGhpcy50d2VlbnMuYWRkQ291bnRlcih7XHJcbiAgICAgICAgICAgIGZyb206IDAsIHRvOiAxLCBkdXJhdGlvbjogZHVyYXRpb24sXHJcbiAgICAgICAgICAgIG9uVXBkYXRlOiAoKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmNsb3VkR3JvdXAuY2hpbGRyZW4uaXRlcmF0ZSgoY2xvdWQpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjaGNrIGRlYXRsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsb3VkLnggPiBWaWV3LncpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2xvdWRHcm91cC5raWxsQW5kSGlkZShjbG91ZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbW92ZSBjbG91ZHNcclxuICAgICAgICAgICAgICAgICAgICBjbG91ZC54ICs9IGNsb3VkLm1vdmVHYXBYO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQ29tcGxldGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGlmICghdGhpcylcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICBjb25zdCBjbG91ZCA9IHRoaXMuY2xvdWRHcm91cC5nZXQoKTtcclxuICAgICAgICAgICAgICAgIGlmICghY2xvdWQpXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgY2xvdWQuc2V0VGV4dHVyZSgnY2xvdWQnICsgR2V0Um5kSW50KDEsIDEwKSk7XHJcbiAgICAgICAgICAgICAgICBjbG91ZC5zZXRQb3NpdGlvbigtY2xvdWQud2lkdGgsIEdldFJuZEludChWaWV3LmNlbnRlclksIFZpZXcuY2VudGVyWSAtIFZpZXcuY2VudGVyWSAvIDIpKTtcclxuICAgICAgICAgICAgICAgIGNsb3VkLnNldE9yaWdpbigwLCAwLjUpO1xyXG4gICAgICAgICAgICAgICAgY2xvdWQuc2V0QWN0aXZlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgY2xvdWQuc2V0QWxwaGEoMC40KTtcclxuICAgICAgICAgICAgICAgIGNsb3VkLm1vdmVHYXBYID0gR2V0Um5kTnVtKDAuMiwgMyk7XHJcbiAgICAgICAgICAgICAgICBTZXREZXB0aChjbG91ZCwgJ2Nsb3VkJyk7XHJcbiAgICAgICAgICAgICAgICBjbG91ZC5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGF3bkNsb3VkKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIHNwYXduVHJlZSgpIHtcclxuICAgICAgICBjb25zdCBkdXJhdGlvbiA9IEdldFJuZEludCgxMjAwLCAzMDAwKTtcclxuICAgICAgICB0aGlzLnR3ZWVucy5hZGRDb3VudGVyKHtcclxuICAgICAgICAgICAgZnJvbTogMCwgdG86IDEsIGR1cmF0aW9uOiBkdXJhdGlvbixcclxuICAgICAgICAgICAgb25VcGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMudHJlZUdyb3VwLmNoaWxkcmVuLml0ZXJhdGUoKHRyZWUpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBjaGNrIGRlYXRsaW5lXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyZWUueCA8IC10cmVlLndpZHRoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRyZWVHcm91cC5raWxsQW5kSGlkZSh0cmVlKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBtb3ZlIGNsb3Vkc1xyXG4gICAgICAgICAgICAgICAgICAgIHRyZWUueCAtPSAwLjU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Db21wbGV0ZTogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRyZWUgPSB0aGlzLnRyZWVHcm91cC5nZXQoKTtcclxuICAgICAgICAgICAgICAgIGlmICghdHJlZSlcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICB0cmVlLnNldFRleHR1cmUoJ3RyZWUnICsgR2V0Um5kSW50KDEsIDM2KSk7XHJcbiAgICAgICAgICAgICAgICB0cmVlLnNldFBvc2l0aW9uKFZpZXcudywgVmlldy5oIC0gdGhpcy53YWxsR2FwKTtcclxuICAgICAgICAgICAgICAgIHRyZWUuc2V0T3JpZ2luKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgdHJlZS5zZXRBY3RpdmUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICB0cmVlLnNldEFscGhhKDAuMik7XHJcbiAgICAgICAgICAgICAgICBTZXREZXB0aCh0cmVlLCAndHJlZScpO1xyXG4gICAgICAgICAgICAgICAgdHJlZS5zZXRWaXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zcGF3blRyZWUoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlRXhpdEJ0bigpIHtcclxuICAgICAgICBjb25zdCB7IG1hcmdpbiB9ID0gVUlQcm9wcztcclxuICAgICAgICBjb25zdCBkb29yRXhpdEJ0biA9IHRoaXMuYWRkLmltYWdlKFZpZXcudyAtIG1hcmdpbiwgbWFyZ2luLCAnZG9vckV4aXRCdG4nKTtcclxuICAgICAgICBDcmVhdGVVSUJ0bkFuaW0odGhpcywgZG9vckV4aXRCdG4pO1xyXG4gICAgICAgIFNldENvbW1vblVJUHJvcHMoZG9vckV4aXRCdG4pO1xyXG4gICAgICAgIFNldERlcHRoKGRvb3JFeGl0QnRuLCAnaGlnaGVzdCcpO1xyXG4gICAgICAgIGNvbnN0IHBvcENvbnRleHQgPSB0aGlzLmFkZC50ZXh0KFZpZXcuY2VudGVyWCwgVmlldy5jZW50ZXJZLCAnR28gYmFjayB0byB0aXRsZT8nKTtcclxuICAgICAgICBTZXRGb250U3R5bGUocG9wQ29udGV4dCk7XHJcbiAgICAgICAgcG9wQ29udGV4dC5zZXRGb250U2l6ZShWaWV3LncgLyAxNCk7XHJcbiAgICAgICAgY29uc3QgZG9vckV4aXRQb3AgPSBDcmVhdGVCYXNpY1BvcFVwKHRoaXMsICdkb29yRXhpdCcsIHt9LCB7XHJcbiAgICAgICAgICAgIGV4aXRCdG46IHtcclxuICAgICAgICAgICAgICAgIGlzRXhpc3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB0eXBlOiAneWVzT3JObycsXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGV2dDoge1xyXG4gICAgICAgICAgICAgICAgc2hvdzogKCkgPT4geyBHYW1lVGltZS5zZXRUaW1lU2NhbGUodGhpcywgR2FtZVRpbWUuc2hvd1NldHRpbmdUaW1lU2NhbGUpOyB9LFxyXG4gICAgICAgICAgICAgICAgaGlkZTogKCkgPT4geyBHYW1lVGltZS5zZXRUaW1lU2NhbGUodGhpcywgR2FtZVRpbWUuaGlkZVNldHRpbmdUaW1lU2NhbGUpOyB9LFxyXG4gICAgICAgICAgICAgICAgdXA6IChwdHIpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc2NlbmUuaXNBY3RpdmUoJ3RpdGxlJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU3RvcEdhbWUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXJ0VGl0bGUodGhpcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICB9KTtcclxuICAgICAgICBkb29yRXhpdFBvcC5hZGQocG9wQ29udGV4dCk7XHJcbiAgICAgICAgZG9vckV4aXRCdG4ub24oJ3BvaW50ZXJ1cCcsICgpID0+IHsgZG9vckV4aXRQb3Auc2hvdygpOyB9KTtcclxuICAgIH1cclxuICAgIHVwZGF0ZU1hdHRlclN0ZXAoZGVsdGEpIHsgdGhpcy5tYXR0ZXIud29ybGQuc3RlcChkZWx0YSk7IH1cclxufVxyXG5leHBvcnQgZGVmYXVsdCBHYW1lU2NlbmU7XHJcbmV4cG9ydCB7IFN0YXJ0R2FtZSwgUmVzdGFydEdhbWUsIFN0b3BHYW1lIH07XHJcbiIsImltcG9ydCB7IFZpZXcgfSBmcm9tICdAc3JjL3VzZXJTZXR0aW5nJztcclxuaW1wb3J0IHsgR2V0Um5kSW50LCBHZXRSbmROdW0gfSBmcm9tICdAc3JjL3V0aWxzL21hdGgnO1xyXG5pbXBvcnQgeyBTdGFydFBhc3NpdmVMb2FkaW5nIH0gZnJvbSAnQHNyYy9zY2VuZXMvcGFzc2l2ZUxvYWRpbmcnO1xyXG5pbXBvcnQgeyBTdGFydEdhbWUgfSBmcm9tICcuL2dhbWUnO1xyXG5pbXBvcnQgeyBTZXRGb250MkNvbW1vbkNvbnRleHRTdHlsZSwgVHh0VGl0bGVIZWFkU2l6ZSwgVHh0VGl0bGVIZWlnaHRHYXAsIFR4dFRpdGxlU2l6ZSB9IGZyb20gJy4vZm9udCc7XHJcbmltcG9ydCB7IENyZWF0ZUVmeCB9IGZyb20gJy4vZWZ4JztcclxuaW1wb3J0IEdhbWVEYXRhIGZyb20gJy4uL3N0b3JhZ2UnO1xyXG5pbXBvcnQgR2FtZUF1ZGlvLCB7IENyZWF0ZUdhbWVBdWRpbyB9IGZyb20gJ0BzcmMvc2NlbmVzL2F1ZGlvJztcclxuaW1wb3J0IHsgQ3JlYXRlR2FtZUNvbW1vblVJLCBVcGRhdGVHYW1lQ29tbW9uVUkgfSBmcm9tICdAc3JjL3NjZW5lcy91aSc7XHJcbmNvbnN0IFN0YXJ0VGl0bGUgPSAoc2NlbmUpID0+IHtcclxuICAgIHNjZW5lLnNjZW5lLnJlbW92ZSgndGl0bGUnKTtcclxuICAgIHNjZW5lLnNjZW5lLmFkZCgndGl0bGUnLCBUaXRsZVNjZW5lKTtcclxuICAgIHNjZW5lLnNjZW5lLmxhdW5jaCgndGl0bGUnKTtcclxufTtcclxuY29uc3QgU3RvcFRpdGxlID0gKHNjZW5lKSA9PiB7XHJcbiAgICBpZiAoc2NlbmUuc2NlbmUuZ2V0KCd0aXRsZScpKSB7XHJcbiAgICAgICAgc2NlbmUuc2NlbmUuc2V0QWN0aXZlKGZhbHNlLCAndGl0bGUnKTtcclxuICAgICAgICBzY2VuZS5zY2VuZS5zZXRWaXNpYmxlKGZhbHNlLCAndGl0bGUnKTtcclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHsgc2NlbmUuc2NlbmUucmVtb3ZlKCd0aXRsZScpOyB9LCAxMDAwKTtcclxuICAgIH1cclxufTtcclxuY2xhc3MgVGl0bGVTY2VuZSBleHRlbmRzIFBoYXNlci5TY2VuZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGtleTogJ3RpdGxlJyxcclxuICAgICAgICAgICAgYWN0aXZlOiBmYWxzZVxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMudGl0bGVGb250U2l6ZSA9IDUwO1xyXG4gICAgICAgIHRoaXMuZm9udFNpemUgPSAzMDtcclxuICAgICAgICB0aGlzLm1pZGRsZUdhcCA9IDU7XHJcbiAgICAgICAgdGhpcy5iZ1JuZFBvcyA9IHsgeDogMCwgeTogMCB9O1xyXG4gICAgfVxyXG4gICAgY3JlYXRlKCkge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQmcoKTtcclxuICAgICAgICB0aGlzLmxvZ29CZyA9IHRoaXMuYWRkLmltYWdlKFZpZXcuY2VudGVyWCwgVmlldy5jZW50ZXJZIC0gVHh0VGl0bGVIZWlnaHRHYXAsICdidG5CbHVlJykuc2V0U2NhbGUoMS44KTtcclxuICAgICAgICB0aGlzLmxvZ28gPSB0aGlzLmFkZC50ZXh0KHRoaXMubG9nb0JnLngsIHRoaXMubG9nb0JnLnksICdCbG9ja1BhbmcnKS5zZXRGb250U2l6ZSh0aGlzLnRpdGxlRm9udFNpemUpO1xyXG4gICAgICAgIHRoaXMuc3RhcnRCZyA9IHRoaXMuYWRkLmltYWdlKHRoaXMubG9nby54LCB0aGlzLmxvZ28ueSArIChUeHRUaXRsZUhlaWdodEdhcCAqIDIpLCAndGl0bGVDb250ZXh0QmcnKTtcclxuICAgICAgICB0aGlzLnN0YXJ0ID0gdGhpcy5hZGQudGV4dCh0aGlzLnN0YXJ0QmcueCwgdGhpcy5zdGFydEJnLnksICdzdGFydCcpO1xyXG4gICAgICAgIFt0aGlzLmxvZ28sIHRoaXMuc3RhcnRdLm1hcCgoZWxlKSA9PiB7XHJcbiAgICAgICAgICAgIFNldEZvbnQyQ29tbW9uQ29udGV4dFN0eWxlKGVsZSk7XHJcbiAgICAgICAgICAgIGVsZS5zZXRGb250U2l6ZShUeHRUaXRsZVNpemUpO1xyXG4gICAgICAgICAgICBlbGUuc2V0Q29sb3IoJ2JsYWNrJyk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgW3RoaXMubG9nb0JnLCB0aGlzLnN0YXJ0QmddLm1hcCgoZWxlKSA9PiB7XHJcbiAgICAgICAgICAgIGVsZS5zZXRJbnRlcmFjdGl2ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHRoaXMubG9nby5zZXRGb250U2l6ZShUeHRUaXRsZUhlYWRTaXplKTtcclxuICAgICAgICB0aGlzLmxvZ28uc2V0Q29sb3IoJ3doaXRlJyk7XHJcbiAgICAgICAgdGhpcy5sb2dvQmcub24oJ3BvaW50ZXJ1cCcsICgpID0+IHtcclxuICAgICAgICAgICAgR2FtZUF1ZGlvLnBsYXlTZngoJ2VhcnRocXVha2UnKTtcclxuICAgICAgICAgICAgdGhpcy5hbmltUm5kQW5nbGUoW3RoaXMubG9nb0JnLCB0aGlzLmxvZ29dKTtcclxuICAgICAgICAgICAgdGhpcy5jYW1lcmFzLm1haW4uc2hha2UoMjUwLCAwLjAyLCB0cnVlKTtcclxuICAgICAgICAgICAgLy8gdG9kbzogZHJvcCBvbmUgcmFuZG9tIGJsb2NrXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5zdGFydEJnLm9uKCdwb2ludGVydXAnLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIEdhbWVBdWRpby5wbGF5U2Z4KCdnZWFyQW5pbScpO1xyXG4gICAgICAgICAgICBTdG9wVGl0bGUodGhpcyk7XHJcbiAgICAgICAgICAgIFN0YXJ0UGFzc2l2ZUxvYWRpbmcodGhpcyk7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgU3RhcnRHYW1lKHRoaXMpO1xyXG4gICAgICAgICAgICB9LCA1MCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgLy8gQ3JlYXRlQ2hhbm5lbCh0aGlzLFxyXG4gICAgICAgIC8vICAgICAnJyxcclxuICAgICAgICAvLyAgICAgKHR4dCkgPT4ge1xyXG4gICAgICAgIC8vICAgICAgICAgU2V0Rm9udDJDb21tb25Db250ZXh0U3R5bGUodHh0KTtcclxuICAgICAgICAvLyAgICAgICAgIFNldERlcHRoKHR4dCwgJ3R4dCcpO1xyXG4gICAgICAgIC8vICAgICB9LFxyXG4gICAgICAgIC8vICk7XHJcbiAgICAgICAgQ3JlYXRlR2FtZUF1ZGlvKHRoaXMsIEdhbWVEYXRhKTtcclxuICAgICAgICBDcmVhdGVFZngodGhpcyk7XHJcbiAgICAgICAgLy8gQ3JlYXRlU2V0dGluZyh0aGlzKTtcclxuICAgICAgICBDcmVhdGVHYW1lQ29tbW9uVUkodGhpcyk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGUodGltZSwgZGVsdGEpIHtcclxuICAgICAgICBVcGRhdGVHYW1lQ29tbW9uVUkoZGVsdGEpO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQmcoKSB7XHJcbiAgICAgICAgY29uc3QgYmdUZXh0dXJlTGlzdCA9IFsnYmdHcmVlbicsICdiZ0Jyb3duJywgJ2JnQmx1ZSddO1xyXG4gICAgICAgIGxldCBiZ1RleHR1cmVSbmRJZHggPSBHZXRSbmRJbnQoMCwgYmdUZXh0dXJlTGlzdC5sZW5ndGgpO1xyXG4gICAgICAgIHRoaXMuYmcgPSB0aGlzLmFkZC50aWxlU3ByaXRlKDAsIDAsIFZpZXcudywgVmlldy5oLCBiZ1RleHR1cmVMaXN0W2JnVGV4dHVyZVJuZElkeF0pLnNldE9yaWdpbigwKTtcclxuICAgICAgICB0aGlzLmNyZWF0ZUJnUm5kRGlyZWN0aW9uKCk7XHJcbiAgICAgICAgdGhpcy50d2VlbnMuYWRkQ291bnRlcih7XHJcbiAgICAgICAgICAgIGZyb206IDAsIHRvOiAxLCBkdXJhdGlvbjogMzAwMCwgcmVwZWF0OiAtMSxcclxuICAgICAgICAgICAgb25VcGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIHRoaXMuYmcudGlsZVBvc2l0aW9uWCArPSB0aGlzLmJnUm5kUG9zLng7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJnLnRpbGVQb3NpdGlvblkgKz0gdGhpcy5iZ1JuZFBvcy55O1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvblJlcGVhdDogKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgYmdUZXh0dXJlUm5kSWR4Kys7XHJcbiAgICAgICAgICAgICAgICBpZiAoYmdUZXh0dXJlUm5kSWR4ID49IGJnVGV4dHVyZUxpc3QubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgIGJnVGV4dHVyZVJuZElkeCA9IDA7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmJnLnNldFRleHR1cmUoYmdUZXh0dXJlTGlzdFtiZ1RleHR1cmVSbmRJZHhdKTtcclxuICAgICAgICAgICAgICAgIHRoaXMuY3JlYXRlQmdSbmREaXJlY3Rpb24oKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgY3JlYXRlQmdSbmREaXJlY3Rpb24oKSB7XHJcbiAgICAgICAgdGhpcy5iZ1JuZFBvcy54ID0gR2V0Um5kTnVtKC0zLCA0KTtcclxuICAgICAgICB0aGlzLmJnUm5kUG9zLnkgPSBHZXRSbmROdW0oLTMsIDQpO1xyXG4gICAgfVxyXG4gICAgYW5pbVJuZEFuZ2xlKGxpc3QpIHtcclxuICAgICAgICBHYW1lQXVkaW8ucGxheVNmeCgnZ2VhckFuaW0nKTtcclxuICAgICAgICBjb25zdCBybmRBbmdsZSA9IEdldFJuZE51bSgtMzAsIDMxKTtcclxuICAgICAgICBsaXN0Lm1hcChlbGUgPT4gZWxlLnNldEFuZ2xlKHJuZEFuZ2xlKSk7XHJcbiAgICAgICAgdGhpcy5jYW1lcmFzLm1haW4uc2hha2UoNTAsIDAuMDEsIHRydWUpO1xyXG4gICAgfVxyXG59XHJcbmV4cG9ydCBkZWZhdWx0IFRpdGxlU2NlbmU7XHJcbmV4cG9ydCB7IFN0YXJ0VGl0bGUsIFN0b3BUaXRsZSB9O1xyXG4iLCJpbXBvcnQgeyBDb21tb25TbnMsIEdldEFzc2V0RmlsZXMgfSBmcm9tIFwiQHNyYy9zY2VuZXMvYXNzZXRVdGlsc1wiO1xyXG5pbXBvcnQgeyBWaWV3IH0gZnJvbSBcIkBzcmMvdXNlclNldHRpbmdcIjtcclxuaW1wb3J0IFVJUHJvcHMgZnJvbSBcIi4uXCI7XHJcbmltcG9ydCBHYW1lRm9udCwgeyBTZXRGb250U3R5bGUgfSBmcm9tIFwiLi4vZm9udFwiO1xyXG5jb25zdCBDaGFubmVsQWR2ZXJ0aXNlID0ge1xyXG4gICAgdGV4dHVyZUxpc3Q6IFsnYmxhY2tTY3JlZW4nLCAnY2hhbm5lbEJ0bkRvd24nLCAnY2hhbm5lbEJ0blVwJywgJ2NoYW5uZWxMb2dvJyxdLFxyXG4gICAgeW91dHViZUJ0bkxheWVyOiBudWxsLFxyXG4gICAgeW91dHViZVBvcFVwTGF5ZXI6IG51bGwsXHJcbiAgICB5b3V0dWJlU2hvdzogKCkgPT4ge1xyXG4gICAgICAgIENoYW5uZWxBZHZlcnRpc2UueW91dHViZVBvcFVwTGF5ZXIuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgIH0sXHJcbiAgICB5b3V0dWJlSGlkZTogKCkgPT4ge1xyXG4gICAgICAgIENoYW5uZWxBZHZlcnRpc2UueW91dHViZVBvcFVwTGF5ZXIuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICB9LFxyXG4gICAgYmxvZ0J0bkxheWVyOiBudWxsLFxyXG4gICAgYmxvZ1BvcFVwTGF5ZXI6IG51bGwsXHJcbiAgICBibG9nU2hvdzogKCkgPT4ge1xyXG4gICAgICAgIENoYW5uZWxBZHZlcnRpc2UuYmxvZ1BvcFVwTGF5ZXIuc2V0VmlzaWJsZSh0cnVlKTtcclxuICAgIH0sXHJcbiAgICBibG9nSGlkZTogKCkgPT4ge1xyXG4gICAgICAgIENoYW5uZWxBZHZlcnRpc2UuYmxvZ1BvcFVwTGF5ZXIuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICB9LFxyXG59O1xyXG5jb25zdCBHZXRTbnNBc3NldHMgPSAoZXhjZXB0aW9uS2V5cykgPT4ge1xyXG4gICAgY29uc3QgYXNzZXRMaXN0ID0gW1xyXG4gICAgICAgIC8vIHlvdXR1YmVcclxuICAgICAgICB7IGtleTogJ3lvdXR1YmVMb2dvJywgdXJsOiBDb21tb25TbnMgKyAneW91dHViZUxvZ28ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgIHsga2V5OiAnY2hhbm5lbExvZ28nLCB1cmw6IENvbW1vblNucyArICdjaGFubmVsTG9nby5qcGcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgLy8gYmxvZ1xyXG4gICAgXTtcclxuICAgIHJldHVybiBHZXRBc3NldEZpbGVzKGFzc2V0TGlzdCwgZXhjZXB0aW9uS2V5cyk7XHJcbn07XHJcbmNvbnN0IEluaXRDaGFubmVsID0gKCkgPT4ge1xyXG4gICAgQ2hhbm5lbEFkdmVydGlzZS55b3V0dWJlSGlkZSgpO1xyXG59O1xyXG5jb25zdCBDcmVhdGVDaGFubmVsID0gKHNjZW5lLCB2aWRlb1VybCwgY29tbW9uVGV4dFN0eWxlLCBjaGFubmVsRGF0YSkgPT4ge1xyXG4gICAgdmFyIF9hLCBfYiwgX2MsIF9kO1xyXG4gICAgY29uc3QgYnRuVyA9IChfYSA9IGNoYW5uZWxEYXRhID09PSBudWxsIHx8IGNoYW5uZWxEYXRhID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjaGFubmVsRGF0YS53KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiA2MDtcclxuICAgIGNvbnN0IGJ0bkggPSAoX2IgPSBjaGFubmVsRGF0YSA9PT0gbnVsbCB8fCBjaGFubmVsRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hhbm5lbERhdGEuaCkgIT09IG51bGwgJiYgX2IgIT09IHZvaWQgMCA/IF9iIDogNDU7XHJcbiAgICBjb25zdCBidG5TY2FsZVRpbWUgPSAxLjE7XHJcbiAgICBjb25zdCBidG5CZyA9IHNjZW5lLmFkZC5pbWFnZSgoX2MgPSBjaGFubmVsRGF0YSA9PT0gbnVsbCB8fCBjaGFubmVsRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hhbm5lbERhdGEueCkgIT09IG51bGwgJiYgX2MgIT09IHZvaWQgMCA/IF9jIDogVmlldy5jZW50ZXJYLCAoX2QgPSBjaGFubmVsRGF0YSA9PT0gbnVsbCB8fCBjaGFubmVsRGF0YSA9PT0gdm9pZCAwID8gdm9pZCAwIDogY2hhbm5lbERhdGEueSkgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogVUlQcm9wcy5leGl0UG9zWSwgJ2NoYW5uZWxCdG5VcCcpO1xyXG4gICAgY29uc3QgYnRuTG9nbyA9IHNjZW5lLmFkZC5pbWFnZShidG5CZy54LCBidG5CZy55LCAneW91dHViZUxvZ28nKTtcclxuICAgIGJ0bkxvZ28uc2V0SW50ZXJhY3RpdmUoKTtcclxuICAgIGJ0bkxvZ28ub24oJ3BvaW50ZXJkb3duJywgKCkgPT4ge1xyXG4gICAgICAgIGJ0bkxvZ28uc2V0RGlzcGxheVNpemUoYnRuVyAqIGJ0blNjYWxlVGltZSwgYnRuSCAqIGJ0blNjYWxlVGltZSk7XHJcbiAgICAgICAgYnRuQmcuc2V0VGV4dHVyZSgnY2hhbm5lbEJ0bkRvd24nKTtcclxuICAgIH0pO1xyXG4gICAgYnRuTG9nby5vbigncG9pbnRlcnVwJywgKCkgPT4ge1xyXG4gICAgICAgIGJ0bkxvZ28uc2V0RGlzcGxheVNpemUoYnRuVywgYnRuSCk7XHJcbiAgICAgICAgYnRuQmcuc2V0VGV4dHVyZSgnY2hhbm5lbEJ0blVwc3MnKTtcclxuICAgICAgICBDaGFubmVsQWR2ZXJ0aXNlLnlvdXR1YmVTaG93KCk7XHJcbiAgICB9KTtcclxuICAgIGJ0bkxvZ28ub24oJ3BvaW50ZXJvdXQnLCAoKSA9PiB7XHJcbiAgICAgICAgYnRuTG9nby5zZXREaXNwbGF5U2l6ZShidG5XLCBidG5IKTtcclxuICAgICAgICBidG5CZy5zZXRUZXh0dXJlKCdjaGFubmVsQnRuVXAnKTtcclxuICAgIH0pO1xyXG4gICAgYnRuTG9nby5zZXREaXNwbGF5U2l6ZShidG5XLCBidG5IKTtcclxuICAgIENoYW5uZWxBZHZlcnRpc2UueW91dHViZUJ0bkxheWVyID0gc2NlbmUuYWRkLmxheWVyKFtcclxuICAgICAgICBidG5CZywgYnRuTG9nb1xyXG4gICAgXSk7XHJcbiAgICBjb25zdCBwb3BVcE1hcmdpbiA9IDcwO1xyXG4gICAgY29uc3QgY2hhbm5lbFVybCA9ICdodHRwczovL3d3dy55b3V0dWJlLmNvbS9jaGFubmVsL1VDQkpuRmdJUTlZT1JUaXoxMF9NZ3lfQSc7XHJcbiAgICBjb25zdCB2aWRlb1RodW1ibmFpbCA9IGBodHRwczovL2kxLnl0aW1nLmNvbS92aS8ke3ZpZGVvVXJsLnNwbGl0KCc9JylbMV19L2RlZmF1bHQuanBnYDtcclxuICAgIGNvbnN0IHBvcFVwQmcgPSBzY2VuZS5hZGQuaW1hZ2UoVmlldy5jZW50ZXJYLCBWaWV3LmNlbnRlclksICdibGFja1NjcmVlbicpO1xyXG4gICAgY29uc3QgcG9wVXBUaXRsZSA9IHNjZW5lLmFkZC50ZXh0KHBvcFVwQmcueCwgVmlldy5oIC8gOCwgJ015IFlvdXR1YmUnKTtcclxuICAgIGNvbnN0IHBvcFVwVHh0TGlzdCA9IFtdO1xyXG4gICAgY29uc3QgcG9wVXBNYWRlVmlkZW8gPSBzY2VuZS5hZGQuaW1hZ2UocG9wVXBCZy54LCBWaWV3LmNlbnRlclkgLSBwb3BVcE1hcmdpbiwgJycpO1xyXG4gICAgbGV0IHBvcFVwTWFkZVZpZGVvV0lQO1xyXG4gICAgcG9wVXBNYWRlVmlkZW8uc2V0RGlzcGxheVNpemUocG9wVXBNYXJnaW4sIHBvcFVwTWFyZ2luKTtcclxuICAgIGlmICghdmlkZW9VcmwpIHtcclxuICAgICAgICBwb3BVcE1hZGVWaWRlb1dJUCA9IHNjZW5lLmFkZC50ZXh0KHBvcFVwQmcueCwgVmlldy5jZW50ZXJZIC0gcG9wVXBNYXJnaW4sICcgICAgICAgICBTb3JyeSFcXG5Xb3JrIEluIFByb2dyZXNzJyk7XHJcbiAgICAgICAgcG9wVXBUeHRMaXN0LnB1c2gocG9wVXBNYWRlVmlkZW9XSVApO1xyXG4gICAgfVxyXG4gICAgY29uc3QgcG9wVXBNYWRlVmlkZW9UeHQgPSBzY2VuZS5hZGQudGV4dChwb3BVcEJnLngsIHBvcFVwTWFkZVZpZGVvLnkgKyBwb3BVcE1hcmdpbiwgJ0NyZWF0ZWQgdmlkZW8nKTtcclxuICAgIGNvbnN0IHBvcFVwQ2hhbm5lbCA9IHNjZW5lLmFkZC5pbWFnZShwb3BVcEJnLngsIHBvcFVwTWFkZVZpZGVvVHh0LnkgKyBwb3BVcE1hcmdpbiwgJ2NoYW5uZWxMb2dvJyk7XHJcbiAgICBjb25zdCBwb3BVcENoYW5uZWxUeHQgPSBzY2VuZS5hZGQudGV4dChwb3BVcEJnLngsIHBvcFVwQ2hhbm5lbC55ICsgcG9wVXBNYXJnaW4sICdUaGlzIGlzIG15IGNoYW5uZWwnKTtcclxuICAgIGNvbnN0IHBvcFVwRXhpdEd1aWRlID0gc2NlbmUuYWRkLnRleHQocG9wVXBCZy54LCBHYW1lRm9udC5ndWlkZVR4dFksICdwcmVzcyBhbnl3aGVyZSB0byBleGl0Jyk7XHJcbiAgICBwb3BVcFR4dExpc3QucHVzaChwb3BVcFRpdGxlLCBwb3BVcE1hZGVWaWRlb1R4dCwgcG9wVXBDaGFubmVsVHh0LCBwb3BVcEV4aXRHdWlkZSk7XHJcbiAgICBwb3BVcFR4dExpc3QubWFwKHR4dCA9PiBTZXRGb250U3R5bGUodHh0KSk7XHJcbiAgICBwb3BVcFR4dExpc3QubWFwKHR4dCA9PiBjb21tb25UZXh0U3R5bGUodHh0KSk7XHJcbiAgICBwb3BVcFRpdGxlLnNldEZvbnRTaXplKFZpZXcudyAvIDEyKTtcclxuICAgIHBvcFVwRXhpdEd1aWRlLnNldEFscGhhKFVJUHJvcHMuYWxwaGEpO1xyXG4gICAgcG9wVXBCZy5zZXRBbHBoYSgwLjQpO1xyXG4gICAgcG9wVXBCZy5zZXREaXNwbGF5U2l6ZShWaWV3LncsIFZpZXcuaCk7XHJcbiAgICBwb3BVcEJnLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICBwb3BVcEJnLm9uKCdwb2ludGVydXAnLCAoKSA9PiB7IENoYW5uZWxBZHZlcnRpc2UueW91dHViZUhpZGUoKTsgfSk7XHJcbiAgICBjb25zdCBvcGVuVXJsVGFiID0gKHVybCkgPT4geyB3aW5kb3cub3Blbih1cmwpOyB9O1xyXG4gICAgW3BvcFVwTWFkZVZpZGVvLCBwb3BVcE1hZGVWaWRlb1R4dF0ubWFwKCh2aWRlbykgPT4ge1xyXG4gICAgICAgIHZpZGVvLnNldEludGVyYWN0aXZlKCk7XHJcbiAgICAgICAgdmlkZW8ub24oJ3BvaW50ZXJ1cCcsICgpID0+IHsgb3BlblVybFRhYih2aWRlb1VybCk7IH0pO1xyXG4gICAgfSk7XHJcbiAgICBbcG9wVXBDaGFubmVsLCBwb3BVcENoYW5uZWxUeHRdLm1hcCgoY2hhbm5lbCkgPT4ge1xyXG4gICAgICAgIGNoYW5uZWwuc2V0SW50ZXJhY3RpdmUoKTtcclxuICAgICAgICBjaGFubmVsLm9uKCdwb2ludGVydXAnLCAoKSA9PiB7IG9wZW5VcmxUYWIoY2hhbm5lbFVybCk7IH0pO1xyXG4gICAgfSk7XHJcbiAgICBbcG9wVXBDaGFubmVsLCBwb3BVcE1hZGVWaWRlb10ubWFwKChlbGUpID0+IHtcclxuICAgICAgICBlbGUuc2V0RGlzcGxheVNpemUocG9wVXBNYXJnaW4sIHBvcFVwTWFyZ2luKTtcclxuICAgIH0pO1xyXG4gICAgQ2hhbm5lbEFkdmVydGlzZS55b3V0dWJlUG9wVXBMYXllciA9IHNjZW5lLmFkZC5sYXllcihbXHJcbiAgICAgICAgcG9wVXBCZywgcG9wVXBNYWRlVmlkZW8sIHBvcFVwQ2hhbm5lbCwgLi4ucG9wVXBUeHRMaXN0XHJcbiAgICBdKTtcclxuICAgIEluaXRDaGFubmVsKCk7XHJcbiAgICByZXR1cm4gQ2hhbm5lbEFkdmVydGlzZTtcclxufTtcclxuY29uc3QgSW5pdEJsb2cgPSAoKSA9PiB7XHJcbn07XHJcbmNvbnN0IENyZWF0ZUJsb2cgPSAoc2NlbmUsIGJsb2dVcmwsIGNvbW1vblRleHRTdHlsZSwgY2hhbm5lbERhdGEpID0+IHtcclxuICAgIEluaXRCbG9nKCk7XHJcbn07XHJcbmV4cG9ydCBkZWZhdWx0IENoYW5uZWxBZHZlcnRpc2U7XHJcbmV4cG9ydCB7IEdldFNuc0Fzc2V0cywgSW5pdENoYW5uZWwsIENyZWF0ZUNoYW5uZWwsIEluaXRCbG9nLCBDcmVhdGVCbG9nLCB9O1xyXG4iLCIvLyBpbXBvcnQgUGhhc2VyIGZyb20gJ3BoYXNlcic7XHJcbmltcG9ydCBUaXRsZVNjZW5lLCB7IFN0YXJ0VGl0bGUgfSBmcm9tICcuL3NjZW5lcy90aXRsZSc7XHJcbmltcG9ydCBHYW1lU2NlbmUgZnJvbSAnLi9zY2VuZXMvZ2FtZSc7XHJcbmltcG9ydCB7IEdldEdhbWVBdWRpb0Fzc2V0cyB9IGZyb20gJ0BzcmMvc2NlbmVzL2F1ZGlvJztcclxuaW1wb3J0IHsgR2V0U25zQXNzZXRzIH0gZnJvbSAnQHNyYy9zY2VuZXMvdWkvc25zJztcclxuaW1wb3J0IHsgR2V0R2FnZUFzc2V0cyB9IGZyb20gJ0BzcmMvc2NlbmVzL3VpL2dhZ2UnO1xyXG5pbXBvcnQgeyBHZXRHYW1lQ29tbW9uVUlBc3NldHMgfSBmcm9tICdAc3JjL3NjZW5lcy91aSc7XHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW5TY2VuZSBleHRlbmRzIFBoYXNlci5TY2VuZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGtleTogJ21haW4nLFxyXG4gICAgICAgICAgICBhY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgaW5pdCgpIHtcclxuICAgICAgICB0aGlzLmdhbWUuc2NlbmUuYWRkKCd0aXRsZScsIFRpdGxlU2NlbmUsIGZhbHNlKTtcclxuICAgICAgICB0aGlzLmdhbWUuc2NlbmUuYWRkKCdnYW1lJywgR2FtZVNjZW5lLCBmYWxzZSk7XHJcbiAgICB9XHJcbiAgICBjcmVhdGUoKSB7XHJcbiAgICAgICAgU3RhcnRUaXRsZSh0aGlzKTtcclxuICAgIH1cclxufVxyXG5jb25zdCBBc3NldFVybCA9ICdodHRwczovL3NpbHZlcnRyZWU3NjIyLmdpdGh1Yi5pby93ZWJnYW1lcy9ibG9ja1BhbmcvYXNzZXRzLyc7XHJcbmV4cG9ydCBsZXQgQXNzZXRzID0ge1xyXG4gICAgZHluYW1pYzogW1xyXG4gICAgICAgIGFzeW5jICgpID0+IHtcclxuICAgICAgICAgICAgbGV0IGxpc3QgPSBbXHJcbiAgICAgICAgICAgICAgICAvLyBwYXJ0aWNsZVxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIGtleTogJ3BhcnRpY2xlU3ByaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3BhcnRpY2xlU3ByaXRlLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAganNvbjogYXdhaXQgcmVxdWlyZSgnLi9hc3NldHMvcGFydGljbGVzL3BhcnRpY2xlU3ByaXRlLmpzb24nKSxcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnYXRsYXMnXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdkaWFtb25kMScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnZGlhbW9uZDEucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdkaWFtb25kMicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnZGlhbW9uZDIucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdkaWFtb25kMycsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnZGlhbW9uZDMucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdkaWFtb25kNCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnZGlhbW9uZDQucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdrZXkxJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdrZXkxLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAna2V5MicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAna2V5Mi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2tleTMnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2tleTMucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdrZXk0JywgdXJsOiBhd2FpdCBBc3NldFVybCArICdrZXk0LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAncnVieTEnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3J1YnkxLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAncnVieTInLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3J1YnkyLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAncnVieTMnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3J1YnkzLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAncnVieTQnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3J1Ynk0LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnaGVhcnQnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2hlYXJ0LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIC8vIHVpXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2JnQmx1ZScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYmdCbHVlLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnYmdCcm93bicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYmdCcm93bi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2JnR3JlZW4nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2JnR3JlZW4ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdidG5CbHVlJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdidG5CbHVlLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnYnRuQnJvd24nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2J0bkJyb3duLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnYnRuR3JlZW4nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2J0bkdyZWVuLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAncGFuZWxHcmVlbicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAncGFuZWxHcmVlbi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3BhbmVsQmx1ZScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAncGFuZWxCbHVlLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAncGFuZWxCcm93bicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAncGFuZWxCcm93bi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ292ZXJCdG5VcEJsdWUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ292ZXJCdG5VcEJsdWUucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdvdmVyQnRuVXBCcm93bicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnb3ZlckJ0blVwQnJvd24ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdvdmVyQnRuVXBHcmVlbicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnb3ZlckJ0blVwR3JlZW4ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdvdmVyQnRuRG93bkJsdWUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ292ZXJCdG5Eb3duQmx1ZS5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ292ZXJCdG5Eb3duQnJvd24nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ292ZXJCdG5Eb3duQnJvd24ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdvdmVyQnRuRG93bkdyZWVuJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdvdmVyQnRuRG93bkdyZWVuLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIC8vIHsga2V5OiAnYmxhY2tTY3JlZW4nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2JsYWNrU2NyZWVuLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIC8vIHsga2V5OiAnZXhpdEJ0bicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnZXhpdEJ0bi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RpdGxlQ29udGV4dEJnJywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0aXRsZUNvbnRleHRCZy5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2F1ZGlvT24nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2F1ZGlvT24ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdhdWRpb09mZicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYXVkaW9PZmYucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdtdXNpY09uJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdtdXNpY09uLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnbXVzaWNPZmYnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ211c2ljT2ZmLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnY29sb3JCYWNrZ3JvdW5kJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdjb2xvckJhY2tncm91bmQucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdjb2xvckhhbmRsZScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnY29sb3JIYW5kbGUucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdjb2xvckhhbmRsZURvd24nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2NvbG9ySGFuZGxlRG93bi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ292ZXJCYWNrJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdvdmVyQmFjay5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ292ZXJSZXRyeScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnb3ZlclJldHJ5LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnc2V0dGluZ0J0bicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnc2V0dGluZ0J0bi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3NldHRpbmdQYW5lbCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnc2V0dGluZ1BhbmVsLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnc2V0dGluZ092ZXJCdG5VcCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnc2V0dGluZ092ZXJCdG5VcC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3NldHRpbmdPdmVyQnRuRG93bicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnc2V0dGluZ092ZXJCdG5Eb3duLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnYnRuU2V0dGluZ0Rvd24nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2J0blNldHRpbmdEb3duLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnYnRuU2V0dGluZ1VwJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdidG5TZXR0aW5nVXAucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdzY3JlZW5TbWFsbGVyJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdzY3JlZW5TbWFsbGVyLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnc2NyZWVuTGFyZ2VyJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdzY3JlZW5MYXJnZXIucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd3YXJuaW5nU2lnbicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnd2FybmluZ1NpZ24ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgLy8gdWkgc2NlbmVcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnY2xvdWQxJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdjbG91ZDEucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdjbG91ZDInLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2Nsb3VkMi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2Nsb3VkMycsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnY2xvdWQzLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnY2xvdWQ0JywgdXJsOiBhd2FpdCBBc3NldFVybCArICdjbG91ZDQucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdjbG91ZDUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2Nsb3VkNS5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2Nsb3VkNicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnY2xvdWQ2LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnY2xvdWQ3JywgdXJsOiBhd2FpdCBBc3NldFVybCArICdjbG91ZDcucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdjbG91ZDgnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2Nsb3VkOC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2Nsb3VkOScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnY2xvdWQ5LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTEnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUwMS5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUyJywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMDIucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMycsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTAzLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTQnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUwNC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWU1JywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMDUucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlNicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTA2LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTcnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUwNy5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWU4JywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMDgucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlOScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTA5LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTEwJywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMTAucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMTEnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUxMS5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUxMicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTEyLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTEzJywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMTMucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMTQnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUxNC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUxNScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTE1LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTE2JywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMTYucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMTcnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUxNy5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUxOCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTE4LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTE5JywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMTkucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMjAnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUyMC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUyMScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTIxLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTIyJywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMjIucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMjMnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUyMy5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUyNCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTI0LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTI1JywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMjUucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMjYnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUyNi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUyNycsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTI3LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTI4JywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMjgucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMjknLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUyOS5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUzMCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTMwLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTMxJywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMzEucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMzInLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUzMi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3RyZWUzMycsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJlZTMzLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAndHJlZTM0JywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0cmVlMzQucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmVlMzUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyZWUzNS5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ21pc3QxJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdtaXN0MS5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ21pc3QyJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdtaXN0Mi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ21pc3QzJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdtaXN0My5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ21pc3Q0JywgdXJsOiBhd2FpdCBBc3NldFVybCArICdtaXN0NC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICAvLyBzaGFwZVxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdibHVlQmFsbCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYmx1ZUJhbGwucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdncmVlbkJhbGwnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2dyZWVuQmFsbC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2Jyb3duQmFsbCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYnJvd25CYWxsLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnb2JzdGFjbGVCYWxsJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdvYnN0YWNsZUJhbGwucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdibHVlUmVjdCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYmx1ZVJlY3QucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdncmVlblJlY3QnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2dyZWVuUmVjdC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2Jyb3duUmVjdCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYnJvd25SZWN0LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnb2JzdGFjbGVSZWN0JywgdXJsOiBhd2FpdCBBc3NldFVybCArICdvYnN0YWNsZVJlY3QucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdibHVlU3F1YXJlJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdibHVlU3F1YXJlLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnZ3JlZW5TcXVhcmUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2dyZWVuU3F1YXJlLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnYnJvd25TcXVhcmUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2Jyb3duU3F1YXJlLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnb2JzdGFjbGVTcXVhcmUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ29ic3RhY2xlU3F1YXJlLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnbG9ja2VkUmVjdGFuZ2xlJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdibG9ja19sb2NrZWRfbGFyZ2UucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdsb2NrZXRTcXVhcmUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2Jsb2NrX2xvY2tlZF9zcXVhcmUucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdrZXknLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2tleS5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICAvLyB0eXBlXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ2Fycm93TGVmdCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYXJyb3dMZWZ0LnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnbG9ja2VkJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdsb2NrZWQucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdwYXR0ZXJuJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdwYXR0ZXJuLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAncG93ZXInLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3Bvd2VyLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAncmFuZG9tJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdyYW5kb20ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdzaWduYWwxJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdzaWduYWwxLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnc2lnbmFsMicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnc2lnbmFsMi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3NpZ25hbDMnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3NpZ25hbDMucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICdzdGFyJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdzdGFyLnBuZycsIHR5cGU6ICdpbWFnZScgfSxcclxuICAgICAgICAgICAgICAgIHsga2V5OiAnc3dpcGVMZWZ0JywgdXJsOiBhd2FpdCBBc3NldFVybCArICdzd2lwZUxlZnQucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0b3VjaCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndG91Y2gucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmFzaGNhbicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndHJhc2hjYW4ucG5nJywgdHlwZTogJ2ltYWdlJyB9LFxyXG4gICAgICAgICAgICAgICAgeyBrZXk6ICd0cmFzaGNhbk9wZW4nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3RyYXNoY2FuT3Blbi5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICB7IGtleTogJ3VubG9ja2VkJywgdXJsOiBhd2FpdCBBc3NldFVybCArICd1bmxvY2tlZC5wbmcnLCB0eXBlOiAnaW1hZ2UnIH0sXHJcbiAgICAgICAgICAgICAgICAvLyBjb21tb25cclxuICAgICAgICAgICAgICAgIC4uLkdldEdhbWVDb21tb25VSUFzc2V0cygpLFxyXG4gICAgICAgICAgICAgICAgLi4uR2V0U25zQXNzZXRzKCksXHJcbiAgICAgICAgICAgICAgICAuLi5HZXRHYWdlQXNzZXRzKCd5ZWxsb3cnKSxcclxuICAgICAgICAgICAgICAgIC8vIGF1ZGlvXHJcbiAgICAgICAgICAgICAgICAuLi5HZXRHYW1lQXVkaW9Bc3NldHMoW1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIHZvaWNlIHNmeFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAndm9pY2UxJywgdXJsOiBhd2FpdCBBc3NldFVybCArICcxLm1wMycsIHR5cGU6ICdhdWRpbycgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ3ZvaWNlMicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnMi5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICd2b2ljZTMnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJzMubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAndm9pY2U0JywgdXJsOiBhd2FpdCBBc3NldFVybCArICc0Lm1wMycsIHR5cGU6ICdhdWRpbycgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ3ZvaWNlNScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnNS5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICd2b2ljZTYnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJzYubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAndm9pY2U3JywgdXJsOiBhd2FpdCBBc3NldFVybCArICc3Lm1wMycsIHR5cGU6ICdhdWRpbycgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ3ZvaWNlOCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnOC5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICd2b2ljZTknLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJzkubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAndm9pY2UxMCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnMTAubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAndm9pY2VHbycsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnZ28ubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAndm9pY2VIaWdoU2NvcmUnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ25ld19oaWdoc2NvcmUubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAndm9pY2VUaW1lT3ZlcicsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndGltZV9vdmVyLm1wMycsIHR5cGU6ICdhdWRpbycgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ3ZvaWNlR2FtZU92ZXInLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2dhbWVfb3Zlci5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3RoZXIgc2Z4XHJcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICdnZWFyQW5pbScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnZ2VhckFuaW0ubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnZWFydGhxdWFrZScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnZWFydGhxdWFrZS5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICd0b3VjaFNmeCcsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAndG91Y2hTZngubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnbG9hZGluZ0Jsb2NrRG9uZScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnbG9hZGluZ0Jsb2NrRG9uZS5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICdsb2FkaW5nQmxvY2tPblByb2Nlc3MnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ2xvYWRpbmdCbG9ja09uUHJvY2Vzcy5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICdwb3dlckJsb2NrT24nLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3Bvd2VyQmxvY2tPbi5tcDMnLCB0eXBlOiAnYXVkaW8nIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgeyBrZXk6ICdwb3dlckJsb2NrT2ZmJywgdXJsOiBhd2FpdCBBc3NldFVybCArICdwb3dlckJsb2NrT2ZmLm1wMycsIHR5cGU6ICdhdWRpbycgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ3NwYXduT2JzdGFjbGVTZngnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3NwYXduT2JzdGFjbGVTZngubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAndGltZUluY3JlYXNlU2Z4JywgdXJsOiBhd2FpdCBBc3NldFVybCArICd0aW1lSW5jcmVhc2VTZngubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnc2NvcmVTZngnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3Njb3JlU2Z4Lm1wMycsIHR5cGU6ICdhdWRpbycgfSxcclxuICAgICAgICAgICAgICAgICAgICB7IGtleTogJ3dhcm5pbmdTZngnLCB1cmw6IGF3YWl0IEFzc2V0VXJsICsgJ3dhcm5pbmdTZngubXAzJywgdHlwZTogJ2F1ZGlvJyB9LFxyXG4gICAgICAgICAgICAgICAgXSwgW1xyXG4gICAgICAgICAgICAgICAgICAgIHsga2V5OiAnZ2FtZUJnbScsIHVybDogYXdhaXQgQXNzZXRVcmwgKyAnYmxvY2twYW5nYmdtLm1wMycsIHR5cGU6ICdhdWRpbycgfSxcclxuICAgICAgICAgICAgICAgIF0pLFxyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcclxuICAgICAgICB9XHJcbiAgICBdLFxyXG59O1xyXG4iXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzNFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNuQkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDekxBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDZEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDL0VBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNsS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDakdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdEZBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDNUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM3Q0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM3QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDMUdBO0FBQ0E7QUFDQTtBQUNBOzs7QUNIQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDZkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3ZJQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM1SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDL0JBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDaENBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMvSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDM0hBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ25LQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUNwSkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdkdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM5SEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3RWQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2xKQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ3pGQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMzT0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FDM1FBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDMUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM5QkE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDNUJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDM0RBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ2xMQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDeERBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FDdkVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUMvR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQzFPQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM3R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUM5R0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Iiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///530\n")},442:g=>{"use strict";g.exports=JSON.parse('{"frames":{"blue":{"frame":{"x":2,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}},"green":{"frame":{"x":132,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}},"red":{"frame":{"x":262,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}},"white":{"frame":{"x":392,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}},"yellow":{"frame":{"x":522,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}}},"meta":{"app":"http://www.codeandweb.com/texturepacker","version":"1.0","image":"flares.png","format":"RGBA8888","size":{"w":652,"h":132},"scale":"1","smartupdate":"$TexturePacker:SmartUpdate:f2781d89823d5a67fc31381af364b421:da82646b19b2f0c08684086824b1e581:71625947cf221c10549b852c13ffedc7$"}}')}}]);