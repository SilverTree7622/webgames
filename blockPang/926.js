(self.webpackChunkplayable_ad_test=self.webpackChunkplayable_ad_test||[]).push([[926],{926:(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";eval("// ESM COMPAT FLAG\n__webpack_require__.r(__webpack_exports__);\n\n// EXPORTS\n__webpack_require__.d(__webpack_exports__, {\n  \"Assets\": () => (/* binding */ Assets),\n  \"default\": () => (/* binding */ MainScene)\n});\n\n// EXTERNAL MODULE: ./src/userSetting.ts\nvar userSetting = __webpack_require__(453);\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/index.ts\nconst ContextLayerMargin = 120;\r\nconst SettingGapContextMargin = 50;\r\nconst SettingGapContextMarginLarger = 70;\r\nconst SettingContextMargin = 40;\r\nconst SettingTopContextMargin = 80;\r\n\r\n\n;// CONCATENATED MODULE: ./src/utils/storage.ts\n// compare item is in the data then \r\nconst CompareCallback = (data, item) => {\r\n    const isItemExistInData = data[item];\r\n    if (isItemExistInData !== undefined || null)\r\n        return true;\r\n    else {\r\n        console.warn('item is not matched to actual data type:', item, data);\r\n        return false;\r\n    }\r\n};\r\nconst GameName = document.title; // get game title name\r\nconst GetLocalStorageData = (defaultData) => {\r\n    const data = window.localStorage.getItem(GameName);\r\n    if (data)\r\n        return JSON.parse(data);\r\n    else {\r\n        window.localStorage.setItem(GameName, JSON.stringify(defaultData));\r\n        return defaultData;\r\n    }\r\n};\r\nconst GetLocalStorageItem = (defaultData, item) => {\r\n    const gameData = GetLocalStorageData(defaultData);\r\n    let list = (typeof item === 'string' ? [item] : [...item]).map((ele) => {\r\n        let returnItem = gameData[ele];\r\n        if (CompareCallback(gameData, ele))\r\n            return returnItem;\r\n    });\r\n    // console.log('item, list: ', item, list);\r\n    if (list.length === 1)\r\n        return list[0];\r\n    else if (item.length === list.length)\r\n        return list;\r\n};\r\nconst SetLocalStorageItem = (defaultData, item, value) => {\r\n    let gameData = GetLocalStorageData(defaultData);\r\n    if (gameData)\r\n        gameData[item] = value;\r\n    window.localStorage.setItem(GameName, JSON.stringify(gameData));\r\n    // console.log('gameData, best: ', gameData, gameData.best);\r\n    return gameData;\r\n};\r\nconst RemoveLocalStorageItem = (defaultData, item) => {\r\n    SetLocalStorageItem(defaultData, item, null);\r\n};\r\nconst ClearGameLocalStorageData = () => {\r\n    window.localStorage.removeItem(GameName);\r\n};\r\nconst ClearAllLocalStorageItem = () => {\r\n    window.localStorage.clear();\r\n};\r\nconst DebugLocalStorage = (scene, defaultData, items) => {\r\n    scene.input.mouse.disableContextMenu();\r\n    scene.input.on('pointerdown', function (pointer) {\r\n        if (pointer.rightButtonDown()) {\r\n            console.log(GetLocalStorageData(defaultData));\r\n            return;\r\n        }\r\n        if (pointer.middleButtonDown()) {\r\n            if (items instanceof Array)\r\n                items.map(ele => SetLocalStorageItem(defaultData, ele.item, ele.value));\r\n            else\r\n                SetLocalStorageItem(defaultData, items.item, items.value);\r\n            SetLocalStorageItem(defaultData, 'best', 0);\r\n            return;\r\n        }\r\n    });\r\n};\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/assetUtils.ts\nconst CommonRootUrl = 'https://silvertree7622.github.io/webgames/';\r\nconst CommonAssets = CommonRootUrl + 'assets/';\r\nconst CommonUI = CommonAssets + 'ui/';\r\nconst CommonSfx = CommonAssets + 'audio/sfx/';\r\nconst CommonSns = CommonRootUrl + 'sns/';\r\n/** get common asset file with exception key (when if u worry about nested things)\r\n * @param assetList common custom assest list compose of the key, url, etc\r\n * @param exceptionKeys exception key which u worry about the nested things\r\n * @returns filtered asset list\r\n */\r\nconst GetAssetFiles = (assetList, exceptionKeys) => {\r\n    if (!exceptionKeys)\r\n        return assetList;\r\n    let filteredList;\r\n    // one key to except from asset list\r\n    if (typeof exceptionKeys === 'string') {\r\n        filteredList = assetList.filter(asset => asset.key !== exceptionKeys);\r\n    }\r\n    // several key list to except from asset list\r\n    else {\r\n        filteredList = assetList.filter((asset) => {\r\n            return exceptionKeys.indexOf(asset.key) < 0;\r\n        });\r\n    }\r\n    return filteredList;\r\n};\r\n/* harmony default export */ const assetUtils = ((/* unused pure expression or super */ null && (CommonRootUrl)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/audio/index.ts\n\r\n\r\nconst GameAudio = {\r\n    wholeGameData: {},\r\n    bgmList: [],\r\n    sfxList: [],\r\n    bgmKeyList: [],\r\n    sfxKeyList: [],\r\n    isBgmMute: false,\r\n    isSfxMute: false,\r\n    bgmVolume: 0.5,\r\n    sfxVolume: 0.5,\r\n    setBgmMute: function (isMute) {\r\n        this.isBgmMute = isMute;\r\n        this.bgmList.forEach(bgm => bgm.setMute(isMute));\r\n        if (isMute)\r\n            this.bgmKeyList.map(key => this.pauseBgm(key));\r\n        else\r\n            this.bgmKeyList.map(key => this.resumeBgm(key));\r\n        SetLocalStorageItem(GameAudio.wholeGameData, 'isBgmMute', isMute);\r\n        return this;\r\n    },\r\n    setSfxMute: function (isMute) {\r\n        this.isSfxMute = isMute;\r\n        this.sfxList.forEach(sfx => sfx.setMute(isMute));\r\n        SetLocalStorageItem(GameAudio.wholeGameData, 'isSfxMute', isMute);\r\n        return this;\r\n    },\r\n    setBgmVolume: function (volume) {\r\n        this.bgmVolume = volume;\r\n        this.bgmList.forEach(bgm => bgm.setVolume(volume));\r\n        SetLocalStorageItem(GameAudio.wholeGameData, 'bgmVolume', volume);\r\n        return this;\r\n    },\r\n    setSfxVolume: function (volume) {\r\n        this.sfxVolume = volume;\r\n        this.sfxList.forEach(sfx => sfx.setVolume(volume));\r\n        SetLocalStorageItem(GameAudio.wholeGameData, 'sfxVolume', volume);\r\n        return this;\r\n    },\r\n    playBgm: function (key) {\r\n        const playBgm = this.bgmList.find(bgm => bgm.key === key);\r\n        if (playBgm)\r\n            playBgm.play();\r\n        else\r\n            console.warn(`[Audio] playBgm: ${key} not found`);\r\n        return this;\r\n    },\r\n    pauseBgm: function (key) {\r\n        const bgm = this.bgmList.find(bgm => bgm.key === key);\r\n        if (bgm)\r\n            bgm.pause();\r\n        return this;\r\n    },\r\n    resumeBgm: function (key) {\r\n        const bgm = this.bgmList.find(bgm => bgm.key === key);\r\n        if (bgm)\r\n            bgm.resume();\r\n        return this;\r\n    },\r\n    stopBgm: function (key) {\r\n        const bgm = this.bgmList.find(bgm => bgm.key === key);\r\n        if (bgm)\r\n            bgm.stop();\r\n        return this;\r\n    },\r\n    playSfx: function (key) {\r\n        const playSfx = this.sfxList.find(sfx => sfx.key === key);\r\n        if (playSfx)\r\n            playSfx.play();\r\n        else\r\n            console.warn(`[Audio] playSfx: ${key} not found`);\r\n        return this;\r\n    },\r\n    stopSfx: function (key) {\r\n        const sfx = this.sfxList.find(sfx => sfx.key === key);\r\n        if (sfx)\r\n            sfx.stop();\r\n        return this;\r\n    },\r\n    // play & stop control for instance any sfx\r\n    playSfxInstanceLoop: function (instance) {\r\n        if (!this.sfxKeyList.find(key => key === instance.key))\r\n            return;\r\n        instance.play({\r\n            mute: GetLocalStorageItem(GameAudio.wholeGameData, 'isSfxMute'),\r\n            volume: GetLocalStorageItem(GameAudio.wholeGameData, 'sfxVolume'),\r\n            loop: true,\r\n        });\r\n        return this;\r\n    },\r\n    stopSfxInstanceLoop: function (instance) {\r\n        if (!this.sfxKeyList.find(key => key === instance.key))\r\n            return;\r\n        instance.stop();\r\n        instance.removeAllListeners();\r\n        instance.destroy();\r\n        return this;\r\n    },\r\n};\r\nconst GameDataAudio = {\r\n    bgmVolume: 0.5,\r\n    sfxVolume: 0.5,\r\n    isBgmMute: false,\r\n    isSfxMute: false,\r\n};\r\nconst GetAudioAssets = (sfxKeyList, bgmKeyList, exceptionKeys) => {\r\n    GameAudio.sfxKeyList = GetAssetFiles(sfxKeyList, exceptionKeys).map(asset => asset.key);\r\n    if (bgmKeyList)\r\n        GameAudio.bgmKeyList = GetAssetFiles(bgmKeyList, exceptionKeys).map(asset => asset.key);\r\n    else\r\n        GameAudio.bgmKeyList = [];\r\n    return [\r\n        ...sfxKeyList,\r\n        ...bgmKeyList,\r\n    ];\r\n};\r\nconst InitGameAudio = () => {\r\n    const [bgmVolume, sfxVolume, isBgmMute, isSfxMute] = GetLocalStorageItem(GameAudio.wholeGameData, ['bgmVolume', 'sfxVolume', 'isBgmMute', 'isSfxMute']);\r\n    GameAudio.setBgmVolume(bgmVolume);\r\n    GameAudio.setSfxVolume(sfxVolume);\r\n    GameAudio.setBgmMute(isBgmMute);\r\n    GameAudio.setSfxMute(isSfxMute);\r\n};\r\nconst CreateGameAudio = (scene, gameData) => {\r\n    GameAudio.wholeGameData = gameData;\r\n    GameAudio.bgmList = GameAudio.bgmKeyList && GameAudio.bgmKeyList.map(key => scene.sound.add(key, { loop: true }));\r\n    GameAudio.sfxList = GameAudio.sfxKeyList && GameAudio.sfxKeyList.map(key => scene.sound.add(key));\r\n    InitGameAudio();\r\n};\r\n/* harmony default export */ const audio = (GameAudio);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/depth/index.ts\nconst Depth = {\r\n    tree: 90,\r\n    block: 100,\r\n    cloud: 120,\r\n    mist: 120,\r\n    wall: 140,\r\n    txt: 150,\r\n    popUp: 400,\r\n    setting: 500,\r\n    warning: 600,\r\n    gameOver: 1000,\r\n    particle: 1100,\r\n    newBest: 1200,\r\n    highest: 1500,\r\n    fullScreen: 1600,\r\n};\r\nconst SetDepth = (targetObj, type) => {\r\n    if (!Depth[type]) {\r\n        console.warn('SetDepth: type is not found in the depth list:', targetObj, type);\r\n        console.log('targetObj, type: ', targetObj, type);\r\n        return;\r\n    }\r\n    if (targetObj.setDepth)\r\n        targetObj.setDepth(Depth[type]);\r\n    else\r\n        console.warn('SetDepth: targetObj is not Phaser.GameObjects');\r\n};\r\n/* harmony default export */ const depth = ((/* unused pure expression or super */ null && (Depth)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/font/index.ts\n\r\nconst TxtTitleHeadSize = 50;\r\nconst TxtTitleSize = 30;\r\nconst TxtTitleHeightGap = 60;\r\nconst TxtOverHeadSize = userSetting/* View.w */.G7.w / 4;\r\nconst TxtMargin = 26;\r\nconst TxtPadding = 8;\r\nconst TxtAlpha = 0.9;\r\nconst TxtSize = 20;\r\nconst TxtFamily = 'Arial Black';\r\nconst TxtBackgroundColor = '#242424';\r\nconst ContextMarginW = userSetting/* View.w */.G7.w / 12;\r\nconst ContextMarginH = userSetting/* View.h */.G7.h / 12;\r\nconst SetFont2CommonContextStyle = (text) => {\r\n    text.setOrigin(0.5, 0.5);\r\n    text.setFontSize(TxtSize);\r\n    text.setFontFamily(TxtFamily);\r\n    return text;\r\n};\r\n\r\n\n// EXTERNAL MODULE: ./src/utils/math.ts\nvar math = __webpack_require__(774);\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/basic.ts\n// import Phaser from 'phaser';\r\n\r\n\r\n\r\nclass BasicBlock extends Phaser.GameObjects.Container {\r\n    // public testObj;\r\n    constructor(scene) {\r\n        super(scene, 0, 0);\r\n        this.isEvtCreated = false;\r\n        this.typeName = '';\r\n        this.spawnChance = 0;\r\n        this.score = 0;\r\n        this.bData = {};\r\n        this.isOnScreen = false;\r\n        this.initPrpoerties();\r\n        this.initChildren(scene);\r\n        this.initPhysics(scene);\r\n        SetDepth(this, 'block');\r\n        scene.add.existing(this);\r\n    }\r\n    initPrpoerties() {\r\n        this.id = `${new Date().getTime()}-${Phaser.Math.RND.uuid()}`;\r\n    }\r\n    initChildren(scene) {\r\n        this.shapeImg = scene.add.image(0, 0, 'ball');\r\n        this.typeTxt = scene.add.text(0, 0, '');\r\n        this.typeImg = scene.add.image(0, 0, '');\r\n        SetFont2CommonContextStyle(this.typeTxt);\r\n        this.initTypeTxt();\r\n        this.add([this.shapeImg, this.typeTxt, this.typeImg]);\r\n        // this.testObj = scene.matter.add.image(View.centerX, 0, 'ball');\r\n        // this.testObj.setCircle(40, 40);\r\n        // this.testObj.setBounce(1);\r\n        // console.log('this.testObj: ', this.testObj);\r\n    }\r\n    initPhysics(scene) {\r\n        // number is meaningless just default value\r\n        // for add container to matter game object\r\n        this.setSize(100, 100);\r\n        // add to matter game object\r\n        this.physicsCon = scene.matter.add.gameObject(this);\r\n        this.physicsCon.setFriction(0.005);\r\n        this.physicsCon.setBounce(1);\r\n        this.physicsCon.setSensor(true);\r\n    }\r\n    getBody() { return this.body; }\r\n    getShape() { return this.shape; }\r\n    addShape(shape) { this.shape = Object.assign(Object.assign({}, this.shape), shape); return this; }\r\n    setShape(shape) { this.shape = shape; return this; }\r\n    getShapeName() { return this.shapeName; }\r\n    setShapeName(name) { this.shapeName = name; return this; }\r\n    getShapeImg() { return this.shapeImg; }\r\n    getScore() { return this.score; }\r\n    setScore(score) { this.score = score; return this; }\r\n    addScore(score) { this.score += score; return this; }\r\n    getTimeIncrease() { return this.timeIncrease; }\r\n    setTimeIncrease(data) {\r\n        this.timeIncrease = {\r\n            chance: data.chance,\r\n            value: data.value\r\n        };\r\n        return this;\r\n    }\r\n    getSpawnRndChance() { return this.spawnChance; }\r\n    setSpawnRndChance(chanceNum) { return this.spawnChance = chanceNum; }\r\n    getTypeImg() { return this.typeImg; }\r\n    setTypeImg(typeTexture) {\r\n        if (!typeTexture)\r\n            this.typeImg.setVisible(false);\r\n        this.typeImg.setTexture(typeTexture);\r\n        return this;\r\n    }\r\n    setTypeImgDisplaySize(width, height) { this.typeImg.setDisplaySize(width, height); return this; }\r\n    initTypeTxt() {\r\n        this.setTypeTxtVisible(false);\r\n        this.setTypeTxt('');\r\n        this.typeTxt.setFontSize(50);\r\n        return this;\r\n    }\r\n    getTypeTxt() { return this.typeTxt; }\r\n    setTypeTxt(text) {\r\n        if (!this.typeTxt.visible)\r\n            this.typeTxt.setVisible(true);\r\n        if (!text)\r\n            this.typeTxt.setVisible(false);\r\n        this.typeTxt.setText(text);\r\n        return this;\r\n    }\r\n    setTypeTxtVisible(visible) { this.typeTxt.setVisible(visible); return this; }\r\n    getTypeName() { return this.typeName; }\r\n    setTypeName(typeName) { return this.typeName = typeName; }\r\n    getBlockData() { return this.bData; }\r\n    setBlockData(data) {\r\n        this.bData = {};\r\n        this.bData = data;\r\n        return this;\r\n    }\r\n    addBlockData(data) { this.bData = Object.assign(Object.assign({}, this.bData), data); }\r\n    getPhysicsCon() { return this.physicsCon; }\r\n    getWidth() { return this.typeImg.width; }\r\n    getHeight() { return this.typeImg.height; }\r\n}\r\nconst SpawnBlock = (block) => {\r\n    SetBlockInputSetting(block);\r\n    block.setPosition(system.getRndSpawnX(), system.spawnY);\r\n    block.setAngle(system.getRndAngle());\r\n    block.setVisible(true);\r\n    block.isOnScreen = true;\r\n    block.getPhysicsCon().setIgnoreGravity(false);\r\n    block.getPhysicsCon().setSensor(false);\r\n    block.getBlockData().spawn && block.getBlockData().spawn();\r\n    return block;\r\n};\r\nconst SetBlockInputSetting = (block) => {\r\n    block.removeAllListeners();\r\n    block.setInteractive();\r\n    block.scene.input.setDraggable(block, true);\r\n    block.on('pointerdown', (ptr) => {\r\n        if (block.getBlockData().ptrDown)\r\n            block.getBlockData().ptrDown(block, ptr);\r\n        block.getPhysicsCon().setIgnoreGravity(true);\r\n        block.getPhysicsCon().setStatic(true);\r\n    });\r\n    block.on('drag', (ptr) => {\r\n        if (block.getBlockData().drag)\r\n            block.getBlockData().drag(block, ptr);\r\n    });\r\n    block.on('pointerup', (ptr) => {\r\n        if (block.getBlockData().ptrUp)\r\n            block.getBlockData().ptrUp(block, ptr);\r\n        block.getPhysicsCon().setIgnoreGravity(false);\r\n        block.getPhysicsCon().setStatic(false);\r\n    });\r\n    block.on('pointerout', () => {\r\n        if (block.getBlockData().ptrOut)\r\n            block.getBlockData().ptrOut(block);\r\n        block.getPhysicsCon().setIgnoreGravity(false);\r\n        block.getPhysicsCon().setStatic(false);\r\n    });\r\n    return block;\r\n};\r\nconst SetBlockType2InitBasic = (block) => {\r\n    block.setScore(0);\r\n    block.setTimeIncrease({ chance: 0, value: 0 });\r\n    block.getTypeImg().setVisible(true);\r\n    block.initTypeTxt();\r\n    block.setBlockData({});\r\n    block.setAlpha(1);\r\n    try {\r\n        block.disableInteractive();\r\n    }\r\n    catch (e) {\r\n        console.log(e);\r\n    }\r\n    try {\r\n        block.scene.input.setDraggable(block, false);\r\n    }\r\n    catch (e) { }\r\n    return block;\r\n};\r\nconst DeathBlock = (block) => {\r\n    if (block.getBlockData().death)\r\n        block.getBlockData().death(() => { DisableBlock(block); });\r\n    else\r\n        DisableBlock(block);\r\n    return block;\r\n};\r\nconst DisableBlock = (block) => {\r\n    if (block.getBody()) {\r\n        block.getPhysicsCon().setIgnoreGravity(true);\r\n        block.getPhysicsCon().setSensor(true);\r\n    }\r\n    block.isOnScreen = false;\r\n    block.setVisible(false);\r\n    SetBlockType2InitBasic(block);\r\n    return block;\r\n};\r\nconst UpdateBlock = (block, time, delta) => {\r\n    if (!block || !block.getBlockData())\r\n        return;\r\n    if (block.getBlockData().update)\r\n        block.getBlockData().update(time, delta);\r\n    return block;\r\n};\r\n/* harmony default export */ const basic = (BasicBlock);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/ad.ts\nconst SetBlock2Ad = (block) => {\r\n    let bData = {\r\n        ptrDown: (block) => {\r\n        },\r\n        ptrUp: (block) => {\r\n        },\r\n        drag: (block) => {\r\n        },\r\n        dragEnd: (block) => {\r\n        },\r\n    };\r\n    block.setBlockData(bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const ad = (SetBlock2Ad);\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/input/index.ts\nconst Input = {\r\n    type: '',\r\n    typeHistory: [],\r\n    initPos: { x: 0, y: 0 },\r\n    isHoldingDown: false,\r\n    holdDuration: 0,\r\n    holdMaxDuration: 1000,\r\n    startHold: function () { this.isHoldingDown = true; return this; },\r\n    resetHold: function () {\r\n        this.isHoldingDown = false;\r\n        this.initPos = { x: 0, y: 0 };\r\n        this.holdDuration = 0;\r\n        this.setType('');\r\n        return this;\r\n    },\r\n    getIsHoldingDown: function () { return this.isHoldingDown; },\r\n    getHoldDuration: function () { return this.holdDuration; },\r\n    setHoldDuration: function (duration) { this.holdDuration = duration; return this; },\r\n    setInitPos: function (x, y) { this.initPos = { x: x, y: y }; return this; },\r\n    chckIsHold: function () {\r\n        if (this.holdDuration >= this.holdMaxDuration)\r\n            return true;\r\n        else\r\n            return false;\r\n    },\r\n    getType: function () { return this.type; },\r\n    setType: function (type) { this.type = type; return this; },\r\n    initTypeHistory: function () { this.typeHistory = []; },\r\n    getTypeHistory: function () { return this.typeHistory; },\r\n    getLastestInputType: function () { return this.typeHistory[this.typeHistory.length - 1]; },\r\n    push2TypeHistory: function (type) {\r\n        this.typeHistory.push(type);\r\n        return this.typeHistory;\r\n    }\r\n};\r\nconst InitInput = () => {\r\n    Input.resetHold();\r\n    Input.initTypeHistory();\r\n};\r\nconst CreateInput = (scene) => {\r\n    scene.input.on('pointerdown', () => {\r\n        Input.startHold();\r\n    });\r\n    InitInput();\r\n};\r\nconst UpdateInput = (delta) => {\r\n    if (Input.getIsHoldingDown())\r\n        Input.setHoldDuration(Input.getHoldDuration() + delta);\r\n};\r\nconst InputPtrDown = (ptr) => {\r\n    Input.setInitPos(ptr.x, ptr.y);\r\n};\r\nconst InputPtrUp = (ptr) => {\r\n    return SetInputType(Input.initPos, ptr);\r\n};\r\nconst InputDrag = (ptr) => {\r\n};\r\nconst InputPtrOut = () => {\r\n    Input.resetHold();\r\n};\r\nconst ChckSwipeDirection = (initPos, ptr) => {\r\n    const x = ptr.x - initPos.x;\r\n    const y = ptr.y - initPos.y;\r\n    if (Math.abs(x) > Math.abs(y)) {\r\n        if (x > 0)\r\n            Input.setType('swipeRight');\r\n        else\r\n            Input.setType('swipeLeft');\r\n    }\r\n    else {\r\n        if (y < 0)\r\n            Input.setType('swipeUp');\r\n        else\r\n            Input.setType('swipeDown');\r\n    }\r\n};\r\n// set comfy touch to not judge as swipe when use with actual finger\r\nconst ComfyGapTouchValue = 15;\r\nconst SetInputType = (initPos, ptr) => {\r\n    // swipe motion\r\n    const chckPosX = Math.abs(initPos.x - ptr.x) > ComfyGapTouchValue;\r\n    const chckPosY = Math.abs(initPos.y - ptr.y) > ComfyGapTouchValue;\r\n    if (chckPosX || chckPosY)\r\n        ChckSwipeDirection(initPos, ptr);\r\n    // hold or touch\r\n    else {\r\n        if (Input.chckIsHold()) {\r\n            Input.setType('hold');\r\n        }\r\n        else\r\n            Input.setType('touch');\r\n    }\r\n    Input.push2TypeHistory(Input.getType());\r\n    Input.resetHold();\r\n    return Input.getLastestInputType();\r\n};\r\n/* harmony default export */ const input = ((/* unused pure expression or super */ null && (Input)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/power.ts\n\r\n\r\n\r\n\r\n\r\nconst SetBlock2Power = (block) => {\r\n    const { scene } = block;\r\n    const rndDownDurationMax = (0,math/* GetRndNum */.hg)(0.5, 1.5);\r\n    const initPtr = (bData, block) => {\r\n        bData.isPtrDown = false;\r\n        bData.downDuration = 0;\r\n        block.setAlpha(1);\r\n    };\r\n    let bData = {\r\n        isPtrDown: false,\r\n        isComplete: false,\r\n        downDuration: 0,\r\n        downDurationMax: Math.floor(rndDownDurationMax * 1000),\r\n        ptrDown: function (block, ptr) {\r\n            InputPtrDown(ptr);\r\n            if (this.isPtrDown) {\r\n                AddObstacleBlock(block);\r\n                return;\r\n            }\r\n            this.isPtrDown = true;\r\n            audio.playSfx('powerBlockOn');\r\n            block.setAlpha(0.5);\r\n            const twList = [];\r\n            twList.push({\r\n                from: 0, to: this.downDurationMax, duration: this.downDurationMax,\r\n                onUpdate: (tw) => {\r\n                    // if keep press power btn\r\n                    if (this.isPtrDown)\r\n                        this.downDuration = tw.getValue();\r\n                    // if release power btn before done\r\n                    else {\r\n                        initPtr(this, block);\r\n                        tw.remove();\r\n                    }\r\n                },\r\n                onComplete: (tw) => {\r\n                    // done power btn play sfx\r\n                    if (!this.isPtrDown) {\r\n                        twList.shift();\r\n                        tw.remove();\r\n                        return;\r\n                    }\r\n                    initPtr(this, block);\r\n                    this.isComplete = true;\r\n                    audio.playSfx('powerBlockOff');\r\n                    scene.tweens.addCounter(twList.shift());\r\n                }\r\n            });\r\n            twList.push({\r\n                from: 1, to: 1.1, duration: 250, yoyo: true,\r\n                onUpdate: (tw, data) => {\r\n                    block.setScale(data.value);\r\n                },\r\n                onComplete: () => {\r\n                    block.setScale(1);\r\n                    audio.playSfx('touchSfx');\r\n                    ClearBlock(block, block.getScore() * this.downDurationMax / 1000);\r\n                }\r\n            });\r\n            scene.tweens.addCounter(twList.shift());\r\n        },\r\n        ptrUp: function (block, ptr) {\r\n            block.setAlpha(1);\r\n            if (this.isComplete)\r\n                return;\r\n            if (!this.isPtrDown || InputPtrUp(ptr) !== 'touch') {\r\n                AddObstacleBlock(block);\r\n                return;\r\n            }\r\n            // chck is keep press until done\r\n            initPtr(this, block);\r\n        },\r\n        ptrOut: function () {\r\n            InputPtrOut();\r\n            initPtr(this, block);\r\n        },\r\n    };\r\n    block.getTypeImg().setDisplaySize(CommonSize, CommonSize);\r\n    block.setBlockData(bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const power = (SetBlock2Power);\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/loading.ts\n\r\n\r\n\r\n\r\n\r\nconst SetBlock2Loading = (block) => {\r\n    block.setTypeTxt('%');\r\n    block.getTypeTxt().setFontSize(50);\r\n    let bData = {\r\n        isLoading: false,\r\n        ptrDown: function (block, ptr) { InputPtrDown(ptr); },\r\n        ptrUp: function (block, ptr) {\r\n            if (this.isLoading || InputPtrUp(ptr) !== 'touch') {\r\n                AddObstacleBlock(block);\r\n                return;\r\n            }\r\n            this.isLoading = true;\r\n            const rndDuration = (0,math/* GetRndInt */.dZ)(1, 4);\r\n            const processSfx = block.scene.sound.add('loadingBlockOnProcess');\r\n            audio.playSfxInstanceLoop(processSfx);\r\n            block.scene.tweens.addCounter({\r\n                from: 0, to: 100, duration: rndDuration * 1000,\r\n                onUpdate: (tw, data) => {\r\n                    const percentage = data.value.toFixed(0);\r\n                    block.setTypeTxt(percentage + '%');\r\n                },\r\n                onComplete: () => {\r\n                    audio.stopSfxInstanceLoop(processSfx);\r\n                    audio.playSfx('loadingBlockDone');\r\n                    this.isLoading = false;\r\n                    block.setTypeTxt('100%');\r\n                    setTimeout(() => {\r\n                        audio.playSfx('touchSfx');\r\n                        ClearBlock(block, block.getScore() * rndDuration);\r\n                    }, 1000);\r\n                }\r\n            });\r\n        },\r\n        ptrOut: function () { InputPtrOut(); },\r\n    };\r\n    block.getTypeImg().setDisplaySize(CommonSize, CommonSize);\r\n    block.setBlockData(bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const loading = (SetBlock2Loading);\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/touch.ts\n\r\n\r\n\r\n\r\nconst SetBlock2Touch = (block) => {\r\n    const rndTouchCnt = (0,math/* GetRndInt */.dZ)(2, 5);\r\n    const disableTouchDelayTime = 240;\r\n    let bData = {\r\n        touchCnt: 0,\r\n        maxTouchCnt: rndTouchCnt,\r\n        isAble2Touch: true,\r\n        ptrDown: function (block, ptr) { InputPtrDown(ptr); },\r\n        ptrUp: function (block, ptr) {\r\n            if (InputPtrUp(ptr) !== 'touch') {\r\n                AddObstacleBlock(block);\r\n                return;\r\n            }\r\n            if (!this.isAble2Touch)\r\n                return;\r\n            this.touchCnt++;\r\n            if (this.touchCnt >= this.maxTouchCnt) {\r\n                this.touchCnt = 0;\r\n                ClearBlock(block, block.getScore() * this.maxTouchCnt);\r\n            }\r\n            else {\r\n                // disable click, then able after delay\r\n                this.isAble2Touch = false;\r\n                block.scene.tweens.addCounter({\r\n                    from: 1, to: 1.1, duration: disableTouchDelayTime, yoyo: true, ease: 'Bounce',\r\n                    onUpdate: (tw, data) => {\r\n                        block.setScale(data.value);\r\n                    },\r\n                    onComplete: () => {\r\n                        block.setScale(1);\r\n                        this.isAble2Touch = true;\r\n                    }\r\n                });\r\n            }\r\n        },\r\n        ptrOut: function () { InputPtrOut(); }\r\n    };\r\n    block.getTypeImg().setDisplaySize(CommonSize, CommonSize);\r\n    block.setBlockData(bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const touch = (SetBlock2Touch);\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/obstacle.ts\n\r\n\r\nconst ObstacleTextureList = (/* unused pure expression or super */ null && (['obstacleBall', 'obstacleRect', 'obstacleSquare']));\r\nconst SetObstacle = (block) => {\r\n    let bData = {\r\n        isAble2Touch: true,\r\n        ptrDown: function (block, ptr) { InputPtrDown(ptr); },\r\n        ptrUp: function (block, ptr) {\r\n            const inputType = InputPtrUp(ptr);\r\n            if (inputType !== 'touch')\r\n                return;\r\n            if (!this.isAble2Touch)\r\n                return;\r\n            this.isAble2Touch = false;\r\n            AddObstacleBlock(block);\r\n            setTimeout(() => { this.isAble2Touch = true; }, 1000);\r\n        },\r\n        ptrOut: function () { InputPtrOut(); }\r\n    };\r\n    block.addBlockData(bData);\r\n    // set shape obstacle texture\r\n    const name = block.getShapeName();\r\n    const capitalShape = name[0].toUpperCase() + name.slice(1);\r\n    const obstacleShape = 'obstacle' + capitalShape;\r\n    block.addShape({ score: 0, imgTexture: obstacleShape });\r\n    block.getShapeImg().setTexture(obstacleShape);\r\n    return block;\r\n};\r\n/* harmony default export */ const obstacle = (SetObstacle);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/type/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst CommonSize = userSetting/* View.calcRatio */.G7.calcRatio(200);\r\nconst BlockUniqueProperties = [\r\n    {\r\n        typeName: '',\r\n        spawnChance: 0,\r\n        score: 0,\r\n        iconTexture: '',\r\n        imgWidth: 0,\r\n        imgHeight: 0,\r\n        timeIncreaseChance: 0,\r\n        timeIncreaseMin: 0,\r\n        timeIncreaseMax: 0,\r\n        setFunc: (block) => { SetBlockType2InitBasic(block); return block; }\r\n    },\r\n    {\r\n        typeName: 'obstacle',\r\n        spawnChance: 0,\r\n        score: 0,\r\n        iconTexture: '',\r\n        imgWidth: 0,\r\n        imgHeight: 0,\r\n        timeIncreaseChance: 0,\r\n        timeIncreaseMin: 0,\r\n        timeIncreaseMax: 0,\r\n        setFunc: (block) => { obstacle(block); return block; }\r\n    },\r\n    {\r\n        typeName: 'ad',\r\n        // spawnChance: 1,\r\n        spawnChance: 0,\r\n        score: 90,\r\n        iconTexture: '',\r\n        imgWidth: 100,\r\n        imgHeight: 100,\r\n        timeIncreaseChance: 100,\r\n        timeIncreaseMin: 3 * 1000,\r\n        timeIncreaseMax: 5 * 1000,\r\n        setFunc: (block) => { return ad(block); }\r\n    },\r\n    {\r\n        typeName: 'power',\r\n        spawnChance: 1,\r\n        score: 60,\r\n        iconTexture: 'power',\r\n        imgWidth: 100,\r\n        imgHeight: 100,\r\n        timeIncreaseChance: 50,\r\n        timeIncreaseMin: 1 * 1000,\r\n        timeIncreaseMax: 2 * 1000,\r\n        setFunc: (block) => { return power(block); }\r\n    },\r\n    {\r\n        typeName: 'loading',\r\n        spawnChance: 1,\r\n        score: 5,\r\n        iconTexture: '',\r\n        imgWidth: 100,\r\n        imgHeight: 100,\r\n        timeIncreaseChance: 30,\r\n        timeIncreaseMin: 0.5 * 1000,\r\n        timeIncreaseMax: 1 * 1000,\r\n        setFunc: (block) => { return loading(block); }\r\n    },\r\n    {\r\n        typeName: 'touch',\r\n        spawnChance: 1,\r\n        score: 10,\r\n        iconTexture: 'touch',\r\n        imgWidth: 100,\r\n        imgHeight: 100,\r\n        timeIncreaseChance: 30,\r\n        timeIncreaseMin: 2 * 1000,\r\n        timeIncreaseMax: 4 * 1000,\r\n        setFunc: (block) => { return touch(block); }\r\n    },\r\n];\r\nconst TBlockTypeList = BlockUniqueProperties.map(ele => { if (ele.typeName !== '')\r\n    return ele.typeName; });\r\nconst SpawnMaxChance = BlockUniqueProperties.map(ele => ele.spawnChance).reduce((prevValue, currValue) => {\r\n    return prevValue + currValue;\r\n}, 0);\r\nconst Set2TypeBlock = (block, typeName) => {\r\n    let filteredType = BlockUniqueProperties.find(ele => ele.typeName === typeName);\r\n    if (filteredType) {\r\n        SetBlockType2InitBasic(block);\r\n        block.setTypeName(typeName);\r\n        block.setTypeImg(filteredType.iconTexture);\r\n        block.setTypeImgDisplaySize(filteredType.imgWidth, filteredType.imgHeight);\r\n        block.addScore(filteredType.score);\r\n        block.setTimeIncrease({\r\n            chance: filteredType.timeIncreaseChance,\r\n            value: (0,math/* GetRndInt */.dZ)(filteredType.timeIncreaseMin, filteredType.timeIncreaseMax)\r\n        });\r\n        filteredType.setFunc(block);\r\n    }\r\n    else\r\n        console.log('Set2TypeBlock: typeName is not found in the block type list');\r\n};\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/popup.ts\n\r\n\r\n\r\nconst PopUp = {\r\n    isOpen: false,\r\n    bottomLayer: null,\r\n    contextLayer: null,\r\n    exitBtn: null,\r\n    sndList: [],\r\n    show: function (block) {\r\n        this.isOpen = true;\r\n        const bData = block.getBlockData();\r\n        if (bData) {\r\n            bData.isPopupOpen = true;\r\n            block.setBlockData(bData);\r\n            if (bData.popUpContext)\r\n                this.contextLayer = bData.popUpContext;\r\n        }\r\n        this.bottomLayer.setVisible(true);\r\n        this.contextLayer.setVisible(true);\r\n        this.exitBtn.setVisible(true);\r\n    },\r\n    hide: function (block) {\r\n        this.isOpen = false;\r\n        if (block) {\r\n            const bData = block.getBlockData();\r\n            bData.isPopupOpen = false;\r\n            block.setBlockData(bData);\r\n        }\r\n        this.bottomLayer.setVisible(false);\r\n        this.contextLayer.setVisible(false);\r\n        this.exitBtn.setVisible(false);\r\n    }\r\n};\r\nconst InitPopUp = () => {\r\n    PopUp.contextLayer.removeAll();\r\n    PopUp.hide();\r\n};\r\nconst CreatePopUp = (scene) => {\r\n    PopUp.bottomLayer = scene.add.graphics();\r\n    PopUp.bottomLayer.fillStyle(0x000000, 0.4);\r\n    PopUp.bottomLayer.fillRect(0, 0, userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n    PopUp.bottomLayer.setInteractive(new Phaser.Geom.Rectangle(0, 0, userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h), Phaser.Geom.Rectangle.Contains);\r\n    PopUp.bottomLayer.on('pointerup', () => { console.log('touching popup bottom layer'); });\r\n    PopUp.contextLayer = scene.add.container(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY);\r\n    PopUp.exitBtn = scene.add.image(userSetting/* View.w */.G7.w - ContextLayerMargin, ContextLayerMargin, 'exitBtn');\r\n    PopUp.exitBtn.setInteractive();\r\n    PopUp.exitBtn.on('pointerup', () => {\r\n        PopUp.hide();\r\n    });\r\n    [PopUp.bottomLayer, PopUp.contextLayer, PopUp.exitBtn].map((ele) => {\r\n        ele.setVisible(false);\r\n        SetDepth(ele, 'popUp');\r\n    });\r\n};\r\n/* harmony default export */ const popup = ((/* unused pure expression or super */ null && (PopUp)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/storage/index.ts\n\r\nconst GameData = Object.assign({ best: 0 }, GameDataAudio);\r\n// export default TGameData;\r\n/* harmony default export */ const storage = (GameData);\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/score.ts\n// import Phaser from 'phaser';\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Score = {\r\n    txt: null,\r\n    txtBackground: null,\r\n    bTxt: null,\r\n    bTxtBackground: null,\r\n    txtNum: 0,\r\n    bTxtNum: 0,\r\n    setFormat: function (score) {\r\n        this.txtNum = score;\r\n        const finalScore = '' + (0,math/* SetNum2CurrencyFormat */.me)(score);\r\n        this.txt.setText(finalScore);\r\n        if (this.txtNum > this.bTxtNum)\r\n            this.setBFormat(score);\r\n        return this;\r\n    },\r\n    setBFormat: function (score) {\r\n        this.bTxtNum = score;\r\n        const finalScore = '' + (0,math/* SetNum2CurrencyFormat */.me)(score);\r\n        this.bTxt.setText(finalScore);\r\n        return this;\r\n    },\r\n    add: function (score) {\r\n        if (system.getIsGameOver())\r\n            return;\r\n        let finalScore = Number(this.txt.text) + score;\r\n        this.setFormat(finalScore);\r\n        return finalScore;\r\n    },\r\n    getScore: function () { return this.txtNum; },\r\n    getBScore: function () { return this.bTxtNum; },\r\n    compareNormalAndBest: function (score) {\r\n        const prevBest = GetLocalStorageItem(storage, 'best');\r\n        if (prevBest < score) {\r\n            this.setBFormat(score);\r\n            SetLocalStorageItem(storage, 'best', score);\r\n            return true;\r\n        }\r\n        return false;\r\n    },\r\n    getBonusTimeScore: function () {\r\n        return Math.floor(ui_time.getTimeIncrease() / 100);\r\n    },\r\n    getFinalScore: function () {\r\n        return Math.floor(Score.getScore() + this.getBonusTimeScore());\r\n    },\r\n};\r\nconst InitScore = () => {\r\n    Score.txtNum = 0;\r\n    Score.bTxtNum = GetLocalStorageItem(storage, 'best');\r\n    Score.setFormat(0);\r\n    Score.setBFormat(Score.bTxtNum);\r\n};\r\nconst TxtGap = 110;\r\nconst CreateScoreTxt = (scene) => {\r\n    Score.bTxt = scene.add.text(TxtMargin / 2, TxtMargin * 2, '');\r\n    Score.bTxtBackground = scene.add.text(Score.bTxt.x + TxtGap, Score.bTxt.y, 'Best');\r\n    Score.txt = scene.add.text(TxtMargin / 2, TxtMargin * 3, '');\r\n    Score.txtBackground = scene.add.text(Score.txt.x + TxtGap, Score.txt.y, 'Score');\r\n    [Score.bTxtBackground, Score.txtBackground].map((txt) => {\r\n        txt.setPadding({ left: TxtPadding, right: TxtPadding, top: TxtPadding / 2, bottom: TxtPadding / 2 });\r\n        txt.setOrigin(1, -0.1);\r\n        txt.setFontSize(TxtSize);\r\n        txt.setFontFamily(TxtFamily);\r\n        txt.setFontStyle('bold italic');\r\n        txt.setAlpha(0.3);\r\n    });\r\n    [Score.bTxt, Score.txt].map((txt) => {\r\n        txt.setPadding({ left: TxtPadding, right: TxtPadding, top: TxtPadding / 2, bottom: TxtPadding / 2 });\r\n        txt.setOrigin(0, 0);\r\n        txt.setFontSize(TxtSize);\r\n        txt.setFontFamily(TxtFamily);\r\n    });\r\n    let bestScore = GetLocalStorageItem(storage, 'best');\r\n    Score.setFormat(0);\r\n    Score.setBFormat(bestScore);\r\n    [Score.bTxtBackground, Score.txtBackground, Score.bTxt, Score.txt].map((txt) => {\r\n        SetDepth(txt, 'txt');\r\n    });\r\n    InitScore();\r\n};\r\n/* harmony default export */ const ui_score = (Score);\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/passiveLoading.ts\n\r\nconst PassiveLoading = {\r\n    scene: null,\r\n    isLoading: false,\r\n    option: {},\r\n};\r\nconst StartPassiveLoading = (scene, option) => {\r\n    PassiveLoading.isLoading = true;\r\n    // option\r\n    if (option)\r\n        PassiveLoading.option = Object.assign({}, option);\r\n    // chck is exist if not then add to scene\r\n    const passiveLoadingInstance = scene.scene.get('passiveLoading');\r\n    if (!passiveLoadingInstance)\r\n        scene.game.scene.add('passiveLoading', PassiveLoadingScene, false);\r\n    // launch loading scene\r\n    scene.scene.launch('passiveLoading');\r\n    PassiveLoading.scene = scene.scene.get('passiveLoading');\r\n};\r\nconst StopPassiveLoading = async () => {\r\n    if (!PassiveLoading.scene || !PassiveLoading.isLoading) {\r\n        console.warn('passive loading is not exist:', PassiveLoading.scene);\r\n        PassiveLoading.scene = null;\r\n        return;\r\n    }\r\n    if (PassiveLoading.option) {\r\n        PassiveLoading.option.finishEvt && PassiveLoading.option.finishEvt(PassiveLoading.scene);\r\n    }\r\n    PassiveLoading.isLoading = false;\r\n    await new Promise(res => res(PassiveLoading.scene.scene.stop('passiveLoading')));\r\n    PassiveLoading.scene.loadingEndSec = await new Promise(res => res(performance.now()));\r\n    await new Promise((res) => {\r\n        res(console.log(`%c Passive Loading Time: ${((PassiveLoading.scene.loadingEndSec - PassiveLoading.scene.loadingStartSec) / 1000).toFixed(4)} sec `, 'color: black; background: white; fonWeight: bold;'));\r\n    });\r\n};\r\nclass PassiveLoadingScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: 'passiveLoading',\r\n            active: false\r\n        });\r\n        this.loadingStartSec = 0;\r\n        this.loadingEndSec = 0;\r\n        this.pointFirst = 0;\r\n        this.pointSecond = 0;\r\n        this.gapFirst = 0.2;\r\n        this.gapSecond = 0.4;\r\n    }\r\n    init() {\r\n        this.loadingStartSec = performance.now();\r\n    }\r\n    create() {\r\n        this.loadingGraphics = this.add.graphics();\r\n    }\r\n    update(time, delta) {\r\n        this.updateRotateLogo(delta);\r\n    }\r\n    updateRotateLogo(delta) {\r\n        this.pointFirst = (this.pointFirst + (delta * this.gapFirst)) % 360;\r\n        this.pointSecond = (this.pointSecond + (delta * this.gapSecond)) % 360;\r\n        // console.log('this.pointFirst, this.pointSecond: ', this.pointFirst, this.pointSecond);\r\n        // this.pointFirst = (this.pointFirst + (delta * this.gapFirst)) % 360;\r\n        // this.pointSecond = (this.pointSecond + (delta * this.gapSecond));\r\n        // let showClockwise = this.pointFirst > this.pointSecond ? true : false;\r\n        // let startAngle = this.pointFirst > this.pointSecond ? this.pointFirst : this.pointSecond;\r\n        // let endAngle = this.pointFirst > this.pointSecond ? this.pointSecond : this.pointFirst;\r\n        this.loadingGraphics.clear();\r\n        //  Without this the arc will appear closed when stroked\r\n        this.loadingGraphics.lineStyle(10, 0xff00ff, 2);\r\n        this.loadingGraphics.beginPath();\r\n        this.loadingGraphics.arc(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 60, Phaser.Math.DegToRad(this.pointFirst), Phaser.Math.DegToRad(this.pointSecond), true);\r\n        this.loadingGraphics.strokePath();\r\n    }\r\n}\r\n/* harmony default export */ const passiveLoading = ((/* unused pure expression or super */ null && (PassiveLoading)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/startCnt.ts\n\r\n\r\n\r\nconst GameStartCnt = {\r\n    isStart: false,\r\n    cntTxt: null,\r\n    cntNum: 3,\r\n    getIsStart: function () { return this.isStart; },\r\n    setIsStart: function (isStart) { this.isStart = isStart; },\r\n    setTxt: function (value) {\r\n        GameStartCnt.cntTxt.setText(value.toString());\r\n    },\r\n    setVisible: function (visible) { GameStartCnt.cntTxt.setVisible(visible); },\r\n    setAlpha: function (alpha) { GameStartCnt.cntTxt.setAlpha(alpha); },\r\n    animFadeOut: function (scene) {\r\n        scene.tweens.addCounter({\r\n            from: 1, to: 0, duration: 400,\r\n            onUpdate: (tw, data) => {\r\n                this.setAlpha(data.value);\r\n            },\r\n            onComplete: () => {\r\n                this.setAlpha(0);\r\n                this.setVisible(false);\r\n                this.setIsStart(true);\r\n            }\r\n        });\r\n    },\r\n    animCnt: function (scene) {\r\n        let cnt = 3;\r\n        scene.tweens.addCounter({\r\n            from: 0, to: 1000, duration: 1000, repeat: 3, delay: 1000,\r\n            onStart: () => {\r\n                this.setVisible(true);\r\n                this.setTxt(3);\r\n                audio.playSfx('voice3');\r\n            },\r\n            onRepeat: () => {\r\n                cnt--;\r\n                if (cnt === 0) {\r\n                    audio.playSfx('voiceGo');\r\n                    this.setTxt('Go!');\r\n                    return;\r\n                }\r\n                this.setTxt(cnt);\r\n                audio.playSfx('voice' + cnt);\r\n            },\r\n            onComplete: () => {\r\n                this.animFadeOut(scene);\r\n            },\r\n        });\r\n    }\r\n};\r\nconst InitGameStartCnt = () => {\r\n    GameStartCnt.setVisible(false);\r\n    GameStartCnt.setAlpha(1);\r\n    GameStartCnt.setIsStart(false);\r\n    GameStartCnt.cntNum = 3;\r\n    GameStartCnt.setTxt(GameStartCnt.cntNum);\r\n};\r\nconst CreateGameStartCnt = (scene) => {\r\n    GameStartCnt.cntTxt = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, '3');\r\n    SetFont2CommonContextStyle(GameStartCnt.cntTxt);\r\n    GameStartCnt.cntTxt.setFontSize(TxtTitleHeadSize);\r\n    InitGameStartCnt();\r\n    GameStartCnt.animCnt(scene);\r\n    // scene.events.on(\"start\", () => {\r\n    //     console.log('start scene evt');\r\n    //     GameStartCnt.animCnt(scene);\r\n    // });\r\n};\r\n/* harmony default export */ const startCnt = (GameStartCnt);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/efx/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst Efx = {\r\n    bgParticleList: [],\r\n    // timeIncrease: <Phaser.GameObjects.Text[]> [],   // when block cleared, increase time by block's own chance\r\n    // score: <Phaser.GameObjects.Text[]> [],          // when block cleared, increase score\r\n    list: [],\r\n    setConfig: function (particle, config) {\r\n        const finalConfig = Object.assign({ x: 0, y: 0, active: false }, config);\r\n        let emitter;\r\n        const nestedEmitterIdx = this.list.findIndex(emitter => emitter.name === config.name);\r\n        if (nestedEmitterIdx >= 0)\r\n            this.list[nestedEmitterIdx] = particle.createEmitter(finalConfig);\r\n        else {\r\n            emitter = particle.createEmitter(finalConfig);\r\n            this.list.push(emitter);\r\n        }\r\n        return emitter;\r\n    },\r\n    getEmitter: function (name) {\r\n        const targetEmitter = this.list.find(emitter => emitter.name === name);\r\n        if (!targetEmitter) {\r\n            console.warn(`emitter ${name} is not in the particle list`);\r\n            return;\r\n        }\r\n        return targetEmitter;\r\n    },\r\n    activeEmitter(x, y, name) {\r\n        const targetEmitter = this.getEmitter(name);\r\n        if (!targetEmitter)\r\n            return false;\r\n        targetEmitter.active = true;\r\n        targetEmitter.setPosition(x, y);\r\n        return targetEmitter;\r\n    },\r\n    animEmitter: function (x, y, name) {\r\n        const targetEmitter = this.activeEmitter(x, y, name);\r\n        if (!targetEmitter)\r\n            return;\r\n        const instanceExplode = targetEmitter.explode();\r\n        return instanceExplode;\r\n    },\r\n    startEmitter: function (x, y, name) {\r\n        const targetEmitter = this.activeEmitter(x, y, name);\r\n        if (!targetEmitter)\r\n            return;\r\n        const instanceExplode = targetEmitter.start();\r\n        return instanceExplode;\r\n    },\r\n    animScale: function (scene, target) {\r\n        scene.tweens.addCounter({\r\n            from: 1, to: 1.2, duration: 300, yoyo: true,\r\n            onUpdate: (tw, data) => {\r\n                target && target.setScale(data.value);\r\n            },\r\n        });\r\n    },\r\n    animPos: function (scene, target, amount) {\r\n        const targetInitY = target.y;\r\n        scene.tweens.addCounter({\r\n            from: targetInitY, to: targetInitY + amount, duration: 2400,\r\n            onUpdate: (tw, data) => {\r\n                target && target.setPosition(target.x, data.value);\r\n            },\r\n        });\r\n    },\r\n    animTimeIncrease: function (block, chance, value) {\r\n        const { scene } = block;\r\n        const chancePosY = block.y - 100;\r\n        const timeSec = SetmillieSec2SecTimeFormat(value);\r\n        const timeIncreaseOnUiRndPosX = ui_time.txt.x + (ui_time.txt.width * 1.5) - 5 + (0,math/* GetRndNum */.hg)(-3, 3);\r\n        const timeIncreaseOnUiRndPosY = ui_time.txt.y + ui_time.txt.height / 2 + (0,math/* GetRndNum */.hg)(-10, 10);\r\n        const timeIncreaseOnUi = scene.add.text(timeIncreaseOnUiRndPosX, timeIncreaseOnUiRndPosY, '+' + timeSec).setVisible(false);\r\n        const timeIncreaseTxt = scene.add.text(block.x, chancePosY, 'Time Critical!').setVisible(false);\r\n        const timeIncreaseChance = scene.add.text(timeIncreaseTxt.x, timeIncreaseTxt.y + 25, chance.toString() + '%').setVisible(false);\r\n        const timeIncreaseOnBlock = scene.add.text(timeIncreaseChance.x, timeIncreaseChance.y + 25, timeSec).setVisible(false);\r\n        [timeIncreaseOnUi, timeIncreaseTxt, timeIncreaseChance, timeIncreaseOnBlock].map((txt) => {\r\n            SetFont2CommonContextStyle(txt);\r\n            SetDepth(txt, 'txt');\r\n            txt.setVisible(true);\r\n            this.animScale(scene, timeIncreaseOnUi);\r\n        });\r\n        const twList = [];\r\n        twList.push({\r\n            from: timeIncreaseOnUiRndPosX, to: timeIncreaseOnUiRndPosX + 10, duration: 2400,\r\n            onStart: () => { scene.tweens.addCounter(twList.shift()); },\r\n            onUpdate: (tw, twData) => { timeIncreaseOnUi.x = twData.value; },\r\n            onComplete: () => { timeIncreaseOnUi.destroy(); }\r\n        });\r\n        twList.push({\r\n            from: 1, to: 0, duration: 2400,\r\n            onUpdate: (tw, twData) => {\r\n                timeIncreaseTxt.setAlpha(twData.value);\r\n                timeIncreaseChance.setAlpha(twData.value);\r\n                timeIncreaseOnBlock.setAlpha(twData.value);\r\n            },\r\n            onComplete: () => {\r\n                timeIncreaseTxt.destroy();\r\n                timeIncreaseChance.destroy();\r\n                timeIncreaseOnBlock.destroy();\r\n            }\r\n        });\r\n        scene.tweens.addCounter(twList.shift());\r\n        this.animPos(scene, timeIncreaseTxt, -30);\r\n        this.animPos(scene, timeIncreaseChance, -30);\r\n        this.animPos(scene, timeIncreaseOnBlock, -30);\r\n        return this;\r\n    },\r\n    animScore: function (block, score) {\r\n        const { scene } = block;\r\n        const scoreTxt = scene.add.text(block.x, block.y, Math.floor(score).toString()).setVisible(false);\r\n        SetFont2CommonContextStyle(scoreTxt);\r\n        SetDepth(scoreTxt, 'txt');\r\n        scoreTxt.setFontSize(TxtTitleSize);\r\n        // score particle emit\r\n        const scoreSfxList = ['scoreBlue', 'scoreGreen', 'scoreBrown'];\r\n        const rndIdx = (0,math/* GetRndInt */.dZ)(0, scoreSfxList.length);\r\n        Efx.animEmitter(block.x, block.y, scoreSfxList[rndIdx]);\r\n        // alpha tw\r\n        scene.tweens.addCounter({\r\n            from: 1, to: 0, duration: 2400,\r\n            onStart: () => {\r\n                scoreTxt.setVisible(true);\r\n                audio.playSfx('scoreSfx');\r\n            },\r\n            onUpdate: (tw, data) => { scoreTxt.setAlpha(data.value); },\r\n            onComplete: () => { scoreTxt.destroy(); }\r\n        });\r\n        this.animScale(scene, scoreTxt);\r\n        this.animPos(scene, scoreTxt, -30);\r\n    },\r\n    animNewBest: function () {\r\n        audio.playSfx('voiceHighScore');\r\n        this.bgParticleList.map(key => this.startEmitter(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY - userSetting/* View.h */.G7.h / 4, key));\r\n        this.startEmitter(0, 0, 'newBestScore');\r\n    },\r\n    stopAll: function () {\r\n        this.list.map(emitter => emitter.stop());\r\n    },\r\n};\r\nconst CreateEfx = (scene) => {\r\n    const blockParticle = scene.add.particles('particleSprite');\r\n    const commonTouchConfig = {\r\n        lifespan: { min: 10, max: 350 },\r\n        angle: { start: 0, end: 360, steps: 64 },\r\n        speed: 200,\r\n        quantity: 64,\r\n        scale: { start: 0.3, end: 0.05 },\r\n        blendMode: 'ADD',\r\n    };\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'touchBlue', frame: 'blue' }, commonTouchConfig));\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'touchGreen', frame: 'green' }, commonTouchConfig));\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'touchBrown', frame: 'yellow' }, commonTouchConfig));\r\n    const commonScoreConfig = {\r\n        lifespan: { min: 100, max: 500 },\r\n        angle: { start: 0, end: 360, steps: 64 },\r\n        speed: 350,\r\n        quantity: 64,\r\n        scale: { start: 0.2, end: 0.1 },\r\n        blendMode: 'ADD',\r\n    };\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'scoreBlue', frame: 'blue' }, commonScoreConfig));\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'scoreGreen', frame: 'green' }, commonScoreConfig));\r\n    Efx.setConfig(blockParticle, Object.assign({ name: 'scoreBrown', frame: 'yellow' }, commonScoreConfig));\r\n    // touch input\r\n    const touchSfxList = ['touchBlue', 'touchGreen', 'touchBrown'];\r\n    scene.input.off('pointerdown');\r\n    scene.input.on('pointerdown', (ptr) => {\r\n        audio.playSfx('touchSfx');\r\n        const rndIdx = (0,math/* GetRndInt */.dZ)(0, touchSfxList.length);\r\n        const emitter = Efx.animEmitter(ptr.x, ptr.y, touchSfxList[rndIdx]);\r\n        // const scoreSfxList = [ 'scoreBlue', 'scoreGreen', 'scoreBrown' ];\r\n        // const rndIdx = GetRndInt(0, scoreSfxList.length);\r\n        // const scoreInstance = Efx.animEmitter(ptr.x, ptr.y, scoreSfxList[rndIdx]);\r\n        // Efx.animEmitter(ptr.x, ptr.y, 'score');\r\n        // console.log('rndIdx: ', rndIdx, touchSfxList[rndIdx]);\r\n        // console.log('emitter: ', emitter);\r\n    });\r\n    SetDepth(blockParticle, 'particle');\r\n    return Efx;\r\n};\r\nconst CreateGameOverEfx = (scene, img) => {\r\n    Efx.bgParticleList = [\r\n        'diamond2', 'diamond3', 'diamond4',\r\n        'ruby1', 'ruby2', 'ruby3', 'ruby4',\r\n        'key1', 'key2', 'key3', 'key4',\r\n    ];\r\n    Efx.bgParticleList.map((particleName) => {\r\n        const particle = scene.add.particles(particleName);\r\n        const duration = 2000;\r\n        Efx.setConfig(particle, {\r\n            name: particleName,\r\n            angle: { min: 100, max: 440 },\r\n            speed: 350,\r\n            gravityY: -200,\r\n            lifespan: duration,\r\n            quantity: 1,\r\n            frequency: 60,\r\n            scale: { min: 0.1, max: 1 },\r\n            rotate: { onEmit: () => (0,math/* GetRndNum */.hg)(0, 360) }\r\n        });\r\n        SetDepth(particle, 'particle');\r\n    });\r\n    const blockParticle = scene.add.particles('particleSprite');\r\n    const width = img.width * gameover.newBestScoreBgScaleW;\r\n    const height = img.height * gameover.newBestScoreBgScaleH;\r\n    const gameOverEmitZone = new Phaser.Geom.Rectangle(img.x - width / 2, img.y - height / 2, width, height);\r\n    Efx.setConfig(blockParticle, {\r\n        name: 'newBestScore',\r\n        frame: 'blue',\r\n        lifespan: 1000,\r\n        gravityY: 10,\r\n        scale: { start: 0, end: 0.25, ease: 'Quad.easeOut' },\r\n        alpha: { start: 1, end: 0, ease: 'Quad.easeIn' },\r\n        blendMode: 'ADD',\r\n        emitZone: { type: 'random', source: gameOverEmitZone },\r\n    });\r\n    SetDepth(blockParticle, 'highest');\r\n    return Efx;\r\n};\r\n/* harmony default export */ const efx = (Efx);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/warning.ts\n\r\n\r\n\r\n\r\nconst GameWarning = {\r\n    hasOnceShow: true,\r\n    hasOnceHide: true,\r\n    time: 6 * 1000,\r\n    sign: null,\r\n    progressBar: null,\r\n    progressBarLine: null,\r\n    progressAmount: 0,\r\n    shakeValue: 1,\r\n    updateShakeValue: (remainedOverCnt) => {\r\n        GameWarning.shakeValue = (GameWarning.time - remainedOverCnt) / 1000;\r\n    },\r\n    show: () => {\r\n        GameWarning.progressAmount = 0;\r\n        GameWarning.sign.setVisible(true);\r\n        GameWarning.progressBar.setVisible(true);\r\n        GameWarning.progressBarLine.setVisible(true);\r\n        GameWarning.draw();\r\n        return GameWarning;\r\n    },\r\n    hide: () => {\r\n        GameWarning.sign.setVisible(false);\r\n        GameWarning.progressBar.setVisible(false);\r\n        GameWarning.progressBarLine.setVisible(false);\r\n        GameWarning.clear();\r\n        audio.stopSfx('warningSfx');\r\n    },\r\n    arcDegree: () => {\r\n        const startAngle = 270 + (GameWarning.progressAmount) * (-180); // 270 ~ 90\r\n        const endAngle = -90 + (GameWarning.progressAmount) * 180; // -90 ~ 90\r\n        return { startAngle: startAngle, endAngle: endAngle };\r\n    },\r\n    draw: () => {\r\n        GameWarning.clear();\r\n        const r = GameWarning.sign.width * 4 / 5;\r\n        GameWarning.progressBarLine.lineStyle(6, 0xfbff00, 1);\r\n        GameWarning.progressBarLine.strokeCircle(0, 0, r);\r\n        GameWarning.progressBar.fillStyle(0xfbff00, 0.4);\r\n        GameWarning.progressBar.beginPath();\r\n        GameWarning.progressBar.arc(0, 0, r, Phaser.Math.DegToRad(GameWarning.arcDegree().startAngle), Phaser.Math.DegToRad(GameWarning.arcDegree().endAngle), true, 0.01);\r\n        GameWarning.progressBar.fillPath();\r\n        GameWarning.progressBar.closePath();\r\n        return GameWarning;\r\n    },\r\n    clear: () => {\r\n        GameWarning.progressBar.clear();\r\n        GameWarning.progressBarLine.clear();\r\n    },\r\n    update: (scene) => {\r\n        const remainedOverCnt = system.overCntMax - system.overCnt;\r\n        // hide warning\r\n        if (system.getIsGameOver())\r\n            GameWarning.hasOnceHide = true;\r\n        if (system.getIsGameOver() || remainedOverCnt > GameWarning.time) {\r\n            if (GameWarning.hasOnceHide) {\r\n                GameWarning.hasOnceHide = false;\r\n                GameWarning.hasOnceShow = true;\r\n                GameWarning.hide();\r\n            }\r\n            return;\r\n        }\r\n        // show warning\r\n        if (GameWarning.hasOnceShow) {\r\n            GameWarning.hasOnceShow = false;\r\n            GameWarning.hasOnceHide = true;\r\n            GameWarning.show();\r\n            scene.tweens.addCounter({\r\n                from: 1, to: 0, duration: 500, yoyo: true, repeat: -1,\r\n                onStart: () => { audio.playSfx('warningSfx'); },\r\n                onRepeat: () => { audio.playSfx('warningSfx'); },\r\n                onUpdate: (tw, twData) => {\r\n                    if (GameWarning.hasOnceShow) {\r\n                        GameWarning.sign.setAlpha(1);\r\n                        tw.remove();\r\n                        return;\r\n                    }\r\n                    GameWarning.sign.setAlpha(twData.value);\r\n                }\r\n            });\r\n        }\r\n        GameWarning.progressAmount = (GameWarning.time - remainedOverCnt) / GameWarning.time;\r\n        GameWarning.draw();\r\n        GameWarning.updateShakeValue(remainedOverCnt);\r\n        scene.cameras.main.shake(160, 0.001 * GameWarning.shakeValue, false);\r\n    },\r\n};\r\nconst InitGameWarning = () => {\r\n    GameWarning.hide();\r\n    GameWarning.hasOnceShow = true;\r\n    GameWarning.progressAmount = 0;\r\n    return GameWarning;\r\n};\r\nconst CreateGameWarning = (scene) => {\r\n    GameWarning.sign = scene.add.image(0, 0, 'warningSign');\r\n    GameWarning.sign.setPosition(userSetting/* View.centerX */.G7.centerX, GameWarning.sign.height);\r\n    GameWarning.progressBar = scene.add.graphics();\r\n    GameWarning.progressBar.setAlpha(0.9);\r\n    GameWarning.progressBarLine = scene.add.graphics();\r\n    const barX = GameWarning.sign.x;\r\n    const barY = GameWarning.sign.y;\r\n    GameWarning.progressBar.setPosition(barX, barY);\r\n    GameWarning.progressBarLine.setPosition(barX, barY);\r\n    [GameWarning.progressBar, GameWarning.progressBarLine, GameWarning.sign].map(ele => SetDepth(ele, 'warning'));\r\n    InitGameWarning();\r\n    return GameWarning;\r\n};\r\n/* harmony default export */ const warning = (GameWarning);\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/index.ts\nconst UIProps = {\r\n    margin: 30,\r\n    alpha: 0.8,\r\n    scale: 0.6,\r\n    downGap: 4, // down gap for anim\r\n};\r\nconst SetUIProps = (props, value) => {\r\n    if (!UIProps[props])\r\n        console.warn(`ui props: ${props} is not exist`);\r\n    UIProps[props] = value;\r\n    return UIProps;\r\n};\r\nconst CreateUIBtnAnim = (scene, btn) => {\r\n    const toggleBtn = btn;\r\n    if (!toggleBtn)\r\n        return;\r\n    const Down = () => {\r\n        scene.tweens.addCounter({\r\n            from: toggleBtn.y, to: toggleBtn.downPosY, duration: 80,\r\n            onStart: () => {\r\n                toggleBtn.isChanging = true;\r\n            },\r\n            onUpdate: (tw, twData) => {\r\n                if (!toggleBtn.isChanging) {\r\n                    Up();\r\n                    tw.remove();\r\n                    return;\r\n                }\r\n                toggleBtn.y = twData.value;\r\n            },\r\n            onComplete: () => {\r\n                toggleBtn.isChanging = false;\r\n            },\r\n        });\r\n    };\r\n    const Up = () => {\r\n        scene.tweens.addCounter({\r\n            from: toggleBtn.y, to: toggleBtn.upPosY, duration: 80,\r\n            onStart: () => {\r\n                toggleBtn.isChanging = true;\r\n            },\r\n            onUpdate: (tw, twData) => {\r\n                if (!toggleBtn.isChanging) {\r\n                    toggleBtn.y = toggleBtn.upPosY;\r\n                    tw.remove();\r\n                    return;\r\n                }\r\n                toggleBtn.y = twData.value;\r\n            },\r\n            onComplete: () => {\r\n                toggleBtn.isChanging = false;\r\n            },\r\n        });\r\n    };\r\n    toggleBtn.upPosY = btn.y;\r\n    toggleBtn.downPosY = btn.y + UIProps.downGap;\r\n    toggleBtn.setInteractive();\r\n    toggleBtn.on('pointerdown', () => { Down(); });\r\n    toggleBtn.on('pointerup', () => { Up(); });\r\n    toggleBtn.on('pointerout', () => { Up(); });\r\n    return UIProps;\r\n};\r\n/* harmony default export */ const ui = (UIProps);\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/fullScreen/index.ts\n\r\n\r\nconst GameFullScreen = {\r\n    isFullScreen: false,\r\n    btn: null,\r\n};\r\nconst GetFullScreenAssets = (exceptionKeys) => {\r\n    const assetList = [\r\n        { key: 'fullScreenLarger', url: CommonUI + 'fullScreenLarger.png', type: 'image' },\r\n        { key: 'fullScreenSmaller', url: CommonUI + 'fullScreenSmaller.png', type: 'image' },\r\n        { key: 'touchSfx', url: CommonSfx + 'touchSfx.mp3', type: 'audio' },\r\n    ];\r\n    return GetAssetFiles(assetList, exceptionKeys);\r\n};\r\nconst InitFullScreen = () => {\r\n};\r\nconst CreateFullScreen = (scene, data) => {\r\n    var _a, _b;\r\n    const { margin, alpha, scale } = ui;\r\n    const x = (_a = data === null || data === void 0 ? void 0 : data.x) !== null && _a !== void 0 ? _a : margin;\r\n    const y = (_b = data === null || data === void 0 ? void 0 : data.y) !== null && _b !== void 0 ? _b : margin;\r\n    // add screen size controller\r\n    GameFullScreen.btn = scene.add.image(x, y, GameFullScreen.isFullScreen ? 'fullScreenSmaller' : 'fullScreenLarger');\r\n    CreateUIBtnAnim(scene, GameFullScreen.btn);\r\n    GameFullScreen.btn.setScale(scale).setAlpha(alpha);\r\n    const sizeControllerExitEvt = () => {\r\n        GameFullScreen.isFullScreen = false;\r\n        scene.scale.stopFullscreen();\r\n        GameFullScreen.btn.setTexture('fullScreenLarger');\r\n    };\r\n    const sizeControllerToggleEvt = () => {\r\n        GameFullScreen.isFullScreen = !GameFullScreen.isFullScreen;\r\n        if (GameFullScreen.isFullScreen) {\r\n            scene.scale.startFullscreen();\r\n            GameFullScreen.btn.setTexture('fullScreenSmaller');\r\n        }\r\n        else\r\n            sizeControllerExitEvt();\r\n    };\r\n    GameFullScreen.btn.on('pointerup', () => {\r\n        sizeControllerToggleEvt();\r\n    });\r\n    // resize event for stop full screen\r\n    scene.scale.off('resize');\r\n    scene.scale.on('resize', () => {\r\n        if (GameFullScreen.btn.isChanging)\r\n            return;\r\n        if (!GameFullScreen.isFullScreen)\r\n            return;\r\n        sizeControllerExitEvt();\r\n    });\r\n    InitFullScreen();\r\n    return GameFullScreen;\r\n};\r\n/* harmony default export */ const fullScreen = (GameFullScreen);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/game.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst StartGame = (scene) => {\r\n    scene.scene.remove('game');\r\n    scene.scene.add('game', GameScene);\r\n    scene.scene.launch('game');\r\n};\r\nconst RestartGame = (scene) => {\r\n    efx.stopAll();\r\n    scene.scene.restart();\r\n};\r\nconst StopGame = (scene) => {\r\n    if (scene.scene.get('game')) {\r\n        scene.scene.setActive(false, 'game');\r\n        scene.scene.setVisible(false, 'game');\r\n        efx.stopAll();\r\n        audio.stopBgm('gameBgm');\r\n        setTimeout(() => {\r\n            if (!scene.scene.get('game'))\r\n                return;\r\n            scene.scene.remove('game');\r\n        }, 1000);\r\n    }\r\n};\r\nclass GameScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: 'game',\r\n            active: false\r\n        });\r\n        this.themeIdx = 0;\r\n        this.wallGap = userSetting/* View.calcRatio */.G7.calcRatio(90);\r\n        this.wallBottomGap = userSetting/* View.calcRatio */.G7.calcRatio(60);\r\n        this.matterStepForce = 0.08; // apply delta to matter force method\r\n    }\r\n    create() {\r\n        this.createWall();\r\n        this.createBgScene();\r\n        // block system\r\n        InitBlockSystem();\r\n        // input\r\n        CreateInput(this);\r\n        // audio\r\n        CreateGameAudio(this, storage);\r\n        audio.playBgm('gameBgm');\r\n        // ui\r\n        CreateGameStartCnt(this);\r\n        CreateScoreTxt(this);\r\n        CreateGameTimeTxt(this);\r\n        CreatePopUp(this);\r\n        CreateGameWarning(this);\r\n        CreateGameOver(this, this.themeIdx);\r\n        CreateEfx(this);\r\n        CreateGameOverEfx(this, gameover.newBestScoreBg);\r\n        CreateFullScreen(this);\r\n        SetDepth(fullScreen.btn, 'fullScreen');\r\n        CreateSetting(this);\r\n        // stop passive loading\r\n        StopPassiveLoading();\r\n        // // debugging\r\n        // const inspectorWidth = 255;\r\n        // PGUInspector(this, { right: window.innerWidth - inspectorWidth, top: 48 });\r\n    }\r\n    update(time, delta) {\r\n        if (!startCnt.getIsStart())\r\n            return;\r\n        ui_time.update(this, delta);\r\n        warning.update(this);\r\n        UpdateInput(delta);\r\n        UpdateAllBlocks(this, time, delta);\r\n        this.updateMatterStep(delta);\r\n    }\r\n    createWall() {\r\n        // set matter walls\r\n        const wallThickness = this.wallGap * 5;\r\n        this.matter.world.setBounds(this.wallGap, 0, userSetting/* View.w */.G7.w - (this.wallGap * 2), userSetting/* View.h */.G7.h - this.wallGap, wallThickness, true, true, false, true);\r\n        // create block spawn support wall\r\n        const supportLeft = this.matter.add.rectangle(0, -userSetting/* View.h */.G7.h / 2, this.wallGap, userSetting/* View.h */.G7.h, { isStatic: true });\r\n        const supportRight = this.matter.add.rectangle(userSetting/* View.w */.G7.w, -userSetting/* View.h */.G7.h / 2, this.wallGap, userSetting/* View.h */.G7.h, { isStatic: true });\r\n        const bgTextureList = ['bgGreen', 'bgBrown', 'bgBlue'];\r\n        const btnList = ['btnGreen', 'btnBrown', 'btnBlue'];\r\n        this.themeIdx = (0,math/* GetRndInt */.dZ)(0, bgTextureList.length);\r\n        const leftWall = this.add.tileSprite(0, 0, this.wallGap, userSetting/* View.h */.G7.h, bgTextureList[this.themeIdx]).setOrigin(0);\r\n        const rightWall = this.add.tileSprite(userSetting/* View.w */.G7.w - this.wallGap, 0, this.wallGap, userSetting/* View.h */.G7.h, bgTextureList[this.themeIdx]).setOrigin(0);\r\n        const bottomWall = this.add.image(0, userSetting/* View.h */.G7.h - this.wallGap, btnList[this.themeIdx]).setOrigin(0).setDisplaySize(userSetting/* View.w */.G7.w, this.wallGap);\r\n        [leftWall, rightWall, bottomWall].map(wall => SetDepth(wall, 'wall'));\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: 5000, repeat: -1,\r\n            onUpdate: () => {\r\n                leftWall.tilePositionY += 1;\r\n                rightWall.tilePositionY -= 1;\r\n            }\r\n        });\r\n    }\r\n    createBgScene() {\r\n        const bgColor = (0,math/* GetRndColor */.k8)();\r\n        // select bg color\r\n        this.cameras.main.setBackgroundColor(bgColor);\r\n        // select cloud shape\r\n        this.cloudGroup = this.add.group({\r\n            defaultKey: 'cloud',\r\n            maxSize: 15\r\n        });\r\n        this.spawnCloud();\r\n        // select tree shape\r\n        this.treeGroup = this.add.group({\r\n            defaultKey: 'tree',\r\n            maxSize: 15\r\n        });\r\n        this.spawnTree();\r\n        // select mist\r\n        const bgMistIdx = (0,math/* GetRndInt */.dZ)(1, 4);\r\n        const bgMist = this.add.tileSprite(this.wallGap, userSetting/* View.h */.G7.h - this.wallGap, userSetting/* View.w */.G7.w - (this.wallGap * 2), this.wallGap, 'mist' + bgMistIdx);\r\n        bgMist.setOrigin(0, 1);\r\n        bgMist.setAlpha(0.4);\r\n        SetDepth(bgMist, 'mist');\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: 5000, repeat: -1,\r\n            onUpdate: () => {\r\n                bgMist.tilePositionX += 0.5;\r\n            }\r\n        });\r\n    }\r\n    spawnCloud() {\r\n        const duration = (0,math/* GetRndInt */.dZ)(1200, 3000);\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: duration,\r\n            onUpdate: () => {\r\n                this.cloudGroup.children.iterate((cloud) => {\r\n                    // chck deatline\r\n                    if (cloud.x > userSetting/* View.w */.G7.w)\r\n                        this.cloudGroup.killAndHide(cloud);\r\n                    // move clouds\r\n                    cloud.x += cloud.moveGapX;\r\n                });\r\n            },\r\n            onComplete: () => {\r\n                if (!this)\r\n                    return;\r\n                const cloud = this.cloudGroup.get();\r\n                if (!cloud)\r\n                    return;\r\n                cloud.setTexture('cloud' + (0,math/* GetRndInt */.dZ)(1, 10));\r\n                cloud.setPosition(-cloud.width, (0,math/* GetRndInt */.dZ)(userSetting/* View.centerY */.G7.centerY, userSetting/* View.centerY */.G7.centerY - userSetting/* View.centerY */.G7.centerY / 2));\r\n                cloud.setOrigin(0, 0.5);\r\n                cloud.setActive(true);\r\n                cloud.setAlpha(0.4);\r\n                cloud.moveGapX = (0,math/* GetRndNum */.hg)(0.2, 3);\r\n                SetDepth(cloud, 'cloud');\r\n                cloud.setVisible(true);\r\n                this.spawnCloud();\r\n            }\r\n        });\r\n    }\r\n    spawnTree() {\r\n        const duration = (0,math/* GetRndInt */.dZ)(1200, 3000);\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: duration,\r\n            onUpdate: () => {\r\n                this.treeGroup.children.iterate((tree) => {\r\n                    // chck deatline\r\n                    if (tree.x < -tree.width)\r\n                        this.treeGroup.killAndHide(tree);\r\n                    // move clouds\r\n                    tree.x -= 0.5;\r\n                });\r\n            },\r\n            onComplete: () => {\r\n                if (!this)\r\n                    return;\r\n                const tree = this.treeGroup.get();\r\n                if (!tree)\r\n                    return;\r\n                tree.setTexture('tree' + (0,math/* GetRndInt */.dZ)(1, 36));\r\n                tree.setPosition(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h - this.wallGap);\r\n                tree.setOrigin(0, 1);\r\n                tree.setActive(true);\r\n                tree.setAlpha(0.2);\r\n                SetDepth(tree, 'tree');\r\n                tree.setVisible(true);\r\n                this.spawnTree();\r\n            }\r\n        });\r\n    }\r\n    updateMatterStep(delta) { this.matter.world.step(delta); }\r\n}\r\n/* harmony default export */ const game = (GameScene);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/gameover.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GameOver = {\r\n    overTxt: null,\r\n    layer: null,\r\n    newBestScoreBgScaleW: 2.4,\r\n    newBestScoreBgScaleH: 3.2,\r\n    newBestScoreBg: null,\r\n    newBestScoreTxt: null,\r\n    newBestScoreNum: null,\r\n    data: {\r\n        title: 'Time Over',\r\n        bonusTime: 0,\r\n        score: 0,\r\n        finalScore: 0\r\n    },\r\n    animCommonOver: function (scene, sndKey, txt) {\r\n        system.setIsGameOver(true);\r\n        audio.playSfx(sndKey);\r\n        const overSnd = scene.sound.get(sndKey);\r\n        const overSndTiming = overSnd.duration / 2 * 1000 - 100;\r\n        scene.tweens.addCounter({\r\n            from: 0, to: overSndTiming, duration: overSndTiming,\r\n            onStart: () => {\r\n                this.overTxt.setVisible(true);\r\n                this.overTxt.setText(txt + '\\n');\r\n            },\r\n            onComplete: () => {\r\n                this.overTxt.setText(txt + '\\nOver');\r\n                setTimeout(() => {\r\n                    this.animShow(scene, {\r\n                        title: txt + ' Over',\r\n                        bonusTime: ui_score.getBonusTimeScore(),\r\n                        score: ui_score.getScore(),\r\n                        finalScore: ui_score.getFinalScore()\r\n                    });\r\n                }, 1000);\r\n            }\r\n        });\r\n    },\r\n    animTimeOver: function (scene) { this.animCommonOver(scene, 'voiceTimeOver', 'Time'); },\r\n    animGameOver: function (scene) { this.animCommonOver(scene, 'voiceGameOver', 'Game'); },\r\n    animShow: function (scene, data) {\r\n        // set default data for performance\r\n        this.show({\r\n            title: data.title,\r\n            bonusTime: 0,\r\n            score: 0,\r\n            finalScore: 0\r\n        });\r\n        // anim to bonus time & score\r\n        const prevBestScore = GetLocalStorageItem(storage, 'best');\r\n        const { score, bonusTime, finalScore } = data;\r\n        ui_score.compareNormalAndBest(finalScore); // test\r\n        const twList = [];\r\n        const sfxCommonTwConfig = {\r\n            // updating score sfx\r\n            from: 0, to: score, duration: 100, repeat: 9,\r\n            onStart: () => { scene.tweens.addCounter(twList.shift()); },\r\n            onRepeat: () => { audio.playSfx('voiceScore'); }\r\n        };\r\n        const scaleCommonTwConfig = {\r\n            from: 1, to: 1.3, duration: 500, yoyo: true, ease: 'Back.easeInOut',\r\n            onStart: () => { scene.tweens.addCounter(twList.shift()); },\r\n        };\r\n        twList.push(sfxCommonTwConfig, Object.assign(Object.assign({}, scaleCommonTwConfig), { onUpdate: (tw, twData) => {\r\n                this.layer.scoreTxt.setScale(twData.value);\r\n            } }));\r\n        twList.push({\r\n            // update score\r\n            from: 0, to: score, duration: 1000,\r\n            onUpdate: (tw, twData) => {\r\n                this.layer.scoreTxt.setText(twData.value.toFixed(0));\r\n            },\r\n            onComplete: () => {\r\n                setTimeout(() => { scene.tweens.addCounter(twList.shift()); }, 200);\r\n            }\r\n        });\r\n        twList.push(sfxCommonTwConfig, Object.assign(Object.assign({}, scaleCommonTwConfig), { onUpdate: (tw, twData) => {\r\n                this.layer.timeTxt.setScale(twData.value);\r\n            } }));\r\n        twList.push({\r\n            // update bonus time\r\n            from: 0, to: bonusTime, duration: 1000,\r\n            onUpdate: (tw, twData) => {\r\n                this.layer.timeTxt.setText(twData.value.toFixed(0));\r\n            },\r\n            onComplete: () => {\r\n                setTimeout(() => { scene.tweens.addCounter(twList.shift()); }, 200);\r\n            }\r\n        });\r\n        twList.push(sfxCommonTwConfig, Object.assign(Object.assign({}, scaleCommonTwConfig), { onUpdate: (tw, twData) => {\r\n                this.layer.scoreTxt.setScale(twData.value);\r\n            } }));\r\n        twList.push({\r\n            // update score via bonus time (final score)\r\n            from: score, to: finalScore, duration: 1000,\r\n            onUpdate: (tw, twData) => {\r\n                this.layer.scoreTxt.setText(twData.value.toFixed(0));\r\n            },\r\n            onComplete: () => {\r\n                // show new best score performance if score is better than prev best one\r\n                if (finalScore > prevBestScore)\r\n                    this.newBestScoreTxt.show(finalScore);\r\n            }\r\n        });\r\n        scene.tweens.addCounter(twList.shift());\r\n    },\r\n    show: function (data) {\r\n        data && this.setTxtData(data);\r\n        this.layer.setVisible(true);\r\n        return this;\r\n    },\r\n    hide: function () {\r\n        this.layer.setVisible(false);\r\n        this.newBestScoreTxt.hide();\r\n        return this;\r\n    },\r\n    setTxtData: function (data) {\r\n        this.data = data;\r\n        const { title, bonusTime, score, finalScore } = this.data;\r\n        this.layer.titleTxt.setText(title);\r\n        this.layer.timeTxt.setText(bonusTime);\r\n        this.layer.scoreTxt.setText(score);\r\n    },\r\n};\r\nconst InitGameOver = () => {\r\n    GameOver.setTxtData({\r\n        title: 'Time Over',\r\n        bonusTime: 0,\r\n        score: 0,\r\n        finalScore: 0\r\n    });\r\n    GameOver.hide();\r\n    GameOver.overTxt.setVisible(false);\r\n};\r\nconst ContextTxtGapH = userSetting/* View.h */.G7.h / 18;\r\nconst BtnGapW = userSetting/* View.w */.G7.w / 8;\r\nconst CreateGameOver = (scene, themeIdx) => {\r\n    const themeColorList = ['Green', 'Brown', 'Blue'];\r\n    const color = themeColorList[themeIdx];\r\n    GameOver.overTxt = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, '').setVisible(false);\r\n    GameOver.layer = scene.add.container(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY);\r\n    const bg = scene.add.image(0, 0, 'blackScreen');\r\n    bg.setDisplaySize(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n    bg.setInteractive();\r\n    bg.setAlpha(0.4);\r\n    const context = scene.add.image(0, 0, 'panel' + color);\r\n    context.setDisplaySize(userSetting/* View.w */.G7.w - ContextMarginW, userSetting/* View.h */.G7.h - ContextMarginH);\r\n    const titleBg = scene.add.image(0, -userSetting/* View.h */.G7.h / 4, 'btn' + color).setScale(1.8);\r\n    const title = scene.add.text(titleBg.x, titleBg.y, 'Game Over');\r\n    GameOver.layer.titleTxt = title;\r\n    const bonusTime = scene.add.text(0, -ContextTxtGapH, 'Bonus Time');\r\n    const bonusTimeTxt = scene.add.text(0, bonusTime.y + ContextTxtGapH, '0');\r\n    GameOver.layer.timeTxt = bonusTimeTxt;\r\n    const score = scene.add.text(0, ContextTxtGapH, 'Score');\r\n    const scoreTxt = scene.add.text(0, score.y + ContextTxtGapH, 'Score');\r\n    GameOver.layer.scoreTxt = scoreTxt;\r\n    [GameOver.overTxt, title, bonusTime, bonusTimeTxt, score, scoreTxt].map((ele) => {\r\n        SetFont2CommonContextStyle(ele);\r\n    });\r\n    GameOver.overTxt.setFontSize(TxtOverHeadSize);\r\n    title.setFontSize(TxtTitleHeadSize);\r\n    const titleBtn = scene.add.image(-BtnGapW, userSetting/* View.h */.G7.h / 4, 'overBtnUp' + color).setInteractive().setScale(2);\r\n    const titleBtnImg = scene.add.image(titleBtn.x, titleBtn.y - 4, 'overBack').setInteractive();\r\n    const titleFuncDown = () => {\r\n        titleBtn.setTexture('overBtnDown' + color);\r\n        titleBtnImg.setPosition(titleBtnImg.x, titleBtnImg.y + 4);\r\n    };\r\n    const titleFuncUp = () => {\r\n        titleBtn.setTexture('overBtnUp' + color);\r\n        titleBtnImg.setPosition(titleBtnImg.x, titleBtnImg.y - 4);\r\n        audio.playSfx('gearAnim');\r\n        StopGame(scene);\r\n        StartTitle(scene);\r\n    };\r\n    const titleFuncOut = (ptr) => {\r\n        titleBtn.setTexture('overBtnUp' + color);\r\n        if (ptr.isDown)\r\n            titleBtnImg.setPosition(titleBtnImg.x, titleBtnImg.y - 4);\r\n    };\r\n    titleBtn.on('pointerdown', () => { titleFuncDown(); });\r\n    titleBtnImg.on('pointerdown', () => { titleFuncDown(); });\r\n    titleBtn.on('pointerup', () => { titleFuncUp(); });\r\n    titleBtnImg.on('pointerup', () => { titleFuncUp(); });\r\n    titleBtn.on('pointerout', (ptr) => { titleFuncOut(ptr); });\r\n    titleBtnImg.on('pointerout', (ptr) => { titleFuncOut(ptr); });\r\n    const retryBtn = scene.add.image(BtnGapW, titleBtn.y, 'overBtnUp' + color).setInteractive().setScale(2);\r\n    const retryBtnImg = scene.add.image(retryBtn.x, retryBtn.y - 4, 'overRetry').setInteractive();\r\n    const retryFuncDown = () => {\r\n        retryBtn.setTexture('overBtnDown' + color);\r\n        retryBtnImg.setPosition(retryBtnImg.x, retryBtnImg.y + 4);\r\n    };\r\n    const retryFuncUp = () => {\r\n        retryBtn.setTexture('overBtnUp' + color);\r\n        retryBtnImg.setPosition(retryBtnImg.x, retryBtnImg.y - 4);\r\n        audio.playSfx('gearAnim');\r\n        RestartGame(scene);\r\n    };\r\n    const retryFuncOut = (ptr) => {\r\n        retryBtn.setTexture('overBtnUp' + color);\r\n        if (ptr.isDown)\r\n            retryBtnImg.setPosition(retryBtnImg.x, retryBtnImg.y - 4);\r\n    };\r\n    retryBtn.on('pointerdown', () => { retryFuncDown(); });\r\n    retryBtnImg.on('pointerdown', () => { retryFuncDown(); });\r\n    retryBtn.on('pointerup', () => { retryFuncUp(); });\r\n    retryBtnImg.on('pointerup', () => { retryFuncUp(); });\r\n    retryBtn.on('pointerout', (ptr) => { retryFuncOut(ptr); });\r\n    retryBtnImg.on('pointerout', (ptr) => { retryFuncOut(ptr); });\r\n    GameOver.layer.add([\r\n        bg,\r\n        context,\r\n        titleBg, title,\r\n        bonusTime, bonusTimeTxt,\r\n        score, scoreTxt,\r\n        titleBtn, titleBtnImg,\r\n        retryBtn, retryBtnImg,\r\n    ]);\r\n    GameOver.newBestScoreBg = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY - userSetting/* View.h */.G7.h / 4, 'btn' + color);\r\n    GameOver.newBestScoreBg.setScale(GameOver.newBestScoreBgScaleW, GameOver.newBestScoreBgScaleH);\r\n    GameOver.newBestScoreTxt = scene.add.text(GameOver.newBestScoreBg.x, GameOver.newBestScoreBg.y - 6, '      New\\nBest Score!');\r\n    SetFont2CommonContextStyle(GameOver.newBestScoreTxt);\r\n    GameOver.newBestScoreTxt.setFontSize(TxtTitleHeadSize);\r\n    GameOver.newBestScoreTxt.setFontFamily('Arial Black');\r\n    GameOver.newBestScoreTxt.show = () => {\r\n        GameOver.newBestScoreBg.setScale(0.1 * GameOver.newBestScoreBgScaleW, 0.1 * GameOver.newBestScoreBgScaleH);\r\n        GameOver.newBestScoreTxt.setScale(0.1);\r\n        GameOver.newBestScoreBg.setVisible(true);\r\n        GameOver.newBestScoreTxt.setVisible(true);\r\n        // GameAudio.playSfx('gearAnim');\r\n        scene.tweens.addCounter({\r\n            from: 0.1, to: 1, duration: 800, ease: 'Back.easeInOut',\r\n            onUpdate: (tw, twData) => {\r\n                const value = twData.value;\r\n                GameOver.newBestScoreBg.setScale(value * GameOver.newBestScoreBgScaleW, value * GameOver.newBestScoreBgScaleH);\r\n                GameOver.newBestScoreTxt.setScale(value);\r\n            },\r\n            onComplete: () => {\r\n                efx.animNewBest();\r\n            }\r\n        });\r\n    };\r\n    GameOver.newBestScoreTxt.hide = () => {\r\n        GameOver.newBestScoreBg.setVisible(false);\r\n        GameOver.newBestScoreBg.setScale(0.1 * GameOver.newBestScoreBgScaleW, 0.1 * GameOver.newBestScoreBgScaleH);\r\n        GameOver.newBestScoreTxt.setVisible(false);\r\n        GameOver.newBestScoreTxt.setScale(1);\r\n    };\r\n    GameOver.newBestScoreTxt.hide();\r\n    SetDepth(GameOver.overTxt, 'txt');\r\n    SetDepth(GameOver.layer, 'gameOver');\r\n    SetDepth(GameOver.newBestScoreBg, 'newBest');\r\n    SetDepth(GameOver.newBestScoreTxt, 'newBest');\r\n    InitGameOver();\r\n    return GameOver;\r\n};\r\n/* harmony default export */ const gameover = (GameOver);\r\n\r\n\n// EXTERNAL MODULE: ./src/utils/etc.ts\nvar etc = __webpack_require__(663);\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/shape/circle.ts\n\r\n\r\nconst RndCircleImgTexture = ['blueBall', 'greenBall', 'brownBall'];\r\nconst GetCircleShape = () => {\r\n    const RadiusValue = 120;\r\n    const Radius = userSetting/* View.calcRatio */.G7.calcRatio(RadiusValue);\r\n    let bData = {};\r\n    return {\r\n        hitArea: new Phaser.Geom.Circle(Radius / 2, Radius / 2, Radius),\r\n        bData: bData,\r\n        callback: Phaser.Geom.Circle.Contains,\r\n        score: (RadiusValue ** 2) * 3 / 100,\r\n        bodyConfig: {\r\n            type: 'circle',\r\n            radius: Radius,\r\n            offset: { x: Radius / 2, y: Radius / 2 }\r\n        },\r\n        imgTexture: RndCircleImgTexture[(0,math/* GetRndInt */.dZ)(0, RndCircleImgTexture.length)],\r\n        setImgDisplaySize: function (block) {\r\n            block.getShapeImg().setDisplaySize(Radius * 2, Radius * 2);\r\n            block.getPhysicsCon().setCircle(Radius);\r\n            return block;\r\n        }\r\n    };\r\n};\r\n/* harmony default export */ const circle = (GetCircleShape);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/shape/rectangle.ts\n\r\n\r\nconst RndRectImgTexture = ['blueRect', 'greenRect', 'brownRect'];\r\nconst GetRectangleShape = () => {\r\n    const ShortSideValue = 200;\r\n    const LongSideValue = ShortSideValue + ShortSideValue / 2;\r\n    const ShortSide = userSetting/* View.calcRatio */.G7.calcRatio(ShortSideValue);\r\n    const LongSide = userSetting/* View.calcRatio */.G7.calcRatio(LongSideValue);\r\n    let bData = {};\r\n    return {\r\n        hitArea: new Phaser.Geom.Rectangle(ShortSide / 2, LongSide / 2, ShortSide, LongSide),\r\n        bData: bData,\r\n        callback: Phaser.Geom.Rectangle.Contains,\r\n        score: ShortSideValue * LongSideValue / 100,\r\n        bodyConfig: {\r\n            type: 'rectangle',\r\n            width: ShortSide,\r\n            height: LongSide,\r\n            offset: { x: ShortSide / 2, y: LongSide / 2 }\r\n        },\r\n        imgTexture: RndRectImgTexture[(0,math/* GetRndInt */.dZ)(0, RndRectImgTexture.length)],\r\n        setImgDisplaySize: function (block) {\r\n            block.getShapeImg().setDisplaySize(ShortSide, LongSide);\r\n            block.getPhysicsCon().setSize(ShortSide, LongSide);\r\n            // block.input && block.input.hitArea.setTo(ShortSide, LongSide);\r\n            return block;\r\n        }\r\n    };\r\n};\r\n/* harmony default export */ const rectangle = (GetRectangleShape);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/shape/square.ts\n\r\n\r\nconst RndSquareImgTexture = ['blueSquare', 'greenSquare', 'brownSquare'];\r\nconst GetSquareShape = () => {\r\n    const SideValue = 200;\r\n    const Side = userSetting/* View.calcRatio */.G7.calcRatio(SideValue);\r\n    let bData = {};\r\n    return {\r\n        hitArea: new Phaser.Geom.Rectangle(Side / 2, Side / 2, Side, Side),\r\n        bData: bData,\r\n        callback: Phaser.Geom.Rectangle.Contains,\r\n        score: SideValue * SideValue / 100,\r\n        bodyConfig: {\r\n            type: 'rectangle',\r\n            width: Side,\r\n            height: Side,\r\n            offset: { x: Side / 2, y: Side / 2 }\r\n        },\r\n        imgTexture: RndSquareImgTexture[(0,math/* GetRndInt */.dZ)(0, RndSquareImgTexture.length)],\r\n        setImgDisplaySize: function (block) {\r\n            block.getShapeImg().setDisplaySize(Side, Side);\r\n            block.getPhysicsCon().setSize(Side, Side);\r\n            // block.input && block.input.hitArea.setTo(Side, Side);\r\n            return block;\r\n        }\r\n    };\r\n};\r\n/* harmony default export */ const square = (GetSquareShape);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/shape/index.ts\n\r\n\r\n\r\n\r\nconst ShapeTypeNameList = ['ball', 'rect', 'square',];\r\nconst ShapeTypePropertiesList = [\r\n    circle(), rectangle(), square(),\r\n];\r\nconst CommonPtrEvt = {\r\n    ptrDown: function (block) {\r\n        console.log('common ptr down');\r\n    },\r\n    ptrUp: function (block) {\r\n        console.log('common ptr up');\r\n    },\r\n    ptrOut: function (block) {\r\n        console.log('common ptr out');\r\n    },\r\n};\r\nconst PtrEvtList = ['ptrDown', 'ptrUp', 'drag', 'dragEnd'];\r\nconst ShapeTypeList = ShapeTypeNameList.map((ele, idx) => {\r\n    var _a;\r\n    // setting block data with common evt\r\n    let bData = (_a = ShapeTypePropertiesList[idx]) === null || _a === void 0 ? void 0 : _a.bData;\r\n    if (!bData)\r\n        bData = Object.assign({}, CommonPtrEvt);\r\n    else {\r\n        PtrEvtList.map((ptrEvt) => {\r\n            let tmpPrevFunc = bData[ptrEvt];\r\n            if (tmpPrevFunc) {\r\n                ShapeTypePropertiesList[idx].bData[ptrEvt] = (block) => {\r\n                    CommonPtrEvt[ptrEvt](block);\r\n                    tmpPrevFunc(block);\r\n                };\r\n            }\r\n        });\r\n    }\r\n    return Object.assign({ typeName: ele }, ShapeTypePropertiesList[idx]);\r\n});\r\nconst ShapeSystem = {\r\n    getCertainShape: function (shapeTypeName) {\r\n        return ShapeTypeList.find((ele) => ele.typeName === shapeTypeName);\r\n    },\r\n    getRndShape: function () { return (0,etc/* GetRndEleFromArray */.fB)(ShapeTypeList); },\r\n};\r\nconst SetBlockShape = (block, typeName) => {\r\n    if (!typeName)\r\n        block.setShape(ShapeSystem.getRndShape());\r\n    else\r\n        block.setShape(ShapeSystem.getCertainShape(typeName));\r\n    block.setShapeName(block.getShape().typeName);\r\n    block.getPhysicsCon().setBody(block.getShape().bodyConfig);\r\n    block.getShapeImg().setTexture(block.getShape().imgTexture);\r\n    block.getShape().setImgDisplaySize(block);\r\n    if (block.getShape().bData)\r\n        block.addBlockData(block.getShape().bData);\r\n    return block;\r\n};\r\n/* harmony default export */ const shape = ((/* unused pure expression or super */ null && (ShapeSystem)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/block/system.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst BlockSystem = {\r\n    // manage block list\r\n    onScreenList: [],\r\n    standbyList: [],\r\n    // static postion of block\r\n    standbyPosX: -500,\r\n    standbyPosY: -500,\r\n    leftX: 0,\r\n    rightX: userSetting/* View.w */.G7.w,\r\n    bottomY: 0,\r\n    spawnY: -200,\r\n    getRndSpawnX: function () { return (0,math/* GetRndInt */.dZ)(this.leftX, this.rightX); },\r\n    getRndAngle: function () { return (0,math/* GetRndInt */.dZ)(0, 360); },\r\n    // game over related properties\r\n    overLineY: 0,\r\n    overCnt: 0,\r\n    overCntMax: 8 * 1000,\r\n    overMaxBlock: 8,\r\n    isGameOver: false,\r\n    getIsGameOver: function () { return this.isGameOver; },\r\n    setIsGameOver: function (isOver) { return this.isGameOver = isOver; },\r\n    // responsive spawning block time\r\n    nextSpawnTime: 0,\r\n    spawnDelayBySecList: [800, 950, 1100, 1250, 1400, 1550],\r\n    spawnDelayBySec: 1800,\r\n};\r\nconst InitBlockSystem = () => {\r\n    RemoveAllBlockOnDisplay();\r\n    BlockSystem.setIsGameOver(false);\r\n    BlockSystem.nextSpawnTime = ui_time.init;\r\n    BlockSystem.spawnDelayBySec = BlockSystem.spawnDelayBySecList[5];\r\n};\r\nconst AddCertainBlock = (scene, typeName) => {\r\n    let block;\r\n    // get block from standy list or create new one\r\n    if (BlockSystem.standbyList.length > 0) {\r\n        block = BlockSystem.standbyList.shift();\r\n        if (!block.scene) { // is block scene removed?\r\n            block.destroy();\r\n            block = new basic(scene);\r\n        }\r\n    }\r\n    else\r\n        block = new basic(scene);\r\n    // set block shape & type, push to on screen list & spawn\r\n    SetBlockShape(block);\r\n    Set2TypeBlock(block, typeName);\r\n    BlockSystem.onScreenList.push(block);\r\n    SpawnBlock(block);\r\n    return block;\r\n};\r\nconst AddObstacleBlock = (block) => {\r\n    block.scene.cameras.main.shake(200, 0.02, true);\r\n    audio.playSfx('spawnObstacleSfx');\r\n    AddCertainBlock(block.scene, 'obstacle');\r\n    return block;\r\n};\r\nconst GetRndBlockType = () => {\r\n    // get random block type via spawn chance\r\n    let distributionArr = [];\r\n    BlockUniqueProperties.map((ele) => {\r\n        // ele.spawnChance = ele.spawnChance / SpawnMaxChance;\r\n        if (ele.spawnChance === 0)\r\n            return;\r\n        for (let i = 0; i < ele.spawnChance; i++) {\r\n            distributionArr.push(ele.typeName);\r\n        }\r\n    });\r\n    return distributionArr[(0,math/* GetRndInt */.dZ)(0, distributionArr.length)];\r\n};\r\nconst AddRndBlock = (scene) => {\r\n    const rndType = GetRndBlockType();\r\n    AddCertainBlock(scene, rndType);\r\n};\r\nconst ClearBlock = (block, score) => {\r\n    if (!block)\r\n        return;\r\n    let blockScore = score ? score : block.getScore();\r\n    ui_score.add(blockScore);\r\n    efx.animScore(block, blockScore);\r\n    const { value, chance } = block.getTimeIncrease();\r\n    if (ui_time.curr > ui_time.last10 && chance > (0,math/* GetRndNum */.hg)(0, 100)) {\r\n        ui_time.increaseTime(value);\r\n        efx.animTimeIncrease(block, chance, value);\r\n    }\r\n    RemoveBlock(block);\r\n};\r\nconst RemoveBlock = (block) => {\r\n    // remove from onScreenList\r\n    BlockSystem.onScreenList = BlockSystem.onScreenList.filter(screenBlock => screenBlock.id !== block.id);\r\n    if (!block.scene) {\r\n        block.destroy();\r\n        return;\r\n    }\r\n    // chck is already in standby list\r\n    if (BlockSystem.standbyList.some(standbyBlock => standbyBlock.id === block.id))\r\n        return;\r\n    DeathBlock(block);\r\n    block.setPosition(BlockSystem.standbyPosX, BlockSystem.standbyPosY);\r\n    BlockSystem.standbyList.push(block);\r\n};\r\nconst RemoveAllBlockOnDisplay = () => {\r\n    if (!BlockSystem.onScreenList)\r\n        return;\r\n    BlockSystem.onScreenList.map((block) => { RemoveBlock(block); });\r\n    BlockSystem.onScreenList = [];\r\n    if (!BlockSystem.standbyList)\r\n        return;\r\n    BlockSystem.standbyList = BlockSystem.standbyList.filter((standbyBlock) => {\r\n        if (!standbyBlock.scene) {\r\n            standbyBlock.destroy();\r\n        }\r\n        else\r\n            return standbyBlock;\r\n    });\r\n};\r\nconst UpdateBlockChckIsGameOver = (scene, time, delta) => {\r\n    // chck every block which is game over border line\r\n    const isOverBorderLine = BlockSystem.onScreenList.some((screenBlock) => {\r\n        if (!screenBlock)\r\n            return false;\r\n        return screenBlock.y < BlockSystem.overLineY;\r\n    });\r\n    // block count is over max & at least one block cross game over border line\r\n    if (isOverBorderLine && BlockSystem.onScreenList.length > BlockSystem.overMaxBlock) {\r\n        BlockSystem.overCnt += delta * ui_time.timeScale;\r\n        // game over condition\r\n        if (BlockSystem.overCnt > BlockSystem.overCntMax) {\r\n            BlockSystem.overCnt = 0;\r\n            BlockSystem.setIsGameOver(true);\r\n            gameover.animGameOver(scene);\r\n        }\r\n        else\r\n            BlockSystem.setIsGameOver(false);\r\n    }\r\n    else {\r\n        // init game over warning properties\r\n        BlockSystem.overCnt = 0;\r\n        BlockSystem.setIsGameOver(false);\r\n    }\r\n};\r\nconst UpdateSpawnBlocks = (scene, delta) => {\r\n    // get game time & timeline idx calculate\r\n    const gameTimeCurr = ui_time.getCurr();\r\n    let timelineIdx = parseInt((gameTimeCurr / 1000 / 10).toString());\r\n    if (timelineIdx < 0)\r\n        timelineIdx = 0;\r\n    if (timelineIdx >= BlockSystem.spawnDelayBySecList.length) {\r\n        timelineIdx = BlockSystem.spawnDelayBySecList.length - 1;\r\n    }\r\n    // adjust responsive spawn block time\r\n    BlockSystem.spawnDelayBySec = BlockSystem.spawnDelayBySecList[timelineIdx];\r\n    // spawn block\r\n    BlockSystem.nextSpawnTime += delta * ui_time.timeScale;\r\n    if (BlockSystem.nextSpawnTime > BlockSystem.spawnDelayBySec) {\r\n        BlockSystem.nextSpawnTime = 0;\r\n        AddRndBlock(scene);\r\n    }\r\n    ;\r\n};\r\nconst UpdateAllBlocks = (scene, time, delta) => {\r\n    if (BlockSystem.getIsGameOver())\r\n        return;\r\n    UpdateBlockChckIsGameOver(scene, time, delta);\r\n    BlockSystem.onScreenList.map(block => UpdateBlock(block, time, delta));\r\n    UpdateSpawnBlocks(scene, delta);\r\n};\r\n/* harmony default export */ const system = (BlockSystem);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/time.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst GameTime = {\r\n    txt: null,\r\n    last10Txt: null,\r\n    last10PrevTime: 11,\r\n    isLast10HasOnceCnt: true,\r\n    isGameTimeEndOnceCnt: true,\r\n    isFirstLast10HasOnceCnt: true,\r\n    standbyTime: 3 * 1000,\r\n    init: 60 * 1000,\r\n    curr: 60 * 1000,\r\n    last10: 10 * 1000,\r\n    increasedTime: 0,\r\n    // anim option\r\n    animIncreaseTimeDuration: 400,\r\n    animTw: null,\r\n    animTwScaleMin: 1,\r\n    animTwScaleMax: 1.4,\r\n    isTwing: false,\r\n    // time scale option\r\n    timeScale: 1,\r\n    showSettingTimeScale: 0.1,\r\n    hideSettingTimeScale: 1,\r\n    sndLast10Voice: function (scene, time) {\r\n        // scene.sound.play('voice' + time);\r\n        audio.playSfx('voice' + time);\r\n        this.last10Txt.setText(time);\r\n    },\r\n    increaseTime: function (time) {\r\n        // last 10 seconds left so increasing time is useless\r\n        if (!this.isFirstLast10HasOnceCnt)\r\n            return;\r\n        this.curr += time;\r\n        this.increasedTime += time;\r\n        return this;\r\n    },\r\n    set2Format: function (milliTime) {\r\n        // separate minute, second each\r\n        const timeSec = milliTime / 1000;\r\n        const secondSplit = timeSec.toFixed(2).split('.');\r\n        let minutes = Math.floor(timeSec / 60);\r\n        let seconds = Math.floor(Number(secondSplit[0]));\r\n        let underPointDigitNum = Number(secondSplit[1]);\r\n        if (minutes < 10)\r\n            minutes = '0' + minutes;\r\n        if (seconds < 10)\r\n            seconds = '0' + seconds;\r\n        if (underPointDigitNum < 10)\r\n            underPointDigitNum = '0' + underPointDigitNum;\r\n        const time = minutes + ':' + seconds + '.' + underPointDigitNum;\r\n        this.txt.setText(time);\r\n    },\r\n    setTimeScale: function (scene, timeScale) {\r\n        scene.matter.world.engine.timing.timeScale = timeScale;\r\n        this.timeScale = timeScale;\r\n    },\r\n    getCurr: function () { return this.curr; },\r\n    updateLast10CntAnim: function (scene) {\r\n        // stop bgm & hide setting btn & time increasing is not possible\r\n        if (this.isFirstLast10HasOnceCnt) {\r\n            this.isFirstLast10HasOnceCnt = false;\r\n            audio.pauseBgm('gameBgm');\r\n            HideSettingBtn(scene);\r\n        }\r\n        this.last10Txt.setVisible(true);\r\n        const time = Math.ceil(this.curr / 1000);\r\n        if (this.last10PrevTime !== time) {\r\n            this.isLast10HasOnceCnt = true;\r\n            this.last10PrevTime = time;\r\n        }\r\n        else\r\n            this.isLast10HasOnceCnt = false;\r\n        if (this.isLast10HasOnceCnt)\r\n            this.sndLast10Voice(scene, time);\r\n    },\r\n    update: function (scene, delta) {\r\n        if (system.getIsGameOver())\r\n            return;\r\n        if (this.curr > 0) {\r\n            this.curr -= delta * this.timeScale;\r\n            this.set2Format(this.curr);\r\n            const isUnder10Sec = this.curr > 0 && this.curr <= 10 * 1000;\r\n            isUnder10Sec && this.updateLast10CntAnim(scene, delta);\r\n            return;\r\n        }\r\n        if (this.isGameTimeEndOnceCnt) {\r\n            this.isGameTimeEndOnceCnt = false;\r\n            system.setIsGameOver(true);\r\n            this.curr = 0;\r\n            this.set2Format(0);\r\n            this.last10Txt.setVisible(false);\r\n            gameover.animTimeOver(scene);\r\n            return;\r\n        }\r\n    },\r\n    initTimeIncrease: function () {\r\n        this.increasedTime = 0;\r\n        return this.increasedTime;\r\n    },\r\n    getTimeIncrease: function () { return this.increasedTime; },\r\n    addTimeIncrease: function (time) {\r\n        this.increasedTime += time;\r\n        return this.increasedTime;\r\n    },\r\n};\r\nconst InitGameTime = () => {\r\n    GameTime.last10Txt.setVisible(false);\r\n    GameTime.last10PrevTime = 11;\r\n    GameTime.isLast10HasOnceCnt = true;\r\n    GameTime.isGameTimeEndOnceCnt = true;\r\n    GameTime.curr = GameTime.init;\r\n    GameTime.increasedTime = 0;\r\n    GameTime.timeScale = 1;\r\n    GameTime.initTimeIncrease();\r\n};\r\nconst CreateGameTimeTxt = (scene) => {\r\n    const initX = TxtMargin / 2 + 46;\r\n    GameTime.txt = scene.add.text(initX, TxtMargin - 10, '');\r\n    GameTime.txt.setAlpha(TxtAlpha);\r\n    GameTime.txt.setOrigin(0, 0);\r\n    GameTime.txt.setFontSize(TxtSize);\r\n    GameTime.txt.setBackgroundColor(TxtBackgroundColor);\r\n    GameTime.last10Txt = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, '');\r\n    GameTime.last10Txt.setAlpha(0.5);\r\n    GameTime.last10Txt.setOrigin(0.5, 0.5);\r\n    GameTime.last10Txt.setFontSize(userSetting/* View.w */.G7.w / 2);\r\n    GameTime.last10Txt.setVisible(false);\r\n    [GameTime.txt, GameTime.last10Txt].map((txt) => {\r\n        txt.setPadding({ left: TxtPadding, right: TxtPadding, top: TxtPadding / 2, bottom: TxtPadding / 2 });\r\n        txt.setFontFamily(TxtFamily);\r\n        SetDepth(txt, 'txt');\r\n    });\r\n    InitGameTime();\r\n};\r\nconst SetmillieSec2SecTimeFormat = (millieSec) => {\r\n    const sec = (millieSec / 1000).toFixed(2) + ' sec';\r\n    return sec;\r\n};\r\n/* harmony default export */ const ui_time = (GameTime);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/ui/setting.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { CreateHow, CreateHowInSetting } from './how';\r\nconst Setting = {\r\n    btn: null,\r\n    layer: null,\r\n    layerData: {\r\n        txtGap: 50,\r\n        controlTxtList: ['FullScreen', 'Normal'],\r\n        isFullScreen: false,\r\n    },\r\n    exitBtn: null,\r\n    isOpen: false,\r\n    isTwing: false,\r\n};\r\nconst InitSetting = (scene) => {\r\n    Setting.isTwing = false;\r\n    HideSetting(scene);\r\n};\r\nconst CreateSetting = (scene) => {\r\n    const { margin, alpha, scale } = ui;\r\n    Setting.btn = scene.add.image(userSetting/* View.w */.G7.w - margin, margin, 'settingBtn');\r\n    Setting.btn.setScale(scale);\r\n    Setting.btn.setAlpha(alpha);\r\n    Setting.btn.setInteractive();\r\n    Setting.btn.on('pointerup', () => { Setting.isTwing || AnimShowSetting(scene); });\r\n    Setting.layer = scene.add.container();\r\n    const bg = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 'blackScreen');\r\n    bg.setInteractive();\r\n    bg.setDisplaySize(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n    bg.setAlpha(0.4);\r\n    const panel = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 'settingPanel');\r\n    panel.setDisplaySize(userSetting/* View.w */.G7.w - ContextMarginW, userSetting/* View.h */.G7.h - ContextMarginH);\r\n    const title = scene.add.text(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY - (TxtTitleHeightGap * 3), 'Setting');\r\n    SetFont2CommonContextStyle(title);\r\n    title.setFontSize(TxtTitleHeadSize);\r\n    const bgmBtn = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY - userSetting/* View.h */.G7.h / 6, 'musicOn');\r\n    const bgmGage = CreateGageBar(scene, userSetting/* View.centerX */.G7.centerX, bgmBtn.y + SettingGapContextMargin, (min, max, curr) => {\r\n        audio.setBgmVolume(curr / 100);\r\n    });\r\n    bgmGage.setGageNum(audio.bgmVolume * 100);\r\n    const sfxBtn = scene.add.image(userSetting/* View.centerX */.G7.centerX, bgmGage.y + SettingGapContextMargin, 'audioOn');\r\n    const sfxGage = CreateGageBar(scene, userSetting/* View.centerX */.G7.centerX, sfxBtn.y + SettingGapContextMargin, (min, max, curr) => {\r\n        audio.setSfxVolume(curr / 100);\r\n        audio.playSfx('gearAnim');\r\n    });\r\n    sfxGage.setGageNum(audio.sfxVolume * 100);\r\n    [bgmBtn, sfxBtn].map((btn) => {\r\n        btn.setScale(0.6);\r\n        btn.setInteractive();\r\n    });\r\n    bgmBtn.on('pointerup', () => {\r\n        const isOn = bgmBtn.texture.key === 'musicOn';\r\n        bgmGage.setAble(!isOn);\r\n        bgmBtn.setTexture(isOn ? 'musicOff' : 'musicOn');\r\n        audio.setBgmMute(isOn);\r\n    });\r\n    sfxBtn.on('pointerup', () => {\r\n        const isOn = sfxBtn.texture.key === 'audioOn';\r\n        sfxGage.setAble(!isOn);\r\n        sfxBtn.setTexture(isOn ? 'audioOff' : 'audioOn');\r\n        audio.setSfxMute(isOn);\r\n    });\r\n    bgmBtn.setTexture(audio.isBgmMute ? 'musicOff' : 'musicOn');\r\n    sfxBtn.setTexture(audio.isSfxMute ? 'audioOff' : 'audioOn');\r\n    bgmGage.setAble(!audio.isBgmMute);\r\n    sfxGage.setAble(!audio.isSfxMute);\r\n    const { txtGap } = Setting.layerData;\r\n    // add back to title btn\r\n    const back2TitleBg = scene.add.image(userSetting/* View.centerX */.G7.centerX, sfxGage.y + SettingGapContextMarginLarger, 'settingOverBtnUp').setScale(1.2);\r\n    const back2Title = scene.add.image(back2TitleBg.x, back2TitleBg.y - 4, 'overBack');\r\n    back2Title.setScale(0.6).setInteractive();\r\n    back2Title.downPosY = back2Title.y + 4;\r\n    back2Title.upPosY = back2Title.y;\r\n    back2Title.on('pointerdown', () => {\r\n        back2TitleBg.setTexture('settingOverBtnDown');\r\n        back2Title.setPosition(back2Title.x, back2Title.downPosY);\r\n    });\r\n    back2Title.on('pointerup', () => {\r\n        audio.playSfx('gearAnim');\r\n        back2TitleBg.setTexture('settingOverBtnUp');\r\n        back2Title.setPosition(back2Title.x, back2Title.upPosY);\r\n        if (back2Title.isChanging)\r\n            return;\r\n        if (!scene.scene.isActive('title')) {\r\n            StopGame(scene);\r\n            StartTitle(scene);\r\n        }\r\n        else\r\n            AnimHideSetting(scene);\r\n        setTimeout(() => { back2Title.isChanging = false; }, 500);\r\n    });\r\n    back2Title.on('pointerout', () => {\r\n        back2TitleBg.setTexture('settingOverBtnUp');\r\n        back2Title.setPosition(back2Title.x, back2Title.upPosY);\r\n    });\r\n    const back2TitleTxt = scene.add.text(back2TitleBg.x, back2TitleBg.y + txtGap, 'Go to Title');\r\n    SetFont2CommonContextStyle(back2TitleTxt);\r\n    back2TitleTxt.setFontSize(16);\r\n    const back2TitleList = [back2TitleBg, back2Title, back2TitleTxt];\r\n    // // add screen size controller\r\n    // const sizeControllerBg = scene.add.image(View.centerX + controlGap, back2TitleBg.y, 'settingOverBtnUp').setScale(1.2);\r\n    // let sizeController = scene.add.image(sizeControllerBg.x, sizeControllerBg.y - 4, 'screenLarger') as TToggleBtnImg;\r\n    // sizeController.setScale(0.6).setInteractive();\r\n    // sizeController.downPosY = sizeController.y + 4;\r\n    // sizeController.upPosY = sizeController.y;\r\n    // sizeController.on('pointerdown', () => {\r\n    //     sizeControllerBg.setTexture('settingOverBtnDown');\r\n    //     sizeController.setPosition(sizeController.x, sizeController.downPosY);\r\n    // });\r\n    // const sizeControllerExitEvt = () => {\r\n    //     Setting.layerData.isFullScreen = false;\r\n    //     scene.scale.stopFullscreen();\r\n    //     sizeController.setTexture('screenLarger');\r\n    //     sizeControlTxt.setText(controlTxtList[0]);\r\n    // };\r\n    // const sizeControllerToggleEvt = () => {\r\n    //     Setting.layerData.isFullScreen = !Setting.layerData.isFullScreen;\r\n    //     if (Setting.layerData.isFullScreen) {\r\n    //         scene.scale.startFullscreen();\r\n    //         sizeController.setTexture('screenSmaller');\r\n    //         sizeControlTxt.setText(controlTxtList[1]);\r\n    //     }\r\n    //     else sizeControllerExitEvt();\r\n    // };\r\n    // sizeController.on('pointerup', () => {\r\n    //     GameAudio.playSfx('gearAnim');\r\n    //     sizeControllerBg.setTexture('settingOverBtnUp');\r\n    //     sizeController.setPosition(sizeController.x, sizeController.upPosY);\r\n    //     if (sizeController.isChanging) return;\r\n    //     sizeController.isChanging = true;\r\n    //     sizeControllerToggleEvt();\r\n    //     setTimeout(() => { sizeController.isChanging = false; }, 300);\r\n    // });\r\n    // sizeController.on('pointerout', () => {\r\n    //     sizeControllerBg.setTexture('settingOverBtnUp');\r\n    //     sizeController.setPosition(sizeController.x, sizeController.upPosY);\r\n    // });\r\n    // const sizeControlTxt = scene.add.text(sizeControllerBg.x, sizeControllerBg.y + txtGap, controlTxtList[0]);\r\n    // SetFont2CommonContextStyle(sizeControlTxt);\r\n    // sizeControlTxt.setFontSize(16);\r\n    // // resize event for stop full screen\r\n    // scene.scale.off('resize');\r\n    // scene.scale.on('resize', () => {\r\n    //     if (sizeController.isChanging) return;\r\n    //     if (!Setting.layerData.isFullScreen) return;\r\n    //     GameAudio.playSfx('gearAnim');\r\n    //     sizeControllerExitEvt();\r\n    // });\r\n    // const sizeControllerList = [ sizeControllerBg, sizeController, sizeControlTxt ];\r\n    // const howContext = CreateHow(scene);\r\n    // const howBtn = scene.add.image(View.centerX, sizeControlTxt.y + SettingGapContextMargin, 'btnSettingUp') as TToggleBtnImg;\r\n    // howBtn.setInteractive().setScale(1);\r\n    // howBtn.downPosY = howBtn.y + 4;\r\n    // howBtn.upPosY = howBtn.y;\r\n    // howBtn.on('pointerdown', () => {\r\n    //     howBtn.setTexture('btnSettingDown');\r\n    //     howTxt.setPosition(howTxt.x, howBtn.downPosY);\r\n    // });\r\n    // howBtn.on('pointerup', () => {\r\n    //     GameAudio.playSfx('gearAnim');\r\n    //     howBtn.setTexture('btnSettingUp');\r\n    //     howTxt.setPosition(howTxt.x, howBtn.upPosY);\r\n    //     howContext.show();\r\n    // });\r\n    // howBtn.on('pointerout', () => {\r\n    //     howBtn.setTexture('btnSettingUp');\r\n    //     howTxt.setPosition(howTxt.x, howBtn.upPosY);\r\n    // });\r\n    // const howTxt = scene.add.text(howBtn.x, howBtn.y, 'how');\r\n    // SetFont2CommonContextStyle(howTxt);\r\n    // howTxt.setFontSize(TxtTitleSize);\r\n    // const howList = [ howBtn, howTxt, howContext ];\r\n    Setting.layer.add([\r\n        bg, panel, title,\r\n        bgmBtn, sfxBtn,\r\n        bgmGage, sfxGage,\r\n        ...back2TitleList,\r\n        // ...sizeControllerList,\r\n    ]);\r\n    // exit btn & last container setup\r\n    Setting.exitBtn = scene.add.image(userSetting/* View.w */.G7.w - SettingContextMargin, SettingContextMargin, 'exitBtn').setScale(0.6);\r\n    Setting.exitBtn.setInteractive();\r\n    Setting.exitBtn.on('pointerup', () => {\r\n        AnimHideSetting(scene);\r\n    });\r\n    [Setting.btn, Setting.layer, Setting.exitBtn].map(ele => SetDepth(ele, 'setting'));\r\n    InitSetting(scene);\r\n    return Setting;\r\n};\r\nconst GageHeight = 20;\r\nconst CreateGageBar = (scene, x, y, endMoveCallback, gageNumMin = 0, gageNumMax = 100) => {\r\n    const con = scene.add.container(x, y);\r\n    con.gageNumMin = gageNumMin;\r\n    con.gageNumMax = gageNumMax;\r\n    con.gageNum = (con.gageNumMin + con.gageNumMax) / 2;\r\n    const gageBg = scene.add.image(0, 0, 'colorBackground');\r\n    const gageBar = scene.add.image(0, 0, 'btnBlue');\r\n    const gageBarHandle = scene.add.image(0, 0, 'colorHandle');\r\n    const gageTxt = scene.add.text(0, 0, con.gageNum.toString());\r\n    gageBg.setDisplaySize(userSetting/* View.centerX */.G7.centerX, GageHeight);\r\n    gageBar.setDisplaySize(userSetting/* View.centerX */.G7.centerX / 2, GageHeight);\r\n    gageBar.setOrigin(0, 0.5);\r\n    gageBar.setPosition(-userSetting/* View.centerX */.G7.centerX / 2, 0);\r\n    gageTxt.setOrigin(0, 0.5);\r\n    gageTxt.setPosition(userSetting/* View.centerX */.G7.centerX / 2 + TxtMargin - 5, 0);\r\n    con.add([gageBg, gageBar, gageBarHandle, gageTxt]);\r\n    con.gagePosX = 0;\r\n    con.gagePosXMin = -gageBg.width / 2 - gageBarHandle.width / 2;\r\n    con.gagePosXMax = gageBg.width / 2 + gageBarHandle.width / 2;\r\n    con.gagePosXLength = gageBg.width + gageBarHandle.width;\r\n    con.setGageHandleFrame = (isDown) => {\r\n        gageBarHandle.setTexture(isDown ? 'colorHandleDown' : 'colorHandle');\r\n    };\r\n    con.setGageBarSize = (gagePos) => {\r\n        let gagePosX = gagePos;\r\n        if (gagePosX <= con.gagePosXMin)\r\n            gagePosX = con.gagePosXMin;\r\n        else if (gagePosX >= con.gagePosXMax)\r\n            gagePosX = con.gagePosXMax;\r\n        con.gagePosX = gagePosX;\r\n        con.gageNum = Math.floor((con.gageNumMax - con.gageNumMin) * Math.abs(gagePosX - con.gagePosXMin) / con.gagePosXLength);\r\n        con.setGage();\r\n    };\r\n    con.setGageNum = (gageNum) => {\r\n        let gageNumber = gageNum;\r\n        if (gageNumber < con.gageNumMin)\r\n            gageNumber = con.gageNumMin;\r\n        else if (gageNumber > con.gageNumMax)\r\n            gageNumber = con.gageNumMax;\r\n        con.gageNum = gageNumber;\r\n        con.gagePosX = (con.gageNum * con.gagePosXLength / con.gageNumMax) - con.gagePosXMax;\r\n        con.setGage();\r\n    };\r\n    con.setGage = () => {\r\n        gageBar.setDisplaySize(con.gagePosX + gageBar.width / 2 + gageBarHandle.width / 2, GageHeight);\r\n        gageBarHandle.setPosition(con.gagePosX, 0);\r\n        gageTxt.setText(con.gageNum.toFixed(0));\r\n    };\r\n    con.setAble = (isAble) => {\r\n        con.isAble = isAble;\r\n        con.isAble ? con.setAlpha(1) : con.setAlpha(0.5);\r\n    };\r\n    con.setAble(true);\r\n    gageBarHandle.setInteractive({ draggable: true });\r\n    gageBarHandle.on('dragstart', () => {\r\n        con.isAble && con.setGageHandleFrame(true);\r\n    });\r\n    gageBarHandle.on('drag', (ptr, dragX) => {\r\n        con.isAble && con.setGageBarSize(dragX);\r\n    });\r\n    gageBarHandle.on('dragend', () => {\r\n        if (con.isAble) {\r\n            con.setGageHandleFrame(false);\r\n            endMoveCallback && endMoveCallback(con.gageNumMin, con.gageNumMax, con.gageNum);\r\n        }\r\n    });\r\n    return con;\r\n};\r\nconst AnimShowSetting = (scene) => {\r\n    Setting.isTwing = true;\r\n    audio.playSfx('gearAnim');\r\n    scene.tweens.addCounter({\r\n        from: 0, to: 60, duration: 120,\r\n        onUpdate: (tw, data) => { Setting.btn.setAngle(data.value); },\r\n        onComplete: () => {\r\n            Setting.isTwing = false;\r\n            ShowSetting(scene);\r\n        }\r\n    });\r\n};\r\nconst AnimHideSetting = (scene) => {\r\n    Setting.isTwing = true;\r\n    audio.playSfx('gearAnim');\r\n    HideSetting(scene);\r\n    scene.tweens.addCounter({\r\n        from: 180, to: 0, duration: 120,\r\n        onUpdate: (tw, data) => { Setting.btn.setAngle(data.value); },\r\n        onComplete: () => { Setting.isTwing = false; }\r\n    });\r\n};\r\nconst ShowSetting = (scene) => {\r\n    ui_time.setTimeScale(scene, ui_time.showSettingTimeScale);\r\n    Setting.isOpen = true;\r\n    Setting.layer.setVisible(true);\r\n    Setting.exitBtn.setVisible(true);\r\n};\r\nconst HideSetting = (scene) => {\r\n    ui_time.setTimeScale(scene, ui_time.hideSettingTimeScale);\r\n    Setting.isOpen = false;\r\n    Setting.layer.setVisible(false);\r\n    Setting.exitBtn.setVisible(false);\r\n};\r\nconst ShowSettingBtn = (scene) => {\r\n    HideSetting(scene);\r\n    Setting.btn.setVisible(true);\r\n};\r\nconst HideSettingBtn = (scene) => {\r\n    HideSetting(scene);\r\n    Setting.btn.setVisible(false);\r\n};\r\n/* harmony default export */ const setting = ((/* unused pure expression or super */ null && (Setting)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/scenes/ui/sns/index.ts\n\r\n\r\n\r\nconst ChannelAdvertise = {\r\n    textureList: ['blackScreen', 'channelBtnDown', 'channelBtnUp', 'channelLogo',],\r\n    youtubeBtnLayer: null,\r\n    youtubePopUpLayer: null,\r\n    youtubeShow: () => {\r\n        ChannelAdvertise.youtubePopUpLayer.setVisible(true);\r\n    },\r\n    youtubeHide: () => {\r\n        ChannelAdvertise.youtubePopUpLayer.setVisible(false);\r\n    },\r\n    blogBtnLayer: null,\r\n    blogPopUpLayer: null,\r\n    blogShow: () => {\r\n        ChannelAdvertise.blogPopUpLayer.setVisible(true);\r\n    },\r\n    blogHide: () => {\r\n        ChannelAdvertise.blogPopUpLayer.setVisible(false);\r\n    },\r\n};\r\nconst GetSnsAssets = (exceptionKeys) => {\r\n    const assetList = [\r\n        // youtube\r\n        { key: 'youtubeLogo', url: CommonSns + 'youtubeLogo.png', type: 'image' },\r\n        { key: 'channelLogo', url: CommonSns + 'channelLogo.jpg', type: 'image' },\r\n        // blog\r\n    ];\r\n    return GetAssetFiles(assetList, exceptionKeys);\r\n};\r\nconst InitChannel = () => {\r\n    ChannelAdvertise.youtubeHide();\r\n};\r\nconst CreateChannel = (scene, videoUrl, commonTextStyle, channelData) => {\r\n    var _a, _b, _c, _d;\r\n    const btnW = (_a = channelData === null || channelData === void 0 ? void 0 : channelData.w) !== null && _a !== void 0 ? _a : 60;\r\n    const btnH = (_b = channelData === null || channelData === void 0 ? void 0 : channelData.h) !== null && _b !== void 0 ? _b : 45;\r\n    const btnScaleTime = 1.1;\r\n    const btnBg = scene.add.image((_c = channelData === null || channelData === void 0 ? void 0 : channelData.x) !== null && _c !== void 0 ? _c : userSetting/* View.centerX */.G7.centerX, (_d = channelData === null || channelData === void 0 ? void 0 : channelData.y) !== null && _d !== void 0 ? _d : userSetting/* View.h */.G7.h - 36, 'channelBtnUp');\r\n    const btnLogo = scene.add.image(btnBg.x, btnBg.y, 'youtubeLogo');\r\n    btnLogo.setInteractive();\r\n    btnLogo.on('pointerdown', () => {\r\n        btnLogo.setDisplaySize(btnW * btnScaleTime, btnH * btnScaleTime);\r\n        btnBg.setTexture('channelBtnDown');\r\n    });\r\n    btnLogo.on('pointerup', () => {\r\n        btnLogo.setDisplaySize(btnW, btnH);\r\n        btnBg.setTexture('channelBtnUpss');\r\n        ChannelAdvertise.youtubeShow();\r\n    });\r\n    btnLogo.on('pointerout', () => {\r\n        btnLogo.setDisplaySize(btnW, btnH);\r\n        btnBg.setTexture('channelBtnUp');\r\n    });\r\n    btnLogo.setDisplaySize(btnW, btnH);\r\n    ChannelAdvertise.youtubeBtnLayer = scene.add.layer([\r\n        btnBg, btnLogo\r\n    ]);\r\n    const popUpMargin = 70;\r\n    const channelUrl = 'https://www.youtube.com/channel/UCBJnFgIQ9YORTiz10_Mgy_A';\r\n    const videoThumbnail = `https://i1.ytimg.com/vi/${videoUrl.split('=')[1]}/default.jpg`;\r\n    const popUpBg = scene.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY, 'blackScreen');\r\n    const popUpTitle = scene.add.text(popUpBg.x, userSetting/* View.h */.G7.h / 8, 'My Youtube');\r\n    const popUpTxtList = [];\r\n    const popUpMadeVideo = scene.add.image(popUpBg.x, userSetting/* View.centerY */.G7.centerY - popUpMargin, '');\r\n    let popUpMadeVideoWIP;\r\n    popUpMadeVideo.setDisplaySize(popUpMargin, popUpMargin);\r\n    if (!videoUrl) {\r\n        popUpMadeVideoWIP = scene.add.text(popUpBg.x, userSetting/* View.centerY */.G7.centerY - popUpMargin, '         Sorry!\\nWork In Progress');\r\n        popUpTxtList.push(popUpMadeVideoWIP);\r\n    }\r\n    const popUpMadeVideoTxt = scene.add.text(popUpBg.x, popUpMadeVideo.y + popUpMargin, 'Created video');\r\n    const popUpChannel = scene.add.image(popUpBg.x, popUpMadeVideoTxt.y + popUpMargin, 'channelLogo');\r\n    const popUpChannelTxt = scene.add.text(popUpBg.x, popUpChannel.y + popUpMargin, 'This is my channel');\r\n    const popUpExitGuide = scene.add.text(popUpBg.x, userSetting/* View.h */.G7.h - popUpMargin * 1.2, 'press anywhere to exit');\r\n    popUpTxtList.push(popUpTitle, popUpMadeVideoTxt, popUpChannelTxt, popUpExitGuide);\r\n    popUpTxtList.map(txt => commonTextStyle(txt));\r\n    popUpTitle.setFontSize(userSetting/* View.w */.G7.w / 12);\r\n    popUpExitGuide.setAlpha(ui.alpha);\r\n    popUpBg.setAlpha(0.4);\r\n    popUpBg.setDisplaySize(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n    popUpBg.setInteractive();\r\n    popUpBg.on('pointerup', () => { ChannelAdvertise.youtubeHide(); });\r\n    const openUrlTab = (url) => { window.open(url); };\r\n    [popUpMadeVideo, popUpMadeVideoTxt].map((video) => {\r\n        video.setInteractive();\r\n        video.on('pointerup', () => { openUrlTab(videoUrl); });\r\n    });\r\n    [popUpChannel, popUpChannelTxt].map((channel) => {\r\n        channel.setInteractive();\r\n        channel.on('pointerup', () => { openUrlTab(channelUrl); });\r\n    });\r\n    [popUpChannel, popUpMadeVideo].map((ele) => {\r\n        ele.setDisplaySize(popUpMargin, popUpMargin);\r\n    });\r\n    ChannelAdvertise.youtubePopUpLayer = scene.add.layer([\r\n        popUpBg, popUpMadeVideo, popUpChannel, ...popUpTxtList\r\n    ]);\r\n    InitChannel();\r\n    return ChannelAdvertise;\r\n};\r\nconst InitBlog = () => {\r\n};\r\nconst CreateBlog = (scene, blogUrl, commonTextStyle, channelData) => {\r\n    InitBlog();\r\n};\r\n/* harmony default export */ const sns = ((/* unused pure expression or super */ null && (ChannelAdvertise)));\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/scenes/title.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n// import { CreateHow } from './ui/how';\r\n// import { ClearGameLocalStorageData, DebugLocalStorage, GetLocalStorageData, SetLocalStorageItem } from '@src/utils/storage';\r\n\r\n\r\n\r\n// import GameWarning, { CreateGameWarning } from './ui/warning';\r\n\r\n\r\n// import PGUInspector from 'phaser3_gui_inspector';\r\nconst VersionNum = '1.0.0';\r\nconst StartTitle = (scene) => {\r\n    scene.scene.remove('title');\r\n    scene.scene.add('title', TitleScene);\r\n    scene.scene.launch('title');\r\n};\r\nconst StopTitle = (scene) => {\r\n    if (scene.scene.get('title')) {\r\n        scene.scene.setActive(false, 'title');\r\n        scene.scene.setVisible(false, 'title');\r\n        setTimeout(() => { scene.scene.remove('title'); }, 1000);\r\n    }\r\n};\r\nclass TitleScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: 'title',\r\n            active: false\r\n        });\r\n        this.titleFontSize = 50;\r\n        this.fontSize = 30;\r\n        this.middleGap = 5;\r\n        this.bgRndPos = { x: 0, y: 0 };\r\n    }\r\n    create() {\r\n        this.createBg();\r\n        this.logoBg = this.add.image(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY - TxtTitleHeightGap, 'btnBlue').setScale(1.8);\r\n        this.logo = this.add.text(this.logoBg.x, this.logoBg.y, 'BlockPang').setFontSize(this.titleFontSize);\r\n        this.startBg = this.add.image(this.logo.x, this.logo.y + (TxtTitleHeightGap * 2), 'titleContextBg');\r\n        this.start = this.add.text(this.startBg.x, this.startBg.y, 'start');\r\n        // this.creditBg = this.add.image(this.start.x, this.start.y + TxtTitleHeightGap, 'titleContextBg');\r\n        // this.credit = this.add.text(this.creditBg.x, this.creditBg.y, 'credits');\r\n        [this.logo, this.start].map((ele) => {\r\n            SetFont2CommonContextStyle(ele);\r\n            ele.setFontSize(TxtTitleSize);\r\n            ele.setColor('black');\r\n        });\r\n        [this.logoBg, this.startBg].map((ele) => {\r\n            ele.setInteractive();\r\n        });\r\n        this.logo.setFontSize(TxtTitleHeadSize);\r\n        this.logo.setColor('white');\r\n        this.logoBg.on('pointerup', () => {\r\n            audio.playSfx('earthquake');\r\n            this.animRndAngle([this.logoBg, this.logo]);\r\n            this.cameras.main.shake(250, 0.02, true);\r\n            // todo: drop one random block\r\n        });\r\n        this.startBg.on('pointerup', () => {\r\n            audio.playSfx('gearAnim');\r\n            StopTitle(this);\r\n            StartPassiveLoading(this);\r\n            setTimeout(() => {\r\n                StartGame(this);\r\n            }, 50);\r\n        });\r\n        // this.creditBg.on('pointerup', () => {\r\n        //     this.animRndAngle([ this.creditBg, this.credit ]);\r\n        //     this.creditContext.show();\r\n        // });\r\n        // this.createCreditContext();\r\n        CreateChannel(this, \r\n        // 'https://www.youtube.com/watch?v=Xn08jM1YnIs',\r\n        '', (txt) => {\r\n            SetFont2CommonContextStyle(txt);\r\n            SetDepth(txt, 'txt');\r\n        });\r\n        CreateGameAudio(this, storage);\r\n        CreateEfx(this);\r\n        CreateFullScreen(this);\r\n        CreateSetting(this);\r\n        // DebugLocalStorage(this, GameData, { item: 'best', value: 0 });\r\n        // // debugging\r\n        // const inspectorWidth = 255;\r\n        // PGUInspector(this, { right: window.innerWidth - inspectorWidth, top: 48 });\r\n    }\r\n    createBg() {\r\n        const bgTextureList = ['bgGreen', 'bgBrown', 'bgBlue'];\r\n        let bgTextureRndIdx = (0,math/* GetRndInt */.dZ)(0, bgTextureList.length);\r\n        this.bg = this.add.tileSprite(0, 0, userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h, bgTextureList[bgTextureRndIdx]).setOrigin(0);\r\n        this.createBgRndDirection();\r\n        this.tweens.addCounter({\r\n            from: 0, to: 1, duration: 3000, repeat: -1,\r\n            onUpdate: () => {\r\n                this.bg.tilePositionX += this.bgRndPos.x;\r\n                this.bg.tilePositionY += this.bgRndPos.y;\r\n            },\r\n            onRepeat: () => {\r\n                bgTextureRndIdx++;\r\n                if (bgTextureRndIdx >= bgTextureList.length)\r\n                    bgTextureRndIdx = 0;\r\n                this.bg.setTexture(bgTextureList[bgTextureRndIdx]);\r\n                this.createBgRndDirection();\r\n            }\r\n        });\r\n    }\r\n    createBgRndDirection() {\r\n        this.bgRndPos.x = (0,math/* GetRndNum */.hg)(-3, 4);\r\n        this.bgRndPos.y = (0,math/* GetRndNum */.hg)(-3, 4);\r\n    }\r\n    animRndAngle(list) {\r\n        audio.playSfx('gearAnim');\r\n        const rndAngle = (0,math/* GetRndNum */.hg)(-30, 31);\r\n        list.map(ele => ele.setAngle(rndAngle));\r\n        this.cameras.main.shake(50, 0.01, true);\r\n    }\r\n    createCreditContext() {\r\n        this.creditContext = this.add.container(userSetting/* View.centerX */.G7.centerX, userSetting/* View.centerY */.G7.centerY);\r\n        const youtubeChannel = 'https://www.youtube.com/channel/UCBJnFgIQ9YORTiz10_Mgy_A';\r\n        const bg = this.add.image(0, 0, 'blackScreen').setAlpha(0.9).setDisplaySize(userSetting/* View.w */.G7.w, userSetting/* View.h */.G7.h);\r\n        const title = this.add.text(0, -(TxtTitleHeightGap * 3), 'Credit').setFontSize(this.titleFontSize / 2).setOrigin(0.5, 0.5);\r\n        const preVersion = this.add.text(-this.middleGap, -(TxtTitleHeightGap * 2), 'Version').setOrigin(1, 0.5).setAlpha(0.6);\r\n        const version = this.add.text(this.middleGap, preVersion.y, VersionNum).setOrigin(0, 0.5);\r\n        const preName = this.add.text(-this.middleGap, -(TxtTitleHeightGap), 'Maker').setOrigin(1, 0.5).setAlpha(0.6);\r\n        const name = this.add.text(this.middleGap, preName.y, 'Flux Hunter').setOrigin(0, 0.5);\r\n        const preUrl = this.add.text(-this.middleGap, 0, 'Making Blueprint').setOrigin(1, 0.5).setAlpha(0.6);\r\n        const url = this.add.text(this.middleGap, preUrl.y, 'click here for channel').setOrigin(0, 0.5);\r\n        const guide = this.add.text(0, url.y + TxtTitleHeightGap, 'press anywhere to close').setOrigin(0.5, 0.5).setAlpha(0.5);\r\n        this.creditContext.add([\r\n            bg, title, preVersion, version, preName, name, preUrl, url, guide\r\n        ]);\r\n        bg.setInteractive();\r\n        bg.on('pointerup', () => { this.creditContext.hide(); });\r\n        [preUrl, url].map((urlEle) => {\r\n            urlEle.setInteractive();\r\n            urlEle.on('pointerup', () => { window.open(youtubeChannel, '_blank'); });\r\n        });\r\n        this.creditContext.show = () => { this.creditContext.setVisible(true); };\r\n        this.creditContext.hide = () => { this.creditContext.setVisible(false); };\r\n        this.creditContext.hide();\r\n        SetDepth(this.creditContext, 'popUp');\r\n    }\r\n}\r\n/* harmony default export */ const title = (TitleScene);\r\n\r\n\n;// CONCATENATED MODULE: ./src/outsourcing/BlockPang/blockPang.ts\n// import Phaser from 'phaser';\r\n\r\n\r\n\r\n\r\n\r\nclass MainScene extends Phaser.Scene {\r\n    constructor() {\r\n        super({\r\n            key: 'main',\r\n            active: false,\r\n        });\r\n    }\r\n    init() {\r\n        this.game.scene.add('title', title, false);\r\n        this.game.scene.add('game', game, false);\r\n    }\r\n    create() {\r\n        StartTitle(this);\r\n    }\r\n}\r\nconst AssetUrl = 'https://silvertree7622.github.io/webgames/blockPang/assets/';\r\nlet Assets = {\r\n    dynamic: [\r\n        async () => {\r\n            let list = [\r\n                // common\r\n                ...GetFullScreenAssets('touchSfx'),\r\n                ...GetSnsAssets(),\r\n                // particle\r\n                {\r\n                    key: 'particleSprite',\r\n                    url: await AssetUrl + 'particleSprite.png',\r\n                    json: await __webpack_require__(442),\r\n                    type: 'atlas'\r\n                },\r\n                { key: 'diamond1', url: await AssetUrl + 'diamond1.png', type: 'image' },\r\n                { key: 'diamond2', url: await AssetUrl + 'diamond2.png', type: 'image' },\r\n                { key: 'diamond3', url: await AssetUrl + 'diamond3.png', type: 'image' },\r\n                { key: 'diamond4', url: await AssetUrl + 'diamond4.png', type: 'image' },\r\n                { key: 'key1', url: await AssetUrl + 'key1.png', type: 'image' },\r\n                { key: 'key2', url: await AssetUrl + 'key2.png', type: 'image' },\r\n                { key: 'key3', url: await AssetUrl + 'key3.png', type: 'image' },\r\n                { key: 'key4', url: await AssetUrl + 'key4.png', type: 'image' },\r\n                { key: 'ruby1', url: await AssetUrl + 'ruby1.png', type: 'image' },\r\n                { key: 'ruby2', url: await AssetUrl + 'ruby2.png', type: 'image' },\r\n                { key: 'ruby3', url: await AssetUrl + 'ruby3.png', type: 'image' },\r\n                { key: 'ruby4', url: await AssetUrl + 'ruby4.png', type: 'image' },\r\n                { key: 'heart', url: await AssetUrl + 'heart.png', type: 'image' },\r\n                // ui\r\n                { key: 'bgBlue', url: await AssetUrl + 'bgBlue.png', type: 'image' },\r\n                { key: 'bgBrown', url: await AssetUrl + 'bgBrown.png', type: 'image' },\r\n                { key: 'bgGreen', url: await AssetUrl + 'bgGreen.png', type: 'image' },\r\n                { key: 'btnBlue', url: await AssetUrl + 'btnBlue.png', type: 'image' },\r\n                { key: 'btnBrown', url: await AssetUrl + 'btnBrown.png', type: 'image' },\r\n                { key: 'btnGreen', url: await AssetUrl + 'btnGreen.png', type: 'image' },\r\n                { key: 'panelGreen', url: await AssetUrl + 'panelGreen.png', type: 'image' },\r\n                { key: 'panelBlue', url: await AssetUrl + 'panelBlue.png', type: 'image' },\r\n                { key: 'panelBrown', url: await AssetUrl + 'panelBrown.png', type: 'image' },\r\n                { key: 'overBtnUpBlue', url: await AssetUrl + 'overBtnUpBlue.png', type: 'image' },\r\n                { key: 'overBtnUpBrown', url: await AssetUrl + 'overBtnUpBrown.png', type: 'image' },\r\n                { key: 'overBtnUpGreen', url: await AssetUrl + 'overBtnUpGreen.png', type: 'image' },\r\n                { key: 'overBtnDownBlue', url: await AssetUrl + 'overBtnDownBlue.png', type: 'image' },\r\n                { key: 'overBtnDownBrown', url: await AssetUrl + 'overBtnDownBrown.png', type: 'image' },\r\n                { key: 'overBtnDownGreen', url: await AssetUrl + 'overBtnDownGreen.png', type: 'image' },\r\n                { key: 'blackScreen', url: await AssetUrl + 'blackScreen.png', type: 'image' },\r\n                { key: 'exitBtn', url: await AssetUrl + 'exitBtn.png', type: 'image' },\r\n                { key: 'titleContextBg', url: await AssetUrl + 'titleContextBg.png', type: 'image' },\r\n                { key: 'audioOn', url: await AssetUrl + 'audioOn.png', type: 'image' },\r\n                { key: 'audioOff', url: await AssetUrl + 'audioOff.png', type: 'image' },\r\n                { key: 'musicOn', url: await AssetUrl + 'musicOn.png', type: 'image' },\r\n                { key: 'musicOff', url: await AssetUrl + 'musicOff.png', type: 'image' },\r\n                { key: 'colorBackground', url: await AssetUrl + 'colorBackground.png', type: 'image' },\r\n                { key: 'colorHandle', url: await AssetUrl + 'colorHandle.png', type: 'image' },\r\n                { key: 'colorHandleDown', url: await AssetUrl + 'colorHandleDown.png', type: 'image' },\r\n                { key: 'overBack', url: await AssetUrl + 'overBack.png', type: 'image' },\r\n                { key: 'overRetry', url: await AssetUrl + 'overRetry.png', type: 'image' },\r\n                { key: 'settingBtn', url: await AssetUrl + 'settingBtn.png', type: 'image' },\r\n                { key: 'settingPanel', url: await AssetUrl + 'settingPanel.png', type: 'image' },\r\n                { key: 'settingOverBtnUp', url: await AssetUrl + 'settingOverBtnUp.png', type: 'image' },\r\n                { key: 'settingOverBtnDown', url: await AssetUrl + 'settingOverBtnDown.png', type: 'image' },\r\n                { key: 'btnSettingDown', url: await AssetUrl + 'btnSettingDown.png', type: 'image' },\r\n                { key: 'btnSettingUp', url: await AssetUrl + 'btnSettingUp.png', type: 'image' },\r\n                { key: 'screenSmaller', url: await AssetUrl + 'screenSmaller.png', type: 'image' },\r\n                { key: 'screenLarger', url: await AssetUrl + 'screenLarger.png', type: 'image' },\r\n                { key: 'warningSign', url: await AssetUrl + 'warningSign.png', type: 'image' },\r\n                // ui scene\r\n                { key: 'cloud1', url: await AssetUrl + 'cloud1.png', type: 'image' },\r\n                { key: 'cloud2', url: await AssetUrl + 'cloud2.png', type: 'image' },\r\n                { key: 'cloud3', url: await AssetUrl + 'cloud3.png', type: 'image' },\r\n                { key: 'cloud4', url: await AssetUrl + 'cloud4.png', type: 'image' },\r\n                { key: 'cloud5', url: await AssetUrl + 'cloud5.png', type: 'image' },\r\n                { key: 'cloud6', url: await AssetUrl + 'cloud6.png', type: 'image' },\r\n                { key: 'cloud7', url: await AssetUrl + 'cloud7.png', type: 'image' },\r\n                { key: 'cloud8', url: await AssetUrl + 'cloud8.png', type: 'image' },\r\n                { key: 'cloud9', url: await AssetUrl + 'cloud9.png', type: 'image' },\r\n                { key: 'tree1', url: await AssetUrl + 'tree01.png', type: 'image' },\r\n                { key: 'tree2', url: await AssetUrl + 'tree02.png', type: 'image' },\r\n                { key: 'tree3', url: await AssetUrl + 'tree03.png', type: 'image' },\r\n                { key: 'tree4', url: await AssetUrl + 'tree04.png', type: 'image' },\r\n                { key: 'tree5', url: await AssetUrl + 'tree05.png', type: 'image' },\r\n                { key: 'tree6', url: await AssetUrl + 'tree06.png', type: 'image' },\r\n                { key: 'tree7', url: await AssetUrl + 'tree07.png', type: 'image' },\r\n                { key: 'tree8', url: await AssetUrl + 'tree08.png', type: 'image' },\r\n                { key: 'tree9', url: await AssetUrl + 'tree09.png', type: 'image' },\r\n                { key: 'tree10', url: await AssetUrl + 'tree10.png', type: 'image' },\r\n                { key: 'tree11', url: await AssetUrl + 'tree11.png', type: 'image' },\r\n                { key: 'tree12', url: await AssetUrl + 'tree12.png', type: 'image' },\r\n                { key: 'tree13', url: await AssetUrl + 'tree13.png', type: 'image' },\r\n                { key: 'tree14', url: await AssetUrl + 'tree14.png', type: 'image' },\r\n                { key: 'tree15', url: await AssetUrl + 'tree15.png', type: 'image' },\r\n                { key: 'tree16', url: await AssetUrl + 'tree16.png', type: 'image' },\r\n                { key: 'tree17', url: await AssetUrl + 'tree17.png', type: 'image' },\r\n                { key: 'tree18', url: await AssetUrl + 'tree18.png', type: 'image' },\r\n                { key: 'tree19', url: await AssetUrl + 'tree19.png', type: 'image' },\r\n                { key: 'tree20', url: await AssetUrl + 'tree20.png', type: 'image' },\r\n                { key: 'tree21', url: await AssetUrl + 'tree21.png', type: 'image' },\r\n                { key: 'tree22', url: await AssetUrl + 'tree22.png', type: 'image' },\r\n                { key: 'tree23', url: await AssetUrl + 'tree23.png', type: 'image' },\r\n                { key: 'tree24', url: await AssetUrl + 'tree24.png', type: 'image' },\r\n                { key: 'tree25', url: await AssetUrl + 'tree25.png', type: 'image' },\r\n                { key: 'tree26', url: await AssetUrl + 'tree26.png', type: 'image' },\r\n                { key: 'tree27', url: await AssetUrl + 'tree27.png', type: 'image' },\r\n                { key: 'tree28', url: await AssetUrl + 'tree28.png', type: 'image' },\r\n                { key: 'tree29', url: await AssetUrl + 'tree29.png', type: 'image' },\r\n                { key: 'tree30', url: await AssetUrl + 'tree30.png', type: 'image' },\r\n                { key: 'tree31', url: await AssetUrl + 'tree31.png', type: 'image' },\r\n                { key: 'tree32', url: await AssetUrl + 'tree32.png', type: 'image' },\r\n                { key: 'tree33', url: await AssetUrl + 'tree33.png', type: 'image' },\r\n                { key: 'tree34', url: await AssetUrl + 'tree34.png', type: 'image' },\r\n                { key: 'tree35', url: await AssetUrl + 'tree35.png', type: 'image' },\r\n                { key: 'mist1', url: await AssetUrl + 'mist1.png', type: 'image' },\r\n                { key: 'mist2', url: await AssetUrl + 'mist2.png', type: 'image' },\r\n                { key: 'mist3', url: await AssetUrl + 'mist3.png', type: 'image' },\r\n                { key: 'mist4', url: await AssetUrl + 'mist4.png', type: 'image' },\r\n                // shape\r\n                { key: 'blueBall', url: await AssetUrl + 'blueBall.png', type: 'image' },\r\n                { key: 'greenBall', url: await AssetUrl + 'greenBall.png', type: 'image' },\r\n                { key: 'brownBall', url: await AssetUrl + 'brownBall.png', type: 'image' },\r\n                { key: 'obstacleBall', url: await AssetUrl + 'obstacleBall.png', type: 'image' },\r\n                { key: 'blueRect', url: await AssetUrl + 'blueRect.png', type: 'image' },\r\n                { key: 'greenRect', url: await AssetUrl + 'greenRect.png', type: 'image' },\r\n                { key: 'brownRect', url: await AssetUrl + 'brownRect.png', type: 'image' },\r\n                { key: 'obstacleRect', url: await AssetUrl + 'obstacleRect.png', type: 'image' },\r\n                { key: 'blueSquare', url: await AssetUrl + 'blueSquare.png', type: 'image' },\r\n                { key: 'greenSquare', url: await AssetUrl + 'greenSquare.png', type: 'image' },\r\n                { key: 'brownSquare', url: await AssetUrl + 'brownSquare.png', type: 'image' },\r\n                { key: 'obstacleSquare', url: await AssetUrl + 'obstacleSquare.png', type: 'image' },\r\n                { key: 'lockedRectangle', url: await AssetUrl + 'block_locked_large.png', type: 'image' },\r\n                { key: 'locketSquare', url: await AssetUrl + 'block_locked_square.png', type: 'image' },\r\n                { key: 'key', url: await AssetUrl + 'key.png', type: 'image' },\r\n                // type\r\n                { key: 'arrowLeft', url: await AssetUrl + 'arrowLeft.png', type: 'image' },\r\n                { key: 'locked', url: await AssetUrl + 'locked.png', type: 'image' },\r\n                { key: 'pattern', url: await AssetUrl + 'pattern.png', type: 'image' },\r\n                { key: 'power', url: await AssetUrl + 'power.png', type: 'image' },\r\n                { key: 'random', url: await AssetUrl + 'random.png', type: 'image' },\r\n                { key: 'signal1', url: await AssetUrl + 'signal1.png', type: 'image' },\r\n                { key: 'signal2', url: await AssetUrl + 'signal2.png', type: 'image' },\r\n                { key: 'signal3', url: await AssetUrl + 'signal3.png', type: 'image' },\r\n                { key: 'star', url: await AssetUrl + 'star.png', type: 'image' },\r\n                { key: 'swipeLeft', url: await AssetUrl + 'swipeLeft.png', type: 'image' },\r\n                { key: 'touch', url: await AssetUrl + 'touch.png', type: 'image' },\r\n                { key: 'trashcan', url: await AssetUrl + 'trashcan.png', type: 'image' },\r\n                { key: 'trashcanOpen', url: await AssetUrl + 'trashcanOpen.png', type: 'image' },\r\n                { key: 'unlocked', url: await AssetUrl + 'unlocked.png', type: 'image' },\r\n                // audio\r\n                ...GetAudioAssets([\r\n                    // voice sfx\r\n                    { key: 'voice1', url: await AssetUrl + '1.mp3', type: 'audio' },\r\n                    { key: 'voice2', url: await AssetUrl + '2.mp3', type: 'audio' },\r\n                    { key: 'voice3', url: await AssetUrl + '3.mp3', type: 'audio' },\r\n                    { key: 'voice4', url: await AssetUrl + '4.mp3', type: 'audio' },\r\n                    { key: 'voice5', url: await AssetUrl + '5.mp3', type: 'audio' },\r\n                    { key: 'voice6', url: await AssetUrl + '6.mp3', type: 'audio' },\r\n                    { key: 'voice7', url: await AssetUrl + '7.mp3', type: 'audio' },\r\n                    { key: 'voice8', url: await AssetUrl + '8.mp3', type: 'audio' },\r\n                    { key: 'voice9', url: await AssetUrl + '9.mp3', type: 'audio' },\r\n                    { key: 'voice10', url: await AssetUrl + '10.mp3', type: 'audio' },\r\n                    { key: 'voiceGo', url: await AssetUrl + 'go.mp3', type: 'audio' },\r\n                    { key: 'voiceHighScore', url: await AssetUrl + 'new_highscore.mp3', type: 'audio' },\r\n                    { key: 'voiceTimeOver', url: await AssetUrl + 'time_over.mp3', type: 'audio' },\r\n                    { key: 'voiceGameOver', url: await AssetUrl + 'game_over.mp3', type: 'audio' },\r\n                    // other sfx\r\n                    { key: 'gearAnim', url: await AssetUrl + 'gearAnim.mp3', type: 'audio' },\r\n                    { key: 'earthquake', url: await AssetUrl + 'earthquake.mp3', type: 'audio' },\r\n                    { key: 'touchSfx', url: await AssetUrl + 'touchSfx.mp3', type: 'audio' },\r\n                    { key: 'loadingBlockDone', url: await AssetUrl + 'loadingBlockDone.mp3', type: 'audio' },\r\n                    { key: 'loadingBlockOnProcess', url: await AssetUrl + 'loadingBlockOnProcess.mp3', type: 'audio' },\r\n                    { key: 'powerBlockOn', url: await AssetUrl + 'powerBlockOn.mp3', type: 'audio' },\r\n                    { key: 'powerBlockOff', url: await AssetUrl + 'powerBlockOff.mp3', type: 'audio' },\r\n                    { key: 'spawnObstacleSfx', url: await AssetUrl + 'spawnObstacleSfx.mp3', type: 'audio' },\r\n                    { key: 'timeIncreaseSfx', url: await AssetUrl + 'timeIncreaseSfx.mp3', type: 'audio' },\r\n                    { key: 'scoreSfx', url: await AssetUrl + 'scoreSfx.mp3', type: 'audio' },\r\n                    { key: 'warningSfx', url: await AssetUrl + 'warningSfx.mp3', type: 'audio' },\r\n                ], [\r\n                    { key: 'gameBgm', url: await AssetUrl + 'blockpangbgm.mp3', type: 'audio' },\r\n                ]),\r\n            ];\r\n            return list;\r\n        }\r\n    ],\r\n};\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///926\n")},442:g=>{"use strict";g.exports=JSON.parse('{"frames":{"blue":{"frame":{"x":2,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}},"green":{"frame":{"x":132,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}},"red":{"frame":{"x":262,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}},"white":{"frame":{"x":392,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}},"yellow":{"frame":{"x":522,"y":2,"w":128,"h":128},"rotated":false,"trimmed":false,"spriteSourceSize":{"x":0,"y":0,"w":128,"h":128},"sourceSize":{"w":128,"h":128},"pivot":{"x":0.5,"y":0.5}}},"meta":{"app":"http://www.codeandweb.com/texturepacker","version":"1.0","image":"flares.png","format":"RGBA8888","size":{"w":652,"h":132},"scale":"1","smartupdate":"$TexturePacker:SmartUpdate:f2781d89823d5a67fc31381af364b421:da82646b19b2f0c08684086824b1e581:71625947cf221c10549b852c13ffedc7$"}}')}}]);